//
// OCCAM
//
// Copyright (c) 2019, SRI International
//
//  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of SRI International nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

/**
 * Force the inlining of special functions.
 *
 * The inlining of functions is performed by opt. Here, we force the
 * inlining of some functions even if the function is marked as
 * noninline, nonopt or even if the user disabled inlining. Currently,
 * we inline a function if it is either:
 *
 * 1) created by devirtualization, or
 *
 * 2) created by specialization.
 **/

#include "llvm/ADT/SmallPtrSet.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Module.h"
#include "llvm/Pass.h"
#include "llvm/Support/CommandLine.h"

#include "utils/Inliner.h"

using namespace llvm;
using namespace previrt;

static cl::opt<bool> InlineBounceFunctions(
    "Pinline-bounce-functions", cl::init(false), cl::Hidden,
    cl::desc("Inline bounce functions generated by devirtualization"));

static cl::opt<bool>
    InlineSpecializedFunctions("Pinline-specialized-functions", cl::init(false),
                               cl::Hidden,
                               cl::desc("Inline specialized functions"));

static const StringRef bounce_prefix = "__occam.bounce";
static const StringRef spec_prefix = "__occam_spec.";

namespace previrt {
class InlinerPass : public llvm::ModulePass {
public:
  static char ID;

  InlinerPass() : ModulePass(ID) {}

  virtual void getAnalysisUsage(AnalysisUsage &AU) const override {
    if (!InlineBounceFunctions && !InlineSpecializedFunctions) {
      AU.setPreservesAll();
    } else {
      // TODO: update the call graph so the pass manager does not
      // re-calculate it again.
    }
  }

  virtual StringRef getPassName() const override {
    return "Force inlining of special functions";
  }

  virtual bool runOnModule(llvm::Module &M) override {
    if (!InlineBounceFunctions && !InlineSpecializedFunctions) {
      /// HACK: do not remove this line. The python code searches for it ...            
      errs() << "...no progress...\n";
      return false;
    } else {
      SmallPtrSet<Function *, 8> ToInline;
      for (auto &F : M) {
        if (!F.isDeclaration()) {
          if (InlineBounceFunctions && F.getName().startswith(bounce_prefix)) {
            ToInline.insert(&F);
          } else if (InlineSpecializedFunctions &&
                     F.getName().startswith(spec_prefix)) {
            ToInline.insert(&F);
          }
        }
      }
      if (ToInline.empty()) {
	/// HACK: do not remove this line. The python code searches for it ...            
	errs() << "...no progress...\n";
        return false;
      } else {
	/// HACK: do not remove this line. The python code searches for it ...      
	errs() << "...progress...\n";
        utils::inlineOnly(M, ToInline);
        return true;
      }
    }
  }
};

char InlinerPass::ID = 0;

} // end namespace previrt

static RegisterPass<previrt::InlinerPass>
    X("Pinliner", "Force inlining of special functions", false, false);
