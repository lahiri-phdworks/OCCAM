// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Previrt.proto
// Original file comments:
//
// OCCAM
//
// Copyright (c) 2011-2012, SRI International
//
//  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of SRI International nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#ifndef GRPC_Previrt_2eproto__INCLUDED
#define GRPC_Previrt_2eproto__INCLUDED

#include "Previrt.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace previrt {
namespace proto {

class QueryOracle final {
 public:
  static constexpr char const* service_full_name() {
    return "previrt.proto.QueryOracle";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::previrt::proto::Prediction* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>> AsyncQuery(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>* AsyncQueryRaw(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::previrt::proto::Prediction>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Query(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::previrt::proto::Prediction* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>> AsyncQuery(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Query(::grpc::ClientContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>* AsyncQueryRaw(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::previrt::proto::Prediction>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::previrt::proto::State& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::previrt::proto::State* request, ::grpc::ServerAsyncResponseWriter< ::previrt::proto::Prediction>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Query<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Query() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::previrt::proto::State, ::previrt::proto::Prediction>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::previrt::proto::State* request, ::previrt::proto::Prediction* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::experimental::MessageAllocator< ::previrt::proto::State, ::previrt::proto::Prediction>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::previrt::proto::State, ::previrt::proto::Prediction>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Query(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Query<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Query<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Query() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Query(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::previrt::proto::State, ::previrt::proto::Prediction>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::previrt::proto::State, ::previrt::proto::Prediction>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::previrt::proto::State* /*request*/, ::previrt::proto::Prediction* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::previrt::proto::State,::previrt::proto::Prediction>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Query<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Query<Service > StreamedService;
};

}  // namespace proto
}  // namespace previrt


#endif  // GRPC_Previrt_2eproto__INCLUDED
