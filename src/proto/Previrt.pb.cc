// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Previrt.proto

#include "Previrt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActionTree_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionTree_Forward_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallInfo_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallRewrite_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnforceInterface_Functions_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PrevirtType_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Float_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Global_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Int_Previrt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Str_Previrt_2eproto;
namespace previrt {
namespace proto {
class PrevirtType_IntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType_Int> _instance;
} _PrevirtType_Int_default_instance_;
class PrevirtType_VecDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType_Vec> _instance;
} _PrevirtType_Vec_default_instance_;
class PrevirtType_StrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType_Str> _instance;
} _PrevirtType_Str_default_instance_;
class PrevirtType_FloatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType_Float> _instance;
} _PrevirtType_Float_default_instance_;
class PrevirtType_GlobalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType_Global> _instance;
} _PrevirtType_Global_default_instance_;
class PrevirtTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrevirtType> _instance;
} _PrevirtType_default_instance_;
class CallInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallInfo> _instance;
} _CallInfo_default_instance_;
class CallRewriteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallRewrite> _instance;
} _CallRewrite_default_instance_;
class ComponentInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentInterface> _instance;
} _ComponentInterface_default_instance_;
class ComponentInterfaceTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComponentInterfaceTransform> _instance;
} _ComponentInterfaceTransform_default_instance_;
class ActionTree_CaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionTree_Case> _instance;
} _ActionTree_Case_default_instance_;
class ActionTree_ForwardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionTree_Forward> _instance;
} _ActionTree_Forward_default_instance_;
class ActionTree_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionTree_Event> _instance;
} _ActionTree_Event_default_instance_;
class ActionTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionTree> _instance;
} _ActionTree_default_instance_;
class EnforceInterface_FunctionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnforceInterface_Functions> _instance;
} _EnforceInterface_Functions_default_instance_;
class EnforceInterfaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnforceInterface> _instance;
} _EnforceInterface_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class PredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prediction> _instance;
} _Prediction_default_instance_;
}  // namespace proto
}  // namespace previrt
static void InitDefaultsscc_info_ActionTree_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_ActionTree_Case_default_instance_;
    new (ptr) ::previrt::proto::ActionTree_Case();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::previrt::proto::_ActionTree_Event_default_instance_;
    new (ptr) ::previrt::proto::ActionTree_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::previrt::proto::_ActionTree_default_instance_;
    new (ptr) ::previrt::proto::ActionTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::ActionTree_Case::InitAsDefaultInstance();
  ::previrt::proto::ActionTree_Event::InitAsDefaultInstance();
  ::previrt::proto::ActionTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActionTree_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ActionTree_Previrt_2eproto}, {
      &scc_info_ActionTree_Forward_Previrt_2eproto.base,
      &scc_info_PrevirtType_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_ActionTree_Forward_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_ActionTree_Forward_default_instance_;
    new (ptr) ::previrt::proto::ActionTree_Forward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::ActionTree_Forward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionTree_Forward_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActionTree_Forward_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_CallInfo_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_CallInfo_default_instance_;
    new (ptr) ::previrt::proto::CallInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::CallInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallInfo_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CallInfo_Previrt_2eproto}, {
      &scc_info_PrevirtType_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_CallRewrite_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_CallRewrite_default_instance_;
    new (ptr) ::previrt::proto::CallRewrite();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::CallRewrite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CallRewrite_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CallRewrite_Previrt_2eproto}, {
      &scc_info_CallInfo_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_ComponentInterface_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_ComponentInterface_default_instance_;
    new (ptr) ::previrt::proto::ComponentInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::ComponentInterface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ComponentInterface_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ComponentInterface_Previrt_2eproto}, {
      &scc_info_CallInfo_Previrt_2eproto.base,
      &scc_info_PrevirtType_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_ComponentInterfaceTransform_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_ComponentInterfaceTransform_default_instance_;
    new (ptr) ::previrt::proto::ComponentInterfaceTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::ComponentInterfaceTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComponentInterfaceTransform_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ComponentInterfaceTransform_Previrt_2eproto}, {
      &scc_info_CallRewrite_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_EnforceInterface_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_EnforceInterface_default_instance_;
    new (ptr) ::previrt::proto::EnforceInterface();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::EnforceInterface::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnforceInterface_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnforceInterface_Previrt_2eproto}, {
      &scc_info_EnforceInterface_Functions_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_EnforceInterface_Functions_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_EnforceInterface_Functions_default_instance_;
    new (ptr) ::previrt::proto::EnforceInterface_Functions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::EnforceInterface_Functions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EnforceInterface_Functions_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EnforceInterface_Functions_Previrt_2eproto}, {
      &scc_info_ActionTree_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_Prediction_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_Prediction_default_instance_;
    new (ptr) ::previrt::proto::Prediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::Prediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prediction_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prediction_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_PrevirtType_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_PrevirtType_Vec_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType_Vec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::previrt::proto::_PrevirtType_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::PrevirtType_Vec::InitAsDefaultInstance();
  ::previrt::proto::PrevirtType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PrevirtType_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PrevirtType_Previrt_2eproto}, {
      &scc_info_PrevirtType_Int_Previrt_2eproto.base,
      &scc_info_PrevirtType_Str_Previrt_2eproto.base,
      &scc_info_PrevirtType_Float_Previrt_2eproto.base,
      &scc_info_PrevirtType_Global_Previrt_2eproto.base,}};

static void InitDefaultsscc_info_PrevirtType_Float_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_PrevirtType_Float_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType_Float();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::PrevirtType_Float::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Float_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrevirtType_Float_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_PrevirtType_Global_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_PrevirtType_Global_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType_Global();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::PrevirtType_Global::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Global_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrevirtType_Global_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_PrevirtType_Int_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_PrevirtType_Int_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType_Int();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::PrevirtType_Int::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Int_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrevirtType_Int_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_PrevirtType_Str_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_PrevirtType_Str_default_instance_;
    new (ptr) ::previrt::proto::PrevirtType_Str();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::PrevirtType_Str::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrevirtType_Str_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrevirtType_Str_Previrt_2eproto}, {}};

static void InitDefaultsscc_info_State_Previrt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::previrt::proto::_State_default_instance_;
    new (ptr) ::previrt::proto::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::previrt::proto::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_Previrt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_State_Previrt_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Previrt_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Previrt_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Previrt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Previrt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Int, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Int, bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Int, value_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Vec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Vec, elems_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Str, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Str, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Str, data_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Str, cstr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Float, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Float, sem_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Float, data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Global, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Global, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Global, name_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType_Global, is_const_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, type_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, int__),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, vec_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, str_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, float__),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::PrevirtType, global_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallInfo, name_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallInfo, count_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallInfo, args_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallRewrite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallRewrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallRewrite, call_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallRewrite, new_function_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::CallRewrite, args_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterface, calls_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterface, definitions_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterface, globals_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterface, references_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterfaceTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ComponentInterfaceTransform, calls_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, var_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, test_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, _then_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Case, _else_),
  3,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Forward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, exit_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, handler_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, args_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree_Event, then_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, type_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, case__),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, forward_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::ActionTree, event_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface_Functions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface_Functions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface_Functions, name_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface_Functions, actions_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::EnforceInterface, functions_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, features_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, trace_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, meta_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, caller_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, callee_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, module_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::State, args_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, q_yes_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, q_no_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, pred_),
  PROTOBUF_FIELD_OFFSET(::previrt::proto::Prediction, state_encoded_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::previrt::proto::PrevirtType_Int)},
  { 9, -1, sizeof(::previrt::proto::PrevirtType_Vec)},
  { 15, 22, sizeof(::previrt::proto::PrevirtType_Str)},
  { 24, 31, sizeof(::previrt::proto::PrevirtType_Float)},
  { 33, 40, sizeof(::previrt::proto::PrevirtType_Global)},
  { 42, 53, sizeof(::previrt::proto::PrevirtType)},
  { 59, 67, sizeof(::previrt::proto::CallInfo)},
  { 70, 78, sizeof(::previrt::proto::CallRewrite)},
  { 81, -1, sizeof(::previrt::proto::ComponentInterface)},
  { 90, -1, sizeof(::previrt::proto::ComponentInterfaceTransform)},
  { 96, 105, sizeof(::previrt::proto::ActionTree_Case)},
  { 109, -1, sizeof(::previrt::proto::ActionTree_Forward)},
  { 114, 123, sizeof(::previrt::proto::ActionTree_Event)},
  { 127, 136, sizeof(::previrt::proto::ActionTree)},
  { 140, 147, sizeof(::previrt::proto::EnforceInterface_Functions)},
  { 149, -1, sizeof(::previrt::proto::EnforceInterface)},
  { 155, 167, sizeof(::previrt::proto::State)},
  { 174, 183, sizeof(::previrt::proto::Prediction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_Int_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_Vec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_Str_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_Float_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_Global_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_PrevirtType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_CallInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_CallRewrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ComponentInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ComponentInterfaceTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ActionTree_Case_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ActionTree_Forward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ActionTree_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_ActionTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_EnforceInterface_Functions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_EnforceInterface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::previrt::proto::_Prediction_default_instance_),
};

const char descriptor_table_protodef_Previrt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rPrevirt.proto\022\rprevirt.proto\"\216\004\n\013Previ"
  "rtType\022!\n\004type\030\001 \002(\0162\023.previrt.proto.Typ"
  "e\022+\n\003int\030\n \001(\n2\036.previrt.proto.PrevirtTy"
  "pe.Int\022+\n\003vec\030\024 \001(\n2\036.previrt.proto.Prev"
  "irtType.Vec\022+\n\003str\030\036 \001(\n2\036.previrt.proto"
  ".PrevirtType.Str\022/\n\005float\030( \001(\n2 .previr"
  "t.proto.PrevirtType.Float\0221\n\006global\0302 \001("
  "\n2!.previrt.proto.PrevirtType.Global\032\"\n\003"
  "Int\022\014\n\004bits\030\002 \002(\r\022\r\n\005value\030\003 \001(\t\0320\n\003Vec\022"
  ")\n\005elems\030\025 \003(\0132\032.previrt.proto.PrevirtTy"
  "pe\032\'\n\003Str\022\014\n\004data\030\037 \001(\014\022\022\n\004cstr\030  \001(\010:\004t"
  "rue\032A\n\005Float\022*\n\003sem\030) \002(\0162\035.previrt.prot"
  "o.FloatSemantics\022\014\n\004data\030* \001(\t\032/\n\006Global"
  "\022\014\n\004name\0303 \002(\014\022\027\n\010is_const\0304 \001(\010:\005false\""
  "T\n\010CallInfo\022\014\n\004name\030\001 \002(\014\022\020\n\005count\030\002 \001(\r"
  ":\0011\022(\n\004args\030\003 \003(\0132\032.previrt.proto.Previr"
  "tType\"\\\n\013CallRewrite\022%\n\004call\030\001 \002(\0132\027.pre"
  "virt.proto.CallInfo\022\024\n\014new_function\030\002 \002("
  "\014\022\020\n\004args\030\003 \003(\005B\002\020\001\"\253\001\n\022ComponentInterfa"
  "ce\022&\n\005calls\030\001 \003(\0132\027.previrt.proto.CallIn"
  "fo\022,\n\013definitions\030\002 \003(\0132\027.previrt.proto."
  "CallInfo\022+\n\007globals\030\003 \003(\0132\032.previrt.prot"
  "o.PrevirtType\022\022\n\nreferences\030\004 \003(\014\"H\n\033Com"
  "ponentInterfaceTransform\022)\n\005calls\030\001 \003(\0132"
  "\032.previrt.proto.CallRewrite\"\314\003\n\nActionTr"
  "ee\022\'\n\004type\030\001 \002(\0162\031.previrt.proto.ActionT"
  "ype\022,\n\004case\030\n \001(\n2\036.previrt.proto.Action"
  "Tree.Case\0222\n\007forward\030\024 \001(\n2!.previrt.pro"
  "to.ActionTree.Forward\022.\n\005event\030\036 \001(\n2\037.p"
  "revirt.proto.ActionTree.Event\032\221\001\n\004Case\022\013"
  "\n\003var\030\013 \002(\005\022(\n\004test\030\014 \002(\0132\032.previrt.prot"
  "o.PrevirtType\022(\n\005_then\030\022 \002(\0132\031.previrt.p"
  "roto.ActionTree\022(\n\005_else\030\023 \002(\0132\031.previrt"
  ".proto.ActionTree\032\t\n\007Forward\032d\n\005Event\022\023\n"
  "\004exit\030\037 \001(\010:\005false\022\017\n\007handler\030  \001(\014\022\014\n\004a"
  "rgs\030! \003(\005\022\'\n\004then\030\' \001(\0132\031.previrt.proto."
  "ActionTree\"\227\001\n\020EnforceInterface\022<\n\tfunct"
  "ions\030\001 \003(\n2).previrt.proto.EnforceInterf"
  "ace.Functions\032E\n\tFunctions\022\014\n\004name\030\002 \002(\014"
  "\022*\n\007actions\030\003 \002(\0132\031.previrt.proto.Action"
  "Tree\"t\n\005State\022\020\n\010features\030\001 \002(\t\022\r\n\005trace"
  "\030\002 \003(\r\022\014\n\004meta\030\003 \001(\t\022\016\n\006caller\030\004 \001(\t\022\016\n\006"
  "callee\030\005 \001(\t\022\016\n\006module\030\006 \001(\t\022\014\n\004args\030\007 \001"
  "(\t\"N\n\nPrediction\022\r\n\005q_yes\030\001 \002(\002\022\014\n\004q_no\030"
  "\002 \002(\002\022\014\n\004pred\030\003 \002(\010\022\025\n\rstate_encoded\030\004 \001"
  "(\t*7\n\004Type\022\005\n\001U\020\000\022\005\n\001I\020\001\022\005\n\001F\020\002\022\005\n\001S\020\003\022\005"
  "\n\001V\020\004\022\005\n\001N\020\005\022\005\n\001G\020\006*\203\001\n\016FloatSemantics\022\014"
  "\n\010IEEEhalf\020\001\022\016\n\nIEEEsingle\020\002\022\016\n\nIEEEdoub"
  "le\020\003\022\014\n\010IEEEquad\020\004\022\025\n\021x87DoubleExtended\020"
  "\005\022\t\n\005Bogus\020\006\022\023\n\017PPCDoubleDouble\020\007*8\n\nAct"
  "ionType\022\010\n\004CASE\020\001\022\013\n\007FORWARD\020\002\022\t\n\005EVENT\020"
  "\003\022\010\n\004FAIL\020\0042I\n\013QueryOracle\022:\n\005Query\022\024.pr"
  "evirt.proto.State\032\031.previrt.proto.Predic"
  "tion\"\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Previrt_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Previrt_2eproto_sccs[15] = {
  &scc_info_ActionTree_Previrt_2eproto.base,
  &scc_info_ActionTree_Forward_Previrt_2eproto.base,
  &scc_info_CallInfo_Previrt_2eproto.base,
  &scc_info_CallRewrite_Previrt_2eproto.base,
  &scc_info_ComponentInterface_Previrt_2eproto.base,
  &scc_info_ComponentInterfaceTransform_Previrt_2eproto.base,
  &scc_info_EnforceInterface_Previrt_2eproto.base,
  &scc_info_EnforceInterface_Functions_Previrt_2eproto.base,
  &scc_info_Prediction_Previrt_2eproto.base,
  &scc_info_PrevirtType_Previrt_2eproto.base,
  &scc_info_PrevirtType_Float_Previrt_2eproto.base,
  &scc_info_PrevirtType_Global_Previrt_2eproto.base,
  &scc_info_PrevirtType_Int_Previrt_2eproto.base,
  &scc_info_PrevirtType_Str_Previrt_2eproto.base,
  &scc_info_State_Previrt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Previrt_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Previrt_2eproto = {
  false, false, descriptor_table_protodef_Previrt_2eproto, "Previrt.proto", 2126,
  &descriptor_table_Previrt_2eproto_once, descriptor_table_Previrt_2eproto_sccs, descriptor_table_Previrt_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_Previrt_2eproto::offsets,
  file_level_metadata_Previrt_2eproto, 18, file_level_enum_descriptors_Previrt_2eproto, file_level_service_descriptors_Previrt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Previrt_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Previrt_2eproto)), true);
namespace previrt {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Previrt_2eproto);
  return file_level_enum_descriptors_Previrt_2eproto[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FloatSemantics_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Previrt_2eproto);
  return file_level_enum_descriptors_Previrt_2eproto[1];
}
bool FloatSemantics_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Previrt_2eproto);
  return file_level_enum_descriptors_Previrt_2eproto[2];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PrevirtType_Int::InitAsDefaultInstance() {
}
class PrevirtType_Int::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevirtType_Int>()._has_bits_);
  static void set_has_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PrevirtType_Int::PrevirtType_Int(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType.Int)
}
PrevirtType_Int::PrevirtType_Int(const PrevirtType_Int& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  bits_ = from.bits_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType.Int)
}

void PrevirtType_Int::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Int_Previrt_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bits_ = 0u;
}

PrevirtType_Int::~PrevirtType_Int() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType.Int)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType_Int::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrevirtType_Int::ArenaDtor(void* object) {
  PrevirtType_Int* _this = reinterpret_cast< PrevirtType_Int* >(object);
  (void)_this;
}
void PrevirtType_Int::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType_Int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType_Int& PrevirtType_Int::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Int_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType_Int::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  bits_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType_Int::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bits(&has_bits);
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.PrevirtType.Int.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType_Int::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType.Int)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 bits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bits(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.PrevirtType.Int.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType.Int)
  return target;
}

size_t PrevirtType_Int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType.Int)
  size_t total_size = 0;

  // required uint32 bits = 2;
  if (_internal_has_bits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bits());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType_Int::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType.Int)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType_Int* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType_Int>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType.Int)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType.Int)
    MergeFrom(*source);
  }
}

void PrevirtType_Int::MergeFrom(const PrevirtType_Int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType.Int)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      bits_ = from.bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevirtType_Int::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType_Int::CopyFrom(const PrevirtType_Int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType.Int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType_Int::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrevirtType_Int::InternalSwap(PrevirtType_Int* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bits_, other->bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType_Int::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevirtType_Vec::InitAsDefaultInstance() {
}
class PrevirtType_Vec::_Internal {
 public:
};

PrevirtType_Vec::PrevirtType_Vec(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  elems_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType.Vec)
}
PrevirtType_Vec::PrevirtType_Vec(const PrevirtType_Vec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType.Vec)
}

void PrevirtType_Vec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Previrt_2eproto.base);
}

PrevirtType_Vec::~PrevirtType_Vec() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType.Vec)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType_Vec::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrevirtType_Vec::ArenaDtor(void* object) {
  PrevirtType_Vec* _this = reinterpret_cast< PrevirtType_Vec* >(object);
  (void)_this;
}
void PrevirtType_Vec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType_Vec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType_Vec& PrevirtType_Vec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType_Vec::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType.Vec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType_Vec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .previrt.proto.PrevirtType elems = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType_Vec::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType.Vec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .previrt.proto.PrevirtType elems = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_elems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType.Vec)
  return target;
}

size_t PrevirtType_Vec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType.Vec)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .previrt.proto.PrevirtType elems = 21;
  total_size += 2UL * this->_internal_elems_size();
  for (const auto& msg : this->elems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType_Vec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType.Vec)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType_Vec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType_Vec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType.Vec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType.Vec)
    MergeFrom(*source);
  }
}

void PrevirtType_Vec::MergeFrom(const PrevirtType_Vec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType.Vec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
}

void PrevirtType_Vec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType.Vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType_Vec::CopyFrom(const PrevirtType_Vec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType.Vec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType_Vec::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(elems_)) return false;
  return true;
}

void PrevirtType_Vec::InternalSwap(PrevirtType_Vec* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  elems_.InternalSwap(&other->elems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType_Vec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevirtType_Str::InitAsDefaultInstance() {
}
class PrevirtType_Str::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevirtType_Str>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cstr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PrevirtType_Str::PrevirtType_Str(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType.Str)
}
PrevirtType_Str::PrevirtType_Str(const PrevirtType_Str& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  cstr_ = from.cstr_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType.Str)
}

void PrevirtType_Str::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Str_Previrt_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cstr_ = true;
}

PrevirtType_Str::~PrevirtType_Str() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType.Str)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType_Str::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrevirtType_Str::ArenaDtor(void* object) {
  PrevirtType_Str* _this = reinterpret_cast< PrevirtType_Str* >(object);
  (void)_this;
}
void PrevirtType_Str::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType_Str::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType_Str& PrevirtType_Str::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Str_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType_Str::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType.Str)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    cstr_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType_Str::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes data = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cstr = 32 [default = true];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_cstr(&has_bits);
          cstr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType_Str::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType.Str)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 31;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        31, this->_internal_data(), target);
  }

  // optional bool cstr = 32 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_cstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType.Str)
  return target;
}

size_t PrevirtType_Str::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType.Str)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 31;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional bool cstr = 32 [default = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType_Str::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType.Str)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType_Str* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType_Str>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType.Str)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType.Str)
    MergeFrom(*source);
  }
}

void PrevirtType_Str::MergeFrom(const PrevirtType_Str& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType.Str)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      cstr_ = from.cstr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevirtType_Str::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType_Str::CopyFrom(const PrevirtType_Str& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType.Str)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType_Str::IsInitialized() const {
  return true;
}

void PrevirtType_Str::InternalSwap(PrevirtType_Str* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cstr_, other->cstr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType_Str::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevirtType_Float::InitAsDefaultInstance() {
}
class PrevirtType_Float::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevirtType_Float>()._has_bits_);
  static void set_has_sem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

PrevirtType_Float::PrevirtType_Float(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType.Float)
}
PrevirtType_Float::PrevirtType_Float(const PrevirtType_Float& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  sem_ = from.sem_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType.Float)
}

void PrevirtType_Float::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Float_Previrt_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sem_ = 1;
}

PrevirtType_Float::~PrevirtType_Float() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType.Float)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType_Float::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrevirtType_Float::ArenaDtor(void* object) {
  PrevirtType_Float* _this = reinterpret_cast< PrevirtType_Float* >(object);
  (void)_this;
}
void PrevirtType_Float::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType_Float::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType_Float& PrevirtType_Float::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Float_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType_Float::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmpty();
    }
    sem_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType_Float::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .previrt.proto.FloatSemantics sem = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::previrt::proto::FloatSemantics_IsValid(val))) {
            _internal_set_sem(static_cast<::previrt::proto::FloatSemantics>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string data = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.PrevirtType.Float.data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType_Float::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType.Float)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .previrt.proto.FloatSemantics sem = 41;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      41, this->_internal_sem(), target);
  }

  // optional string data = 42;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.PrevirtType.Float.data");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType.Float)
  return target;
}

size_t PrevirtType_Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType.Float)
  size_t total_size = 0;

  // required .previrt.proto.FloatSemantics sem = 41;
  if (_internal_has_sem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sem());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string data = 42;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType_Float::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType_Float* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType_Float>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType.Float)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType.Float)
    MergeFrom(*source);
  }
}

void PrevirtType_Float::MergeFrom(const PrevirtType_Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      sem_ = from.sem_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevirtType_Float::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType_Float::CopyFrom(const PrevirtType_Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType_Float::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrevirtType_Float::InternalSwap(PrevirtType_Float* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(sem_, other->sem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType_Float::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevirtType_Global::InitAsDefaultInstance() {
}
class PrevirtType_Global::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevirtType_Global>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_const(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PrevirtType_Global::PrevirtType_Global(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType.Global)
}
PrevirtType_Global::PrevirtType_Global(const PrevirtType_Global& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  is_const_ = from.is_const_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType.Global)
}

void PrevirtType_Global::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Global_Previrt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_const_ = false;
}

PrevirtType_Global::~PrevirtType_Global() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType.Global)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType_Global::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PrevirtType_Global::ArenaDtor(void* object) {
  PrevirtType_Global* _this = reinterpret_cast< PrevirtType_Global* >(object);
  (void)_this;
}
void PrevirtType_Global::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType_Global::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType_Global& PrevirtType_Global::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Global_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType_Global::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  is_const_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType_Global::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes name = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_const = 52 [default = false];
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_const(&has_bits);
          is_const_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType_Global::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType.Global)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes name = 51;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        51, this->_internal_name(), target);
  }

  // optional bool is_const = 52 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(52, this->_internal_is_const(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType.Global)
  return target;
}

size_t PrevirtType_Global::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType.Global)
  size_t total_size = 0;

  // required bytes name = 51;
  if (_internal_has_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_const = 52 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType_Global::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType.Global)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType_Global* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType_Global>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType.Global)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType.Global)
    MergeFrom(*source);
  }
}

void PrevirtType_Global::MergeFrom(const PrevirtType_Global& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType.Global)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      is_const_ = from.is_const_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevirtType_Global::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType_Global::CopyFrom(const PrevirtType_Global& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType.Global)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType_Global::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrevirtType_Global::InternalSwap(PrevirtType_Global* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_const_, other->is_const_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType_Global::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrevirtType::InitAsDefaultInstance() {
  ::previrt::proto::_PrevirtType_default_instance_._instance.get_mutable()->int__ = const_cast< ::previrt::proto::PrevirtType_Int*>(
      ::previrt::proto::PrevirtType_Int::internal_default_instance());
  ::previrt::proto::_PrevirtType_default_instance_._instance.get_mutable()->vec_ = const_cast< ::previrt::proto::PrevirtType_Vec*>(
      ::previrt::proto::PrevirtType_Vec::internal_default_instance());
  ::previrt::proto::_PrevirtType_default_instance_._instance.get_mutable()->str_ = const_cast< ::previrt::proto::PrevirtType_Str*>(
      ::previrt::proto::PrevirtType_Str::internal_default_instance());
  ::previrt::proto::_PrevirtType_default_instance_._instance.get_mutable()->float__ = const_cast< ::previrt::proto::PrevirtType_Float*>(
      ::previrt::proto::PrevirtType_Float::internal_default_instance());
  ::previrt::proto::_PrevirtType_default_instance_._instance.get_mutable()->global_ = const_cast< ::previrt::proto::PrevirtType_Global*>(
      ::previrt::proto::PrevirtType_Global::internal_default_instance());
}
class PrevirtType::_Internal {
 public:
  using HasBits = decltype(std::declval<PrevirtType>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::previrt::proto::PrevirtType_Int& int_(const PrevirtType* msg);
  static void set_has_int_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::previrt::proto::PrevirtType_Vec& vec(const PrevirtType* msg);
  static void set_has_vec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::previrt::proto::PrevirtType_Str& str(const PrevirtType* msg);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::previrt::proto::PrevirtType_Float& float_(const PrevirtType* msg);
  static void set_has_float_(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::previrt::proto::PrevirtType_Global& global(const PrevirtType* msg);
  static void set_has_global(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::previrt::proto::PrevirtType_Int&
PrevirtType::_Internal::int_(const PrevirtType* msg) {
  return *msg->int__;
}
const ::previrt::proto::PrevirtType_Vec&
PrevirtType::_Internal::vec(const PrevirtType* msg) {
  return *msg->vec_;
}
const ::previrt::proto::PrevirtType_Str&
PrevirtType::_Internal::str(const PrevirtType* msg) {
  return *msg->str_;
}
const ::previrt::proto::PrevirtType_Float&
PrevirtType::_Internal::float_(const PrevirtType* msg) {
  return *msg->float__;
}
const ::previrt::proto::PrevirtType_Global&
PrevirtType::_Internal::global(const PrevirtType* msg) {
  return *msg->global_;
}
PrevirtType::PrevirtType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.PrevirtType)
}
PrevirtType::PrevirtType(const PrevirtType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_int_()) {
    int__ = new ::previrt::proto::PrevirtType_Int(*from.int__);
  } else {
    int__ = nullptr;
  }
  if (from._internal_has_vec()) {
    vec_ = new ::previrt::proto::PrevirtType_Vec(*from.vec_);
  } else {
    vec_ = nullptr;
  }
  if (from._internal_has_str()) {
    str_ = new ::previrt::proto::PrevirtType_Str(*from.str_);
  } else {
    str_ = nullptr;
  }
  if (from._internal_has_float_()) {
    float__ = new ::previrt::proto::PrevirtType_Float(*from.float__);
  } else {
    float__ = nullptr;
  }
  if (from._internal_has_global()) {
    global_ = new ::previrt::proto::PrevirtType_Global(*from.global_);
  } else {
    global_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.PrevirtType)
}

void PrevirtType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PrevirtType_Previrt_2eproto.base);
  ::memset(&int__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&int__)) + sizeof(type_));
}

PrevirtType::~PrevirtType() {
  // @@protoc_insertion_point(destructor:previrt.proto.PrevirtType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrevirtType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete int__;
  if (this != internal_default_instance()) delete vec_;
  if (this != internal_default_instance()) delete str_;
  if (this != internal_default_instance()) delete float__;
  if (this != internal_default_instance()) delete global_;
}

void PrevirtType::ArenaDtor(void* object) {
  PrevirtType* _this = reinterpret_cast< PrevirtType* >(object);
  (void)_this;
}
void PrevirtType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrevirtType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrevirtType& PrevirtType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrevirtType_Previrt_2eproto.base);
  return *internal_default_instance();
}


void PrevirtType::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.PrevirtType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(int__ != nullptr);
      int__->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vec_ != nullptr);
      vec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(str_ != nullptr);
      str_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(float__ != nullptr);
      float__->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(global_ != nullptr);
      global_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrevirtType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .previrt.proto.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::previrt::proto::Type_IsValid(val))) {
            _internal_set_type(static_cast<::previrt::proto::Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional group Int = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_int_(), ptr, 83);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Vec = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr = ctx->ParseGroup(_internal_mutable_vec(), ptr, 163);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Str = 30 { ... };
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 243)) {
          ptr = ctx->ParseGroup(_internal_mutable_str(), ptr, 243);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Float = 40 { ... };
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 67)) {
          ptr = ctx->ParseGroup(_internal_mutable_float_(), ptr, 323);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Global = 50 { ... };
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 147)) {
          ptr = ctx->ParseGroup(_internal_mutable_global(), ptr, 403);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrevirtType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.PrevirtType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .previrt.proto.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional group Int = 10 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        10, _Internal::int_(this), target, stream);
  }

  // optional group Vec = 20 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        20, _Internal::vec(this), target, stream);
  }

  // optional group Str = 30 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        30, _Internal::str(this), target, stream);
  }

  // optional group Float = 40 { ... };
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        40, _Internal::float_(this), target, stream);
  }

  // optional group Global = 50 { ... };
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        50, _Internal::global(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.PrevirtType)
  return target;
}

size_t PrevirtType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.PrevirtType)
  size_t total_size = 0;

  // required .previrt.proto.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional group Int = 10 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *int__);
    }

    // optional group Vec = 20 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *vec_);
    }

    // optional group Str = 30 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *str_);
    }

    // optional group Float = 40 { ... };
    if (cached_has_bits & 0x00000008u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *float__);
    }

    // optional group Global = 50 { ... };
    if (cached_has_bits & 0x00000010u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *global_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrevirtType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.PrevirtType)
  GOOGLE_DCHECK_NE(&from, this);
  const PrevirtType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrevirtType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.PrevirtType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.PrevirtType)
    MergeFrom(*source);
  }
}

void PrevirtType::MergeFrom(const PrevirtType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.PrevirtType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_int_()->::previrt::proto::PrevirtType_Int::MergeFrom(from._internal_int_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vec()->::previrt::proto::PrevirtType_Vec::MergeFrom(from._internal_vec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_str()->::previrt::proto::PrevirtType_Str::MergeFrom(from._internal_str());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_float_()->::previrt::proto::PrevirtType_Float::MergeFrom(from._internal_float_());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_global()->::previrt::proto::PrevirtType_Global::MergeFrom(from._internal_global());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrevirtType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.PrevirtType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrevirtType::CopyFrom(const PrevirtType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.PrevirtType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrevirtType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_int_()) {
    if (!int__->IsInitialized()) return false;
  }
  if (_internal_has_vec()) {
    if (!vec_->IsInitialized()) return false;
  }
  if (_internal_has_float_()) {
    if (!float__->IsInitialized()) return false;
  }
  if (_internal_has_global()) {
    if (!global_->IsInitialized()) return false;
  }
  return true;
}

void PrevirtType::InternalSwap(PrevirtType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrevirtType, type_)
      + sizeof(PrevirtType::type_)
      - PROTOBUF_FIELD_OFFSET(PrevirtType, int__)>(
          reinterpret_cast<char*>(&int__),
          reinterpret_cast<char*>(&other->int__));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrevirtType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallInfo::InitAsDefaultInstance() {
}
class CallInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CallInfo>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CallInfo::CallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.CallInfo)
}
CallInfo::CallInfo(const CallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.CallInfo)
}

void CallInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallInfo_Previrt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 1u;
}

CallInfo::~CallInfo() {
  // @@protoc_insertion_point(destructor:previrt.proto.CallInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CallInfo::ArenaDtor(void* object) {
  CallInfo* _this = reinterpret_cast< CallInfo* >(object);
  (void)_this;
}
void CallInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallInfo& CallInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallInfo_Previrt_2eproto.base);
  return *internal_default_instance();
}


void CallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.CallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    count_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .previrt.proto.PrevirtType args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.CallInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 count = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .previrt.proto.PrevirtType args = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_args(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.CallInfo)
  return target;
}

size_t CallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.CallInfo)
  size_t total_size = 0;

  // required bytes name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .previrt.proto.PrevirtType args = 3;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 count = 2 [default = 1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.CallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CallInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.CallInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.CallInfo)
    MergeFrom(*source);
  }
}

void CallInfo::MergeFrom(const CallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.CallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CallInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.CallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallInfo::CopyFrom(const CallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.CallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(args_)) return false;
  return true;
}

void CallInfo::InternalSwap(CallInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallRewrite::InitAsDefaultInstance() {
  ::previrt::proto::_CallRewrite_default_instance_._instance.get_mutable()->call_ = const_cast< ::previrt::proto::CallInfo*>(
      ::previrt::proto::CallInfo::internal_default_instance());
}
class CallRewrite::_Internal {
 public:
  using HasBits = decltype(std::declval<CallRewrite>()._has_bits_);
  static const ::previrt::proto::CallInfo& call(const CallRewrite* msg);
  static void set_has_call(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_function(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::previrt::proto::CallInfo&
CallRewrite::_Internal::call(const CallRewrite* msg) {
  return *msg->call_;
}
CallRewrite::CallRewrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.CallRewrite)
}
CallRewrite::CallRewrite(const CallRewrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_function()) {
    new_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_new_function(),
      GetArena());
  }
  if (from._internal_has_call()) {
    call_ = new ::previrt::proto::CallInfo(*from.call_);
  } else {
    call_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:previrt.proto.CallRewrite)
}

void CallRewrite::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallRewrite_Previrt_2eproto.base);
  new_function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  call_ = nullptr;
}

CallRewrite::~CallRewrite() {
  // @@protoc_insertion_point(destructor:previrt.proto.CallRewrite)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CallRewrite::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  new_function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete call_;
}

void CallRewrite::ArenaDtor(void* object) {
  CallRewrite* _this = reinterpret_cast< CallRewrite* >(object);
  (void)_this;
}
void CallRewrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CallRewrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallRewrite& CallRewrite::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallRewrite_Previrt_2eproto.base);
  return *internal_default_instance();
}


void CallRewrite::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.CallRewrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_function_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(call_ != nullptr);
      call_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallRewrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .previrt.proto.CallInfo call = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_call(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes new_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 args = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_args(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CallRewrite::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.CallRewrite)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .previrt.proto.CallInfo call = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::call(this), target, stream);
  }

  // required bytes new_function = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_new_function(), target);
  }

  // repeated int32 args = 3 [packed = true];
  {
    int byte_size = _args_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_args(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.CallRewrite)
  return target;
}

size_t CallRewrite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:previrt.proto.CallRewrite)
  size_t total_size = 0;

  if (_internal_has_new_function()) {
    // required bytes new_function = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_function());
  }

  if (_internal_has_call()) {
    // required .previrt.proto.CallInfo call = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);
  }

  return total_size;
}
size_t CallRewrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.CallRewrite)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes new_function = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_new_function());

    // required .previrt.proto.CallInfo call = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *call_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 args = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->args_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _args_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallRewrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.CallRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  const CallRewrite* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallRewrite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.CallRewrite)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.CallRewrite)
    MergeFrom(*source);
  }
}

void CallRewrite::MergeFrom(const CallRewrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.CallRewrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_new_function(from._internal_new_function());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_call()->::previrt::proto::CallInfo::MergeFrom(from._internal_call());
    }
  }
}

void CallRewrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.CallRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallRewrite::CopyFrom(const CallRewrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.CallRewrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallRewrite::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_call()) {
    if (!call_->IsInitialized()) return false;
  }
  return true;
}

void CallRewrite::InternalSwap(CallRewrite* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  new_function_.Swap(&other->new_function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(call_, other->call_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallRewrite::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentInterface::InitAsDefaultInstance() {
}
class ComponentInterface::_Internal {
 public:
};

ComponentInterface::ComponentInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calls_(arena),
  definitions_(arena),
  globals_(arena),
  references_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ComponentInterface)
}
ComponentInterface::ComponentInterface(const ComponentInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calls_(from.calls_),
      definitions_(from.definitions_),
      globals_(from.globals_),
      references_(from.references_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ComponentInterface)
}

void ComponentInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentInterface_Previrt_2eproto.base);
}

ComponentInterface::~ComponentInterface() {
  // @@protoc_insertion_point(destructor:previrt.proto.ComponentInterface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentInterface::ArenaDtor(void* object) {
  ComponentInterface* _this = reinterpret_cast< ComponentInterface* >(object);
  (void)_this;
}
void ComponentInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentInterface& ComponentInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentInterface_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ComponentInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ComponentInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calls_.Clear();
  definitions_.Clear();
  globals_.Clear();
  references_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .previrt.proto.CallInfo calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .previrt.proto.CallInfo definitions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_definitions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .previrt.proto.PrevirtType globals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_globals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes references = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_references();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ComponentInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .previrt.proto.CallInfo calls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_calls(i), target, stream);
  }

  // repeated .previrt.proto.CallInfo definitions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_definitions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_definitions(i), target, stream);
  }

  // repeated .previrt.proto.PrevirtType globals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_globals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_globals(i), target, stream);
  }

  // repeated bytes references = 4;
  for (int i = 0, n = this->_internal_references_size(); i < n; i++) {
    const auto& s = this->_internal_references(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ComponentInterface)
  return target;
}

size_t ComponentInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ComponentInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .previrt.proto.CallInfo calls = 1;
  total_size += 1UL * this->_internal_calls_size();
  for (const auto& msg : this->calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .previrt.proto.CallInfo definitions = 2;
  total_size += 1UL * this->_internal_definitions_size();
  for (const auto& msg : this->definitions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .previrt.proto.PrevirtType globals = 3;
  total_size += 1UL * this->_internal_globals_size();
  for (const auto& msg : this->globals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated bytes references = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(references_.size());
  for (int i = 0, n = references_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      references_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ComponentInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ComponentInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ComponentInterface)
    MergeFrom(*source);
  }
}

void ComponentInterface::MergeFrom(const ComponentInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ComponentInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calls_.MergeFrom(from.calls_);
  definitions_.MergeFrom(from.definitions_);
  globals_.MergeFrom(from.globals_);
  references_.MergeFrom(from.references_);
}

void ComponentInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ComponentInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInterface::CopyFrom(const ComponentInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ComponentInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInterface::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(calls_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(definitions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(globals_)) return false;
  return true;
}

void ComponentInterface::InternalSwap(ComponentInterface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  calls_.InternalSwap(&other->calls_);
  definitions_.InternalSwap(&other->definitions_);
  globals_.InternalSwap(&other->globals_);
  references_.InternalSwap(&other->references_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComponentInterfaceTransform::InitAsDefaultInstance() {
}
class ComponentInterfaceTransform::_Internal {
 public:
};

ComponentInterfaceTransform::ComponentInterfaceTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calls_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ComponentInterfaceTransform)
}
ComponentInterfaceTransform::ComponentInterfaceTransform(const ComponentInterfaceTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calls_(from.calls_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ComponentInterfaceTransform)
}

void ComponentInterfaceTransform::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComponentInterfaceTransform_Previrt_2eproto.base);
}

ComponentInterfaceTransform::~ComponentInterfaceTransform() {
  // @@protoc_insertion_point(destructor:previrt.proto.ComponentInterfaceTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ComponentInterfaceTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ComponentInterfaceTransform::ArenaDtor(void* object) {
  ComponentInterfaceTransform* _this = reinterpret_cast< ComponentInterfaceTransform* >(object);
  (void)_this;
}
void ComponentInterfaceTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComponentInterfaceTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComponentInterfaceTransform& ComponentInterfaceTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComponentInterfaceTransform_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ComponentInterfaceTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ComponentInterfaceTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calls_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentInterfaceTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .previrt.proto.CallRewrite calls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComponentInterfaceTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ComponentInterfaceTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .previrt.proto.CallRewrite calls = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calls_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_calls(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ComponentInterfaceTransform)
  return target;
}

size_t ComponentInterfaceTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ComponentInterfaceTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .previrt.proto.CallRewrite calls = 1;
  total_size += 1UL * this->_internal_calls_size();
  for (const auto& msg : this->calls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComponentInterfaceTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ComponentInterfaceTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const ComponentInterfaceTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComponentInterfaceTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ComponentInterfaceTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ComponentInterfaceTransform)
    MergeFrom(*source);
  }
}

void ComponentInterfaceTransform::MergeFrom(const ComponentInterfaceTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ComponentInterfaceTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calls_.MergeFrom(from.calls_);
}

void ComponentInterfaceTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ComponentInterfaceTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInterfaceTransform::CopyFrom(const ComponentInterfaceTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ComponentInterfaceTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInterfaceTransform::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(calls_)) return false;
  return true;
}

void ComponentInterfaceTransform::InternalSwap(ComponentInterfaceTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  calls_.InternalSwap(&other->calls_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentInterfaceTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionTree_Case::InitAsDefaultInstance() {
  ::previrt::proto::_ActionTree_Case_default_instance_._instance.get_mutable()->test_ = const_cast< ::previrt::proto::PrevirtType*>(
      ::previrt::proto::PrevirtType::internal_default_instance());
  ::previrt::proto::_ActionTree_Case_default_instance_._instance.get_mutable()->_then_ = const_cast< ::previrt::proto::ActionTree*>(
      ::previrt::proto::ActionTree::internal_default_instance());
  ::previrt::proto::_ActionTree_Case_default_instance_._instance.get_mutable()->_else_ = const_cast< ::previrt::proto::ActionTree*>(
      ::previrt::proto::ActionTree::internal_default_instance());
}
class ActionTree_Case::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionTree_Case>()._has_bits_);
  static void set_has_var(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::previrt::proto::PrevirtType& test(const ActionTree_Case* msg);
  static void set_has_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::previrt::proto::ActionTree& _then(const ActionTree_Case* msg);
  static void set_has__then(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::previrt::proto::ActionTree& _else(const ActionTree_Case* msg);
  static void set_has__else(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::previrt::proto::PrevirtType&
ActionTree_Case::_Internal::test(const ActionTree_Case* msg) {
  return *msg->test_;
}
const ::previrt::proto::ActionTree&
ActionTree_Case::_Internal::_then(const ActionTree_Case* msg) {
  return *msg->_then_;
}
const ::previrt::proto::ActionTree&
ActionTree_Case::_Internal::_else(const ActionTree_Case* msg) {
  return *msg->_else_;
}
ActionTree_Case::ActionTree_Case(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ActionTree.Case)
}
ActionTree_Case::ActionTree_Case(const ActionTree_Case& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::previrt::proto::PrevirtType(*from.test_);
  } else {
    test_ = nullptr;
  }
  if (from._internal_has__then()) {
    _then_ = new ::previrt::proto::ActionTree(*from._then_);
  } else {
    _then_ = nullptr;
  }
  if (from._internal_has__else()) {
    _else_ = new ::previrt::proto::ActionTree(*from._else_);
  } else {
    _else_ = nullptr;
  }
  var_ = from.var_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ActionTree.Case)
}

void ActionTree_Case::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionTree_Previrt_2eproto.base);
  ::memset(&test_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_) -
      reinterpret_cast<char*>(&test_)) + sizeof(var_));
}

ActionTree_Case::~ActionTree_Case() {
  // @@protoc_insertion_point(destructor:previrt.proto.ActionTree.Case)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionTree_Case::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
  if (this != internal_default_instance()) delete _then_;
  if (this != internal_default_instance()) delete _else_;
}

void ActionTree_Case::ArenaDtor(void* object) {
  ActionTree_Case* _this = reinterpret_cast< ActionTree_Case* >(object);
  (void)_this;
}
void ActionTree_Case::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionTree_Case::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionTree_Case& ActionTree_Case::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionTree_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ActionTree_Case::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ActionTree.Case)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(test_ != nullptr);
      test_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_then_ != nullptr);
      _then_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_else_ != nullptr);
      _else_->Clear();
    }
  }
  var_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionTree_Case::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 var = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_var(&has_bits);
          var_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .previrt.proto.PrevirtType test = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .previrt.proto.ActionTree _then = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable__then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .previrt.proto.ActionTree _else = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable__else(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionTree_Case::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ActionTree.Case)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 var = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_var(), target);
  }

  // required .previrt.proto.PrevirtType test = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::test(this), target, stream);
  }

  // required .previrt.proto.ActionTree _then = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::_then(this), target, stream);
  }

  // required .previrt.proto.ActionTree _else = 19;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::_else(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ActionTree.Case)
  return target;
}

size_t ActionTree_Case::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:previrt.proto.ActionTree.Case)
  size_t total_size = 0;

  if (_internal_has_test()) {
    // required .previrt.proto.PrevirtType test = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (_internal_has__then()) {
    // required .previrt.proto.ActionTree _then = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_then_);
  }

  if (_internal_has__else()) {
    // required .previrt.proto.ActionTree _else = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_else_);
  }

  if (_internal_has_var()) {
    // required int32 var = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var());
  }

  return total_size;
}
size_t ActionTree_Case::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ActionTree.Case)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .previrt.proto.PrevirtType test = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);

    // required .previrt.proto.ActionTree _then = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_then_);

    // required .previrt.proto.ActionTree _else = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_else_);

    // required int32 var = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionTree_Case::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ActionTree.Case)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionTree_Case* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionTree_Case>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ActionTree.Case)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ActionTree.Case)
    MergeFrom(*source);
  }
}

void ActionTree_Case::MergeFrom(const ActionTree_Case& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ActionTree.Case)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_test()->::previrt::proto::PrevirtType::MergeFrom(from._internal_test());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable__then()->::previrt::proto::ActionTree::MergeFrom(from._internal__then());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable__else()->::previrt::proto::ActionTree::MergeFrom(from._internal__else());
    }
    if (cached_has_bits & 0x00000008u) {
      var_ = from.var_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionTree_Case::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ActionTree.Case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTree_Case::CopyFrom(const ActionTree_Case& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ActionTree.Case)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTree_Case::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_test()) {
    if (!test_->IsInitialized()) return false;
  }
  if (_internal_has__then()) {
    if (!_then_->IsInitialized()) return false;
  }
  if (_internal_has__else()) {
    if (!_else_->IsInitialized()) return false;
  }
  return true;
}

void ActionTree_Case::InternalSwap(ActionTree_Case* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionTree_Case, var_)
      + sizeof(ActionTree_Case::var_)
      - PROTOBUF_FIELD_OFFSET(ActionTree_Case, test_)>(
          reinterpret_cast<char*>(&test_),
          reinterpret_cast<char*>(&other->test_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionTree_Case::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionTree_Forward::InitAsDefaultInstance() {
}
class ActionTree_Forward::_Internal {
 public:
};

ActionTree_Forward::ActionTree_Forward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ActionTree.Forward)
}
ActionTree_Forward::ActionTree_Forward(const ActionTree_Forward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ActionTree.Forward)
}

void ActionTree_Forward::SharedCtor() {
}

ActionTree_Forward::~ActionTree_Forward() {
  // @@protoc_insertion_point(destructor:previrt.proto.ActionTree.Forward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionTree_Forward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ActionTree_Forward::ArenaDtor(void* object) {
  ActionTree_Forward* _this = reinterpret_cast< ActionTree_Forward* >(object);
  (void)_this;
}
void ActionTree_Forward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionTree_Forward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionTree_Forward& ActionTree_Forward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionTree_Forward_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ActionTree_Forward::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ActionTree.Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionTree_Forward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionTree_Forward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ActionTree.Forward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ActionTree.Forward)
  return target;
}

size_t ActionTree_Forward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ActionTree.Forward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionTree_Forward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ActionTree.Forward)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionTree_Forward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionTree_Forward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ActionTree.Forward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ActionTree.Forward)
    MergeFrom(*source);
  }
}

void ActionTree_Forward::MergeFrom(const ActionTree_Forward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ActionTree.Forward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActionTree_Forward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ActionTree.Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTree_Forward::CopyFrom(const ActionTree_Forward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ActionTree.Forward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTree_Forward::IsInitialized() const {
  return true;
}

void ActionTree_Forward::InternalSwap(ActionTree_Forward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionTree_Forward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionTree_Event::InitAsDefaultInstance() {
  ::previrt::proto::_ActionTree_Event_default_instance_._instance.get_mutable()->then_ = const_cast< ::previrt::proto::ActionTree*>(
      ::previrt::proto::ActionTree::internal_default_instance());
}
class ActionTree_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionTree_Event>()._has_bits_);
  static void set_has_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_handler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::previrt::proto::ActionTree& then(const ActionTree_Event* msg);
  static void set_has_then(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::previrt::proto::ActionTree&
ActionTree_Event::_Internal::then(const ActionTree_Event* msg) {
  return *msg->then_;
}
ActionTree_Event::ActionTree_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ActionTree.Event)
}
ActionTree_Event::ActionTree_Event(const ActionTree_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_handler()) {
    handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handler(),
      GetArena());
  }
  if (from._internal_has_then()) {
    then_ = new ::previrt::proto::ActionTree(*from.then_);
  } else {
    then_ = nullptr;
  }
  exit_ = from.exit_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ActionTree.Event)
}

void ActionTree_Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionTree_Previrt_2eproto.base);
  handler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&then_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_) -
      reinterpret_cast<char*>(&then_)) + sizeof(exit_));
}

ActionTree_Event::~ActionTree_Event() {
  // @@protoc_insertion_point(destructor:previrt.proto.ActionTree.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionTree_Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  handler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete then_;
}

void ActionTree_Event::ArenaDtor(void* object) {
  ActionTree_Event* _this = reinterpret_cast< ActionTree_Event* >(object);
  (void)_this;
}
void ActionTree_Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionTree_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionTree_Event& ActionTree_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionTree_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ActionTree_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ActionTree.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      handler_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(then_ != nullptr);
      then_->Clear();
    }
  }
  exit_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionTree_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool exit = 31 [default = false];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_exit(&has_bits);
          exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes handler = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_handler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 args = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_args(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<264>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_args(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .previrt.proto.ActionTree then = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_then(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionTree_Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ActionTree.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool exit = 31 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_exit(), target);
  }

  // optional bytes handler = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        32, this->_internal_handler(), target);
  }

  // repeated int32 args = 33;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_args(i), target);
  }

  // optional .previrt.proto.ActionTree then = 39;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::then(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ActionTree.Event)
  return target;
}

size_t ActionTree_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ActionTree.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 args = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->args_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_args_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes handler = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_handler());
    }

    // optional .previrt.proto.ActionTree then = 39;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *then_);
    }

    // optional bool exit = 31 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionTree_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ActionTree.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionTree_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionTree_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ActionTree.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ActionTree.Event)
    MergeFrom(*source);
  }
}

void ActionTree_Event::MergeFrom(const ActionTree_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ActionTree.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_handler(from._internal_handler());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_then()->::previrt::proto::ActionTree::MergeFrom(from._internal_then());
    }
    if (cached_has_bits & 0x00000004u) {
      exit_ = from.exit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionTree_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ActionTree.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTree_Event::CopyFrom(const ActionTree_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ActionTree.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTree_Event::IsInitialized() const {
  if (_internal_has_then()) {
    if (!then_->IsInitialized()) return false;
  }
  return true;
}

void ActionTree_Event::InternalSwap(ActionTree_Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  args_.InternalSwap(&other->args_);
  handler_.Swap(&other->handler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionTree_Event, exit_)
      + sizeof(ActionTree_Event::exit_)
      - PROTOBUF_FIELD_OFFSET(ActionTree_Event, then_)>(
          reinterpret_cast<char*>(&then_),
          reinterpret_cast<char*>(&other->then_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionTree_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionTree::InitAsDefaultInstance() {
  ::previrt::proto::_ActionTree_default_instance_._instance.get_mutable()->case__ = const_cast< ::previrt::proto::ActionTree_Case*>(
      ::previrt::proto::ActionTree_Case::internal_default_instance());
  ::previrt::proto::_ActionTree_default_instance_._instance.get_mutable()->forward_ = const_cast< ::previrt::proto::ActionTree_Forward*>(
      ::previrt::proto::ActionTree_Forward::internal_default_instance());
  ::previrt::proto::_ActionTree_default_instance_._instance.get_mutable()->event_ = const_cast< ::previrt::proto::ActionTree_Event*>(
      ::previrt::proto::ActionTree_Event::internal_default_instance());
}
class ActionTree::_Internal {
 public:
  using HasBits = decltype(std::declval<ActionTree>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::previrt::proto::ActionTree_Case& case_(const ActionTree* msg);
  static void set_has_case_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::previrt::proto::ActionTree_Forward& forward(const ActionTree* msg);
  static void set_has_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::previrt::proto::ActionTree_Event& event(const ActionTree* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::previrt::proto::ActionTree_Case&
ActionTree::_Internal::case_(const ActionTree* msg) {
  return *msg->case__;
}
const ::previrt::proto::ActionTree_Forward&
ActionTree::_Internal::forward(const ActionTree* msg) {
  return *msg->forward_;
}
const ::previrt::proto::ActionTree_Event&
ActionTree::_Internal::event(const ActionTree* msg) {
  return *msg->event_;
}
ActionTree::ActionTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.ActionTree)
}
ActionTree::ActionTree(const ActionTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_case_()) {
    case__ = new ::previrt::proto::ActionTree_Case(*from.case__);
  } else {
    case__ = nullptr;
  }
  if (from._internal_has_forward()) {
    forward_ = new ::previrt::proto::ActionTree_Forward(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  if (from._internal_has_event()) {
    event_ = new ::previrt::proto::ActionTree_Event(*from.event_);
  } else {
    event_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:previrt.proto.ActionTree)
}

void ActionTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionTree_Previrt_2eproto.base);
  ::memset(&case__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&case__)) + sizeof(event_));
  type_ = 1;
}

ActionTree::~ActionTree() {
  // @@protoc_insertion_point(destructor:previrt.proto.ActionTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActionTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete case__;
  if (this != internal_default_instance()) delete forward_;
  if (this != internal_default_instance()) delete event_;
}

void ActionTree::ArenaDtor(void* object) {
  ActionTree* _this = reinterpret_cast< ActionTree* >(object);
  (void)_this;
}
void ActionTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionTree& ActionTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionTree_Previrt_2eproto.base);
  return *internal_default_instance();
}


void ActionTree::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.ActionTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(case__ != nullptr);
      case__->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(event_ != nullptr);
      event_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .previrt.proto.ActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::previrt::proto::ActionType_IsValid(val))) {
            _internal_set_type(static_cast<::previrt::proto::ActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional group Case = 10 { ... };
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 83)) {
          ptr = ctx->ParseGroup(_internal_mutable_case_(), ptr, 83);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Forward = 20 { ... };
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 163)) {
          ptr = ctx->ParseGroup(_internal_mutable_forward(), ptr, 163);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional group Event = 30 { ... };
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 243)) {
          ptr = ctx->ParseGroup(_internal_mutable_event(), ptr, 243);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.ActionTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .previrt.proto.ActionType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional group Case = 10 { ... };
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        10, _Internal::case_(this), target, stream);
  }

  // optional group Forward = 20 { ... };
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        20, _Internal::forward(this), target, stream);
  }

  // optional group Event = 30 { ... };
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        30, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.ActionTree)
  return target;
}

size_t ActionTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.ActionTree)
  size_t total_size = 0;

  // required .previrt.proto.ActionType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional group Case = 10 { ... };
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *case__);
    }

    // optional group Forward = 20 { ... };
    if (cached_has_bits & 0x00000002u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *forward_);
    }

    // optional group Event = 30 { ... };
    if (cached_has_bits & 0x00000004u) {
      total_size += 4 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
          *event_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.ActionTree)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.ActionTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.ActionTree)
    MergeFrom(*source);
  }
}

void ActionTree::MergeFrom(const ActionTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.ActionTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_case_()->::previrt::proto::ActionTree_Case::MergeFrom(from._internal_case_());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_forward()->::previrt::proto::ActionTree_Forward::MergeFrom(from._internal_forward());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_event()->::previrt::proto::ActionTree_Event::MergeFrom(from._internal_event());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.ActionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionTree::CopyFrom(const ActionTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.ActionTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionTree::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_case_()) {
    if (!case__->IsInitialized()) return false;
  }
  if (_internal_has_event()) {
    if (!event_->IsInitialized()) return false;
  }
  return true;
}

void ActionTree::InternalSwap(ActionTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionTree, event_)
      + sizeof(ActionTree::event_)
      - PROTOBUF_FIELD_OFFSET(ActionTree, case__)>(
          reinterpret_cast<char*>(&case__),
          reinterpret_cast<char*>(&other->case__));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnforceInterface_Functions::InitAsDefaultInstance() {
  ::previrt::proto::_EnforceInterface_Functions_default_instance_._instance.get_mutable()->actions_ = const_cast< ::previrt::proto::ActionTree*>(
      ::previrt::proto::ActionTree::internal_default_instance());
}
class EnforceInterface_Functions::_Internal {
 public:
  using HasBits = decltype(std::declval<EnforceInterface_Functions>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::previrt::proto::ActionTree& actions(const EnforceInterface_Functions* msg);
  static void set_has_actions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::previrt::proto::ActionTree&
EnforceInterface_Functions::_Internal::actions(const EnforceInterface_Functions* msg) {
  return *msg->actions_;
}
EnforceInterface_Functions::EnforceInterface_Functions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.EnforceInterface.Functions)
}
EnforceInterface_Functions::EnforceInterface_Functions(const EnforceInterface_Functions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_actions()) {
    actions_ = new ::previrt::proto::ActionTree(*from.actions_);
  } else {
    actions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:previrt.proto.EnforceInterface.Functions)
}

void EnforceInterface_Functions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnforceInterface_Functions_Previrt_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  actions_ = nullptr;
}

EnforceInterface_Functions::~EnforceInterface_Functions() {
  // @@protoc_insertion_point(destructor:previrt.proto.EnforceInterface.Functions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnforceInterface_Functions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actions_;
}

void EnforceInterface_Functions::ArenaDtor(void* object) {
  EnforceInterface_Functions* _this = reinterpret_cast< EnforceInterface_Functions* >(object);
  (void)_this;
}
void EnforceInterface_Functions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnforceInterface_Functions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnforceInterface_Functions& EnforceInterface_Functions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnforceInterface_Functions_Previrt_2eproto.base);
  return *internal_default_instance();
}


void EnforceInterface_Functions::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.EnforceInterface.Functions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(actions_ != nullptr);
      actions_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnforceInterface_Functions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .previrt.proto.ActionTree actions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnforceInterface_Functions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.EnforceInterface.Functions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .previrt.proto.ActionTree actions = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.EnforceInterface.Functions)
  return target;
}

size_t EnforceInterface_Functions::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:previrt.proto.EnforceInterface.Functions)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required bytes name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  if (_internal_has_actions()) {
    // required .previrt.proto.ActionTree actions = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);
  }

  return total_size;
}
size_t EnforceInterface_Functions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.EnforceInterface.Functions)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());

    // required .previrt.proto.ActionTree actions = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actions_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnforceInterface_Functions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.EnforceInterface.Functions)
  GOOGLE_DCHECK_NE(&from, this);
  const EnforceInterface_Functions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnforceInterface_Functions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.EnforceInterface.Functions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.EnforceInterface.Functions)
    MergeFrom(*source);
  }
}

void EnforceInterface_Functions::MergeFrom(const EnforceInterface_Functions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.EnforceInterface.Functions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_actions()->::previrt::proto::ActionTree::MergeFrom(from._internal_actions());
    }
  }
}

void EnforceInterface_Functions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.EnforceInterface.Functions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnforceInterface_Functions::CopyFrom(const EnforceInterface_Functions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.EnforceInterface.Functions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnforceInterface_Functions::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_actions()) {
    if (!actions_->IsInitialized()) return false;
  }
  return true;
}

void EnforceInterface_Functions::InternalSwap(EnforceInterface_Functions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(actions_, other->actions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnforceInterface_Functions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnforceInterface::InitAsDefaultInstance() {
}
class EnforceInterface::_Internal {
 public:
};

EnforceInterface::EnforceInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  functions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.EnforceInterface)
}
EnforceInterface::EnforceInterface(const EnforceInterface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      functions_(from.functions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:previrt.proto.EnforceInterface)
}

void EnforceInterface::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnforceInterface_Previrt_2eproto.base);
}

EnforceInterface::~EnforceInterface() {
  // @@protoc_insertion_point(destructor:previrt.proto.EnforceInterface)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EnforceInterface::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EnforceInterface::ArenaDtor(void* object) {
  EnforceInterface* _this = reinterpret_cast< EnforceInterface* >(object);
  (void)_this;
}
void EnforceInterface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnforceInterface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnforceInterface& EnforceInterface::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnforceInterface_Previrt_2eproto.base);
  return *internal_default_instance();
}


void EnforceInterface::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.EnforceInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  functions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnforceInterface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated group Functions = 1 { ... };
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 11)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseGroup(_internal_add_functions(), ptr, 11);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<11>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EnforceInterface::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.EnforceInterface)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated group Functions = 1 { ... };
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_functions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(1, this->_internal_functions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.EnforceInterface)
  return target;
}

size_t EnforceInterface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.EnforceInterface)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated group Functions = 1 { ... };
  total_size += 2UL * this->_internal_functions_size();
  for (const auto& msg : this->functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnforceInterface::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.EnforceInterface)
  GOOGLE_DCHECK_NE(&from, this);
  const EnforceInterface* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnforceInterface>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.EnforceInterface)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.EnforceInterface)
    MergeFrom(*source);
  }
}

void EnforceInterface::MergeFrom(const EnforceInterface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.EnforceInterface)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  functions_.MergeFrom(from.functions_);
}

void EnforceInterface::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.EnforceInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnforceInterface::CopyFrom(const EnforceInterface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.EnforceInterface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnforceInterface::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(functions_)) return false;
  return true;
}

void EnforceInterface::InternalSwap(EnforceInterface* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  functions_.InternalSwap(&other->functions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnforceInterface::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
class State::_Internal {
 public:
  using HasBits = decltype(std::declval<State>()._has_bits_);
  static void set_has_features(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caller(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_callee(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_module(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_args(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trace_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trace_(from.trace_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_features()) {
    features_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_features(),
      GetArena());
  }
  meta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_meta()) {
    meta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_meta(),
      GetArena());
  }
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caller()) {
    caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_caller(),
      GetArena());
  }
  callee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callee()) {
    callee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_callee(),
      GetArena());
  }
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_module()) {
    module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_module(),
      GetArena());
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_args()) {
    args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_args(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:previrt.proto.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_Previrt_2eproto.base);
  features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

State::~State() {
  // @@protoc_insertion_point(destructor:previrt.proto.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  meta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_Previrt_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      features_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      meta_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      caller_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      callee_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      module_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      args_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.features");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 trace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_trace(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_trace(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string meta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_meta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.meta");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string caller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_caller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.caller");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string callee = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_callee();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.callee");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string module = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_module();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.module");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.State.args");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string features = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_features().data(), static_cast<int>(this->_internal_features().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.features");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_features(), target);
  }

  // repeated uint32 trace = 2;
  for (int i = 0, n = this->_internal_trace_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trace(i), target);
  }

  // optional string meta = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_meta().data(), static_cast<int>(this->_internal_meta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.meta");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_meta(), target);
  }

  // optional string caller = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caller().data(), static_cast<int>(this->_internal_caller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.caller");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_caller(), target);
  }

  // optional string callee = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callee().data(), static_cast<int>(this->_internal_callee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.callee");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_callee(), target);
  }

  // optional string module = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_module().data(), static_cast<int>(this->_internal_module().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.module");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_module(), target);
  }

  // optional string args = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_args().data(), static_cast<int>(this->_internal_args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.State.args");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.State)
  size_t total_size = 0;

  // required string features = 1;
  if (_internal_has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_features());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 trace = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->trace_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_trace_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string meta = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_meta());
    }

    // optional string caller = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caller());
    }

    // optional string callee = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_callee());
    }

    // optional string module = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_module());
    }

    // optional string args = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_args());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_.MergeFrom(from.trace_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_features(from._internal_features());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_meta(from._internal_meta());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_caller(from._internal_caller());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_callee(from._internal_callee());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_module(from._internal_module());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_args(from._internal_args());
    }
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_.InternalSwap(&other->trace_);
  features_.Swap(&other->features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  meta_.Swap(&other->meta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  caller_.Swap(&other->caller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  callee_.Swap(&other->callee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  module_.Swap(&other->module_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prediction::InitAsDefaultInstance() {
}
class Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<Prediction>()._has_bits_);
  static void set_has_q_yes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_q_no(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pred(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_state_encoded(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

Prediction::Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:previrt.proto.Prediction)
}
Prediction::Prediction(const Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_state_encoded()) {
    state_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_encoded(),
      GetArena());
  }
  ::memcpy(&q_yes_, &from.q_yes_,
    static_cast<size_t>(reinterpret_cast<char*>(&pred_) -
    reinterpret_cast<char*>(&q_yes_)) + sizeof(pred_));
  // @@protoc_insertion_point(copy_constructor:previrt.proto.Prediction)
}

void Prediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prediction_Previrt_2eproto.base);
  state_encoded_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&q_yes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pred_) -
      reinterpret_cast<char*>(&q_yes_)) + sizeof(pred_));
}

Prediction::~Prediction() {
  // @@protoc_insertion_point(destructor:previrt.proto.Prediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  state_encoded_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prediction::ArenaDtor(void* object) {
  Prediction* _this = reinterpret_cast< Prediction* >(object);
  (void)_this;
}
void Prediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prediction& Prediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prediction_Previrt_2eproto.base);
  return *internal_default_instance();
}


void Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:previrt.proto.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    state_encoded_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&q_yes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pred_) -
        reinterpret_cast<char*>(&q_yes_)) + sizeof(pred_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float q_yes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_q_yes(&has_bits);
          q_yes_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float q_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_q_no(&has_bits);
          q_no_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool pred = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pred(&has_bits);
          pred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string state_encoded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_state_encoded();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "previrt.proto.Prediction.state_encoded");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:previrt.proto.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float q_yes = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_q_yes(), target);
  }

  // required float q_no = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_q_no(), target);
  }

  // required bool pred = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_pred(), target);
  }

  // optional string state_encoded = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state_encoded().data(), static_cast<int>(this->_internal_state_encoded().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "previrt.proto.Prediction.state_encoded");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_state_encoded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:previrt.proto.Prediction)
  return target;
}

size_t Prediction::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:previrt.proto.Prediction)
  size_t total_size = 0;

  if (_internal_has_q_yes()) {
    // required float q_yes = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_q_no()) {
    // required float q_no = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_pred()) {
    // required bool pred = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:previrt.proto.Prediction)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required float q_yes = 1;
    total_size += 1 + 4;

    // required float q_no = 2;
    total_size += 1 + 4;

    // required bool pred = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string state_encoded = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_encoded());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:previrt.proto.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:previrt.proto.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:previrt.proto.Prediction)
    MergeFrom(*source);
  }
}

void Prediction::MergeFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:previrt.proto.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_state_encoded(from._internal_state_encoded());
    }
    if (cached_has_bits & 0x00000002u) {
      q_yes_ = from.q_yes_;
    }
    if (cached_has_bits & 0x00000004u) {
      q_no_ = from.q_no_;
    }
    if (cached_has_bits & 0x00000008u) {
      pred_ = from.pred_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:previrt.proto.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prediction::CopyFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:previrt.proto.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prediction::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Prediction::InternalSwap(Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_encoded_.Swap(&other->state_encoded_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prediction, pred_)
      + sizeof(Prediction::pred_)
      - PROTOBUF_FIELD_OFFSET(Prediction, q_yes_)>(
          reinterpret_cast<char*>(&q_yes_),
          reinterpret_cast<char*>(&other->q_yes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace previrt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType_Int* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType_Int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType_Int >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType_Vec* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType_Vec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType_Vec >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType_Str* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType_Str >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType_Str >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType_Float* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType_Float >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType_Float >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType_Global* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType_Global >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType_Global >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::PrevirtType* Arena::CreateMaybeMessage< ::previrt::proto::PrevirtType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::PrevirtType >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::CallInfo* Arena::CreateMaybeMessage< ::previrt::proto::CallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::CallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::CallRewrite* Arena::CreateMaybeMessage< ::previrt::proto::CallRewrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::CallRewrite >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ComponentInterface* Arena::CreateMaybeMessage< ::previrt::proto::ComponentInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ComponentInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ComponentInterfaceTransform* Arena::CreateMaybeMessage< ::previrt::proto::ComponentInterfaceTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ComponentInterfaceTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ActionTree_Case* Arena::CreateMaybeMessage< ::previrt::proto::ActionTree_Case >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ActionTree_Case >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ActionTree_Forward* Arena::CreateMaybeMessage< ::previrt::proto::ActionTree_Forward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ActionTree_Forward >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ActionTree_Event* Arena::CreateMaybeMessage< ::previrt::proto::ActionTree_Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ActionTree_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::ActionTree* Arena::CreateMaybeMessage< ::previrt::proto::ActionTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::ActionTree >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::EnforceInterface_Functions* Arena::CreateMaybeMessage< ::previrt::proto::EnforceInterface_Functions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::EnforceInterface_Functions >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::EnforceInterface* Arena::CreateMaybeMessage< ::previrt::proto::EnforceInterface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::EnforceInterface >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::State* Arena::CreateMaybeMessage< ::previrt::proto::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::State >(arena);
}
template<> PROTOBUF_NOINLINE ::previrt::proto::Prediction* Arena::CreateMaybeMessage< ::previrt::proto::Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::previrt::proto::Prediction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
