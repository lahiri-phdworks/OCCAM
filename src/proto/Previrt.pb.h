// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Previrt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Previrt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Previrt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Previrt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Previrt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Previrt_2eproto;
namespace previrt {
namespace proto {
class ActionTree;
class ActionTreeDefaultTypeInternal;
extern ActionTreeDefaultTypeInternal _ActionTree_default_instance_;
class ActionTree_Case;
class ActionTree_CaseDefaultTypeInternal;
extern ActionTree_CaseDefaultTypeInternal _ActionTree_Case_default_instance_;
class ActionTree_Event;
class ActionTree_EventDefaultTypeInternal;
extern ActionTree_EventDefaultTypeInternal _ActionTree_Event_default_instance_;
class ActionTree_Forward;
class ActionTree_ForwardDefaultTypeInternal;
extern ActionTree_ForwardDefaultTypeInternal _ActionTree_Forward_default_instance_;
class CallInfo;
class CallInfoDefaultTypeInternal;
extern CallInfoDefaultTypeInternal _CallInfo_default_instance_;
class CallRewrite;
class CallRewriteDefaultTypeInternal;
extern CallRewriteDefaultTypeInternal _CallRewrite_default_instance_;
class ComponentInterface;
class ComponentInterfaceDefaultTypeInternal;
extern ComponentInterfaceDefaultTypeInternal _ComponentInterface_default_instance_;
class ComponentInterfaceTransform;
class ComponentInterfaceTransformDefaultTypeInternal;
extern ComponentInterfaceTransformDefaultTypeInternal _ComponentInterfaceTransform_default_instance_;
class EnforceInterface;
class EnforceInterfaceDefaultTypeInternal;
extern EnforceInterfaceDefaultTypeInternal _EnforceInterface_default_instance_;
class EnforceInterface_Functions;
class EnforceInterface_FunctionsDefaultTypeInternal;
extern EnforceInterface_FunctionsDefaultTypeInternal _EnforceInterface_Functions_default_instance_;
class Prediction;
class PredictionDefaultTypeInternal;
extern PredictionDefaultTypeInternal _Prediction_default_instance_;
class PrevirtType;
class PrevirtTypeDefaultTypeInternal;
extern PrevirtTypeDefaultTypeInternal _PrevirtType_default_instance_;
class PrevirtType_Float;
class PrevirtType_FloatDefaultTypeInternal;
extern PrevirtType_FloatDefaultTypeInternal _PrevirtType_Float_default_instance_;
class PrevirtType_Global;
class PrevirtType_GlobalDefaultTypeInternal;
extern PrevirtType_GlobalDefaultTypeInternal _PrevirtType_Global_default_instance_;
class PrevirtType_Int;
class PrevirtType_IntDefaultTypeInternal;
extern PrevirtType_IntDefaultTypeInternal _PrevirtType_Int_default_instance_;
class PrevirtType_Str;
class PrevirtType_StrDefaultTypeInternal;
extern PrevirtType_StrDefaultTypeInternal _PrevirtType_Str_default_instance_;
class PrevirtType_Vec;
class PrevirtType_VecDefaultTypeInternal;
extern PrevirtType_VecDefaultTypeInternal _PrevirtType_Vec_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace proto
}  // namespace previrt
PROTOBUF_NAMESPACE_OPEN
template<> ::previrt::proto::ActionTree* Arena::CreateMaybeMessage<::previrt::proto::ActionTree>(Arena*);
template<> ::previrt::proto::ActionTree_Case* Arena::CreateMaybeMessage<::previrt::proto::ActionTree_Case>(Arena*);
template<> ::previrt::proto::ActionTree_Event* Arena::CreateMaybeMessage<::previrt::proto::ActionTree_Event>(Arena*);
template<> ::previrt::proto::ActionTree_Forward* Arena::CreateMaybeMessage<::previrt::proto::ActionTree_Forward>(Arena*);
template<> ::previrt::proto::CallInfo* Arena::CreateMaybeMessage<::previrt::proto::CallInfo>(Arena*);
template<> ::previrt::proto::CallRewrite* Arena::CreateMaybeMessage<::previrt::proto::CallRewrite>(Arena*);
template<> ::previrt::proto::ComponentInterface* Arena::CreateMaybeMessage<::previrt::proto::ComponentInterface>(Arena*);
template<> ::previrt::proto::ComponentInterfaceTransform* Arena::CreateMaybeMessage<::previrt::proto::ComponentInterfaceTransform>(Arena*);
template<> ::previrt::proto::EnforceInterface* Arena::CreateMaybeMessage<::previrt::proto::EnforceInterface>(Arena*);
template<> ::previrt::proto::EnforceInterface_Functions* Arena::CreateMaybeMessage<::previrt::proto::EnforceInterface_Functions>(Arena*);
template<> ::previrt::proto::Prediction* Arena::CreateMaybeMessage<::previrt::proto::Prediction>(Arena*);
template<> ::previrt::proto::PrevirtType* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType>(Arena*);
template<> ::previrt::proto::PrevirtType_Float* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType_Float>(Arena*);
template<> ::previrt::proto::PrevirtType_Global* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType_Global>(Arena*);
template<> ::previrt::proto::PrevirtType_Int* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType_Int>(Arena*);
template<> ::previrt::proto::PrevirtType_Str* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType_Str>(Arena*);
template<> ::previrt::proto::PrevirtType_Vec* Arena::CreateMaybeMessage<::previrt::proto::PrevirtType_Vec>(Arena*);
template<> ::previrt::proto::State* Arena::CreateMaybeMessage<::previrt::proto::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace previrt {
namespace proto {

enum Type : int {
  U = 0,
  I = 1,
  F = 2,
  S = 3,
  V = 4,
  N = 5,
  G = 6
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = U;
constexpr Type Type_MAX = G;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum FloatSemantics : int {
  IEEEhalf = 1,
  IEEEsingle = 2,
  IEEEdouble = 3,
  IEEEquad = 4,
  x87DoubleExtended = 5,
  Bogus = 6,
  PPCDoubleDouble = 7
};
bool FloatSemantics_IsValid(int value);
constexpr FloatSemantics FloatSemantics_MIN = IEEEhalf;
constexpr FloatSemantics FloatSemantics_MAX = PPCDoubleDouble;
constexpr int FloatSemantics_ARRAYSIZE = FloatSemantics_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FloatSemantics_descriptor();
template<typename T>
inline const std::string& FloatSemantics_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FloatSemantics>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FloatSemantics_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FloatSemantics_descriptor(), enum_t_value);
}
inline bool FloatSemantics_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FloatSemantics* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FloatSemantics>(
    FloatSemantics_descriptor(), name, value);
}
enum ActionType : int {
  CASE = 1,
  FORWARD = 2,
  EVENT = 3,
  FAIL = 4
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = CASE;
constexpr ActionType ActionType_MAX = FAIL;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class PrevirtType_Int PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Int) */ {
 public:
  inline PrevirtType_Int() : PrevirtType_Int(nullptr) {}
  virtual ~PrevirtType_Int();

  PrevirtType_Int(const PrevirtType_Int& from);
  PrevirtType_Int(PrevirtType_Int&& from) noexcept
    : PrevirtType_Int() {
    *this = ::std::move(from);
  }

  inline PrevirtType_Int& operator=(const PrevirtType_Int& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType_Int& operator=(PrevirtType_Int&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType_Int& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType_Int* internal_default_instance() {
    return reinterpret_cast<const PrevirtType_Int*>(
               &_PrevirtType_Int_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrevirtType_Int& a, PrevirtType_Int& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType_Int* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType_Int* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType_Int* New() const final {
    return CreateMaybeMessage<PrevirtType_Int>(nullptr);
  }

  PrevirtType_Int* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType_Int>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType_Int& from);
  void MergeFrom(const PrevirtType_Int& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType_Int* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType.Int";
  }
  protected:
  explicit PrevirtType_Int(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kBitsFieldNumber = 2,
  };
  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 bits = 2;
  bool has_bits() const;
  private:
  bool _internal_has_bits() const;
  public:
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint32 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Int)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bits_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class PrevirtType_Vec PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Vec) */ {
 public:
  inline PrevirtType_Vec() : PrevirtType_Vec(nullptr) {}
  virtual ~PrevirtType_Vec();

  PrevirtType_Vec(const PrevirtType_Vec& from);
  PrevirtType_Vec(PrevirtType_Vec&& from) noexcept
    : PrevirtType_Vec() {
    *this = ::std::move(from);
  }

  inline PrevirtType_Vec& operator=(const PrevirtType_Vec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType_Vec& operator=(PrevirtType_Vec&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType_Vec& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType_Vec* internal_default_instance() {
    return reinterpret_cast<const PrevirtType_Vec*>(
               &_PrevirtType_Vec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrevirtType_Vec& a, PrevirtType_Vec& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType_Vec* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType_Vec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType_Vec* New() const final {
    return CreateMaybeMessage<PrevirtType_Vec>(nullptr);
  }

  PrevirtType_Vec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType_Vec>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType_Vec& from);
  void MergeFrom(const PrevirtType_Vec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType_Vec* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType.Vec";
  }
  protected:
  explicit PrevirtType_Vec(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 21,
  };
  // repeated .previrt.proto.PrevirtType elems = 21;
  int elems_size() const;
  private:
  int _internal_elems_size() const;
  public:
  void clear_elems();
  ::previrt::proto::PrevirtType* mutable_elems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_elems();
  private:
  const ::previrt::proto::PrevirtType& _internal_elems(int index) const;
  ::previrt::proto::PrevirtType* _internal_add_elems();
  public:
  const ::previrt::proto::PrevirtType& elems(int index) const;
  ::previrt::proto::PrevirtType* add_elems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      elems() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Vec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType > elems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class PrevirtType_Str PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Str) */ {
 public:
  inline PrevirtType_Str() : PrevirtType_Str(nullptr) {}
  virtual ~PrevirtType_Str();

  PrevirtType_Str(const PrevirtType_Str& from);
  PrevirtType_Str(PrevirtType_Str&& from) noexcept
    : PrevirtType_Str() {
    *this = ::std::move(from);
  }

  inline PrevirtType_Str& operator=(const PrevirtType_Str& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType_Str& operator=(PrevirtType_Str&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType_Str& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType_Str* internal_default_instance() {
    return reinterpret_cast<const PrevirtType_Str*>(
               &_PrevirtType_Str_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrevirtType_Str& a, PrevirtType_Str& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType_Str* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType_Str* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType_Str* New() const final {
    return CreateMaybeMessage<PrevirtType_Str>(nullptr);
  }

  PrevirtType_Str* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType_Str>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType_Str& from);
  void MergeFrom(const PrevirtType_Str& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType_Str* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType.Str";
  }
  protected:
  explicit PrevirtType_Str(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 31,
    kCstrFieldNumber = 32,
  };
  // optional bytes data = 31;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional bool cstr = 32 [default = true];
  bool has_cstr() const;
  private:
  bool _internal_has_cstr() const;
  public:
  void clear_cstr();
  bool cstr() const;
  void set_cstr(bool value);
  private:
  bool _internal_cstr() const;
  void _internal_set_cstr(bool value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Str)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool cstr_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class PrevirtType_Float PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Float) */ {
 public:
  inline PrevirtType_Float() : PrevirtType_Float(nullptr) {}
  virtual ~PrevirtType_Float();

  PrevirtType_Float(const PrevirtType_Float& from);
  PrevirtType_Float(PrevirtType_Float&& from) noexcept
    : PrevirtType_Float() {
    *this = ::std::move(from);
  }

  inline PrevirtType_Float& operator=(const PrevirtType_Float& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType_Float& operator=(PrevirtType_Float&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType_Float& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType_Float* internal_default_instance() {
    return reinterpret_cast<const PrevirtType_Float*>(
               &_PrevirtType_Float_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrevirtType_Float& a, PrevirtType_Float& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType_Float* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType_Float* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType_Float* New() const final {
    return CreateMaybeMessage<PrevirtType_Float>(nullptr);
  }

  PrevirtType_Float* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType_Float>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType_Float& from);
  void MergeFrom(const PrevirtType_Float& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType_Float* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType.Float";
  }
  protected:
  explicit PrevirtType_Float(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 42,
    kSemFieldNumber = 41,
  };
  // optional string data = 42;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required .previrt.proto.FloatSemantics sem = 41;
  bool has_sem() const;
  private:
  bool _internal_has_sem() const;
  public:
  void clear_sem();
  ::previrt::proto::FloatSemantics sem() const;
  void set_sem(::previrt::proto::FloatSemantics value);
  private:
  ::previrt::proto::FloatSemantics _internal_sem() const;
  void _internal_set_sem(::previrt::proto::FloatSemantics value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Float)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int sem_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class PrevirtType_Global PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Global) */ {
 public:
  inline PrevirtType_Global() : PrevirtType_Global(nullptr) {}
  virtual ~PrevirtType_Global();

  PrevirtType_Global(const PrevirtType_Global& from);
  PrevirtType_Global(PrevirtType_Global&& from) noexcept
    : PrevirtType_Global() {
    *this = ::std::move(from);
  }

  inline PrevirtType_Global& operator=(const PrevirtType_Global& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType_Global& operator=(PrevirtType_Global&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType_Global& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType_Global* internal_default_instance() {
    return reinterpret_cast<const PrevirtType_Global*>(
               &_PrevirtType_Global_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrevirtType_Global& a, PrevirtType_Global& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType_Global* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType_Global* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType_Global* New() const final {
    return CreateMaybeMessage<PrevirtType_Global>(nullptr);
  }

  PrevirtType_Global* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType_Global>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType_Global& from);
  void MergeFrom(const PrevirtType_Global& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType_Global* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType.Global";
  }
  protected:
  explicit PrevirtType_Global(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 51,
    kIsConstFieldNumber = 52,
  };
  // required bytes name = 51;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bool is_const = 52 [default = false];
  bool has_is_const() const;
  private:
  bool _internal_has_is_const() const;
  public:
  void clear_is_const();
  bool is_const() const;
  void set_is_const(bool value);
  private:
  bool _internal_is_const() const;
  void _internal_set_is_const(bool value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Global)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_const_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class PrevirtType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType) */ {
 public:
  inline PrevirtType() : PrevirtType(nullptr) {}
  virtual ~PrevirtType();

  PrevirtType(const PrevirtType& from);
  PrevirtType(PrevirtType&& from) noexcept
    : PrevirtType() {
    *this = ::std::move(from);
  }

  inline PrevirtType& operator=(const PrevirtType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrevirtType& operator=(PrevirtType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrevirtType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrevirtType* internal_default_instance() {
    return reinterpret_cast<const PrevirtType*>(
               &_PrevirtType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PrevirtType& a, PrevirtType& b) {
    a.Swap(&b);
  }
  inline void Swap(PrevirtType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrevirtType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrevirtType* New() const final {
    return CreateMaybeMessage<PrevirtType>(nullptr);
  }

  PrevirtType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrevirtType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrevirtType& from);
  void MergeFrom(const PrevirtType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrevirtType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.PrevirtType";
  }
  protected:
  explicit PrevirtType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PrevirtType_Int Int;
  typedef PrevirtType_Vec Vec;
  typedef PrevirtType_Str Str;
  typedef PrevirtType_Float Float;
  typedef PrevirtType_Global Global;

  // accessors -------------------------------------------------------

  enum : int {
    kIntFieldNumber = 10,
    kVecFieldNumber = 20,
    kStrFieldNumber = 30,
    kFloatFieldNumber = 40,
    kGlobalFieldNumber = 50,
    kTypeFieldNumber = 1,
  };
  // optional group Int = 10 { ... };
  bool has_int_() const;
  private:
  bool _internal_has_int_() const;
  public:
  void clear_int_();
  const ::previrt::proto::PrevirtType_Int& int_() const;
  ::previrt::proto::PrevirtType_Int* release_int_();
  ::previrt::proto::PrevirtType_Int* mutable_int_();
  void set_allocated_int_(::previrt::proto::PrevirtType_Int* int_);
  private:
  const ::previrt::proto::PrevirtType_Int& _internal_int_() const;
  ::previrt::proto::PrevirtType_Int* _internal_mutable_int_();
  public:
  void unsafe_arena_set_allocated_int_(
      ::previrt::proto::PrevirtType_Int* int_);
  ::previrt::proto::PrevirtType_Int* unsafe_arena_release_int_();

  // optional group Vec = 20 { ... };
  bool has_vec() const;
  private:
  bool _internal_has_vec() const;
  public:
  void clear_vec();
  const ::previrt::proto::PrevirtType_Vec& vec() const;
  ::previrt::proto::PrevirtType_Vec* release_vec();
  ::previrt::proto::PrevirtType_Vec* mutable_vec();
  void set_allocated_vec(::previrt::proto::PrevirtType_Vec* vec);
  private:
  const ::previrt::proto::PrevirtType_Vec& _internal_vec() const;
  ::previrt::proto::PrevirtType_Vec* _internal_mutable_vec();
  public:
  void unsafe_arena_set_allocated_vec(
      ::previrt::proto::PrevirtType_Vec* vec);
  ::previrt::proto::PrevirtType_Vec* unsafe_arena_release_vec();

  // optional group Str = 30 { ... };
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const ::previrt::proto::PrevirtType_Str& str() const;
  ::previrt::proto::PrevirtType_Str* release_str();
  ::previrt::proto::PrevirtType_Str* mutable_str();
  void set_allocated_str(::previrt::proto::PrevirtType_Str* str);
  private:
  const ::previrt::proto::PrevirtType_Str& _internal_str() const;
  ::previrt::proto::PrevirtType_Str* _internal_mutable_str();
  public:
  void unsafe_arena_set_allocated_str(
      ::previrt::proto::PrevirtType_Str* str);
  ::previrt::proto::PrevirtType_Str* unsafe_arena_release_str();

  // optional group Float = 40 { ... };
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  const ::previrt::proto::PrevirtType_Float& float_() const;
  ::previrt::proto::PrevirtType_Float* release_float_();
  ::previrt::proto::PrevirtType_Float* mutable_float_();
  void set_allocated_float_(::previrt::proto::PrevirtType_Float* float_);
  private:
  const ::previrt::proto::PrevirtType_Float& _internal_float_() const;
  ::previrt::proto::PrevirtType_Float* _internal_mutable_float_();
  public:
  void unsafe_arena_set_allocated_float_(
      ::previrt::proto::PrevirtType_Float* float_);
  ::previrt::proto::PrevirtType_Float* unsafe_arena_release_float_();

  // optional group Global = 50 { ... };
  bool has_global() const;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  const ::previrt::proto::PrevirtType_Global& global() const;
  ::previrt::proto::PrevirtType_Global* release_global();
  ::previrt::proto::PrevirtType_Global* mutable_global();
  void set_allocated_global(::previrt::proto::PrevirtType_Global* global);
  private:
  const ::previrt::proto::PrevirtType_Global& _internal_global() const;
  ::previrt::proto::PrevirtType_Global* _internal_mutable_global();
  public:
  void unsafe_arena_set_allocated_global(
      ::previrt::proto::PrevirtType_Global* global);
  ::previrt::proto::PrevirtType_Global* unsafe_arena_release_global();

  // required .previrt.proto.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::previrt::proto::Type type() const;
  void set_type(::previrt::proto::Type value);
  private:
  ::previrt::proto::Type _internal_type() const;
  void _internal_set_type(::previrt::proto::Type value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::previrt::proto::PrevirtType_Int* int__;
  ::previrt::proto::PrevirtType_Vec* vec_;
  ::previrt::proto::PrevirtType_Str* str_;
  ::previrt::proto::PrevirtType_Float* float__;
  ::previrt::proto::PrevirtType_Global* global_;
  int type_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class CallInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.CallInfo) */ {
 public:
  inline CallInfo() : CallInfo(nullptr) {}
  virtual ~CallInfo();

  CallInfo(const CallInfo& from);
  CallInfo(CallInfo&& from) noexcept
    : CallInfo() {
    *this = ::std::move(from);
  }

  inline CallInfo& operator=(const CallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallInfo& operator=(CallInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallInfo* internal_default_instance() {
    return reinterpret_cast<const CallInfo*>(
               &_CallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CallInfo& a, CallInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CallInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallInfo* New() const final {
    return CreateMaybeMessage<CallInfo>(nullptr);
  }

  CallInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallInfo& from);
  void MergeFrom(const CallInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.CallInfo";
  }
  protected:
  explicit CallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .previrt.proto.PrevirtType args = 3;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::previrt::proto::PrevirtType* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_args();
  private:
  const ::previrt::proto::PrevirtType& _internal_args(int index) const;
  ::previrt::proto::PrevirtType* _internal_add_args();
  public:
  const ::previrt::proto::PrevirtType& args(int index) const;
  ::previrt::proto::PrevirtType* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      args() const;

  // required bytes name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 count = 2 [default = 1];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.CallInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class CallRewrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.CallRewrite) */ {
 public:
  inline CallRewrite() : CallRewrite(nullptr) {}
  virtual ~CallRewrite();

  CallRewrite(const CallRewrite& from);
  CallRewrite(CallRewrite&& from) noexcept
    : CallRewrite() {
    *this = ::std::move(from);
  }

  inline CallRewrite& operator=(const CallRewrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallRewrite& operator=(CallRewrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallRewrite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallRewrite* internal_default_instance() {
    return reinterpret_cast<const CallRewrite*>(
               &_CallRewrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CallRewrite& a, CallRewrite& b) {
    a.Swap(&b);
  }
  inline void Swap(CallRewrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallRewrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallRewrite* New() const final {
    return CreateMaybeMessage<CallRewrite>(nullptr);
  }

  CallRewrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallRewrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallRewrite& from);
  void MergeFrom(const CallRewrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRewrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.CallRewrite";
  }
  protected:
  explicit CallRewrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kNewFunctionFieldNumber = 2,
    kCallFieldNumber = 1,
  };
  // repeated int32 args = 3 [packed = true];
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_args(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_args() const;
  void _internal_add_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_args();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 args(int index) const;
  void set_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_args();

  // required bytes new_function = 2;
  bool has_new_function() const;
  private:
  bool _internal_has_new_function() const;
  public:
  void clear_new_function();
  const std::string& new_function() const;
  void set_new_function(const std::string& value);
  void set_new_function(std::string&& value);
  void set_new_function(const char* value);
  void set_new_function(const void* value, size_t size);
  std::string* mutable_new_function();
  std::string* release_new_function();
  void set_allocated_new_function(std::string* new_function);
  private:
  const std::string& _internal_new_function() const;
  void _internal_set_new_function(const std::string& value);
  std::string* _internal_mutable_new_function();
  public:

  // required .previrt.proto.CallInfo call = 1;
  bool has_call() const;
  private:
  bool _internal_has_call() const;
  public:
  void clear_call();
  const ::previrt::proto::CallInfo& call() const;
  ::previrt::proto::CallInfo* release_call();
  ::previrt::proto::CallInfo* mutable_call();
  void set_allocated_call(::previrt::proto::CallInfo* call);
  private:
  const ::previrt::proto::CallInfo& _internal_call() const;
  ::previrt::proto::CallInfo* _internal_mutable_call();
  public:
  void unsafe_arena_set_allocated_call(
      ::previrt::proto::CallInfo* call);
  ::previrt::proto::CallInfo* unsafe_arena_release_call();

  // @@protoc_insertion_point(class_scope:previrt.proto.CallRewrite)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > args_;
  mutable std::atomic<int> _args_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_function_;
  ::previrt::proto::CallInfo* call_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ComponentInterface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ComponentInterface) */ {
 public:
  inline ComponentInterface() : ComponentInterface(nullptr) {}
  virtual ~ComponentInterface();

  ComponentInterface(const ComponentInterface& from);
  ComponentInterface(ComponentInterface&& from) noexcept
    : ComponentInterface() {
    *this = ::std::move(from);
  }

  inline ComponentInterface& operator=(const ComponentInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInterface& operator=(ComponentInterface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentInterface* internal_default_instance() {
    return reinterpret_cast<const ComponentInterface*>(
               &_ComponentInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ComponentInterface& a, ComponentInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInterface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentInterface* New() const final {
    return CreateMaybeMessage<ComponentInterface>(nullptr);
  }

  ComponentInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentInterface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentInterface& from);
  void MergeFrom(const ComponentInterface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInterface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ComponentInterface";
  }
  protected:
  explicit ComponentInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsFieldNumber = 1,
    kDefinitionsFieldNumber = 2,
    kGlobalsFieldNumber = 3,
    kReferencesFieldNumber = 4,
  };
  // repeated .previrt.proto.CallInfo calls = 1;
  int calls_size() const;
  private:
  int _internal_calls_size() const;
  public:
  void clear_calls();
  ::previrt::proto::CallInfo* mutable_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >*
      mutable_calls();
  private:
  const ::previrt::proto::CallInfo& _internal_calls(int index) const;
  ::previrt::proto::CallInfo* _internal_add_calls();
  public:
  const ::previrt::proto::CallInfo& calls(int index) const;
  ::previrt::proto::CallInfo* add_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >&
      calls() const;

  // repeated .previrt.proto.CallInfo definitions = 2;
  int definitions_size() const;
  private:
  int _internal_definitions_size() const;
  public:
  void clear_definitions();
  ::previrt::proto::CallInfo* mutable_definitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >*
      mutable_definitions();
  private:
  const ::previrt::proto::CallInfo& _internal_definitions(int index) const;
  ::previrt::proto::CallInfo* _internal_add_definitions();
  public:
  const ::previrt::proto::CallInfo& definitions(int index) const;
  ::previrt::proto::CallInfo* add_definitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >&
      definitions() const;

  // repeated .previrt.proto.PrevirtType globals = 3;
  int globals_size() const;
  private:
  int _internal_globals_size() const;
  public:
  void clear_globals();
  ::previrt::proto::PrevirtType* mutable_globals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_globals();
  private:
  const ::previrt::proto::PrevirtType& _internal_globals(int index) const;
  ::previrt::proto::PrevirtType* _internal_add_globals();
  public:
  const ::previrt::proto::PrevirtType& globals(int index) const;
  ::previrt::proto::PrevirtType* add_globals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      globals() const;

  // repeated bytes references = 4;
  int references_size() const;
  private:
  int _internal_references_size() const;
  public:
  void clear_references();
  const std::string& references(int index) const;
  std::string* mutable_references(int index);
  void set_references(int index, const std::string& value);
  void set_references(int index, std::string&& value);
  void set_references(int index, const char* value);
  void set_references(int index, const void* value, size_t size);
  std::string* add_references();
  void add_references(const std::string& value);
  void add_references(std::string&& value);
  void add_references(const char* value);
  void add_references(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& references() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_references();
  private:
  const std::string& _internal_references(int index) const;
  std::string* _internal_add_references();
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.ComponentInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo > calls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo > definitions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType > globals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> references_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ComponentInterfaceTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ComponentInterfaceTransform) */ {
 public:
  inline ComponentInterfaceTransform() : ComponentInterfaceTransform(nullptr) {}
  virtual ~ComponentInterfaceTransform();

  ComponentInterfaceTransform(const ComponentInterfaceTransform& from);
  ComponentInterfaceTransform(ComponentInterfaceTransform&& from) noexcept
    : ComponentInterfaceTransform() {
    *this = ::std::move(from);
  }

  inline ComponentInterfaceTransform& operator=(const ComponentInterfaceTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentInterfaceTransform& operator=(ComponentInterfaceTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComponentInterfaceTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComponentInterfaceTransform* internal_default_instance() {
    return reinterpret_cast<const ComponentInterfaceTransform*>(
               &_ComponentInterfaceTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ComponentInterfaceTransform& a, ComponentInterfaceTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentInterfaceTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentInterfaceTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComponentInterfaceTransform* New() const final {
    return CreateMaybeMessage<ComponentInterfaceTransform>(nullptr);
  }

  ComponentInterfaceTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComponentInterfaceTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComponentInterfaceTransform& from);
  void MergeFrom(const ComponentInterfaceTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentInterfaceTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ComponentInterfaceTransform";
  }
  protected:
  explicit ComponentInterfaceTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallsFieldNumber = 1,
  };
  // repeated .previrt.proto.CallRewrite calls = 1;
  int calls_size() const;
  private:
  int _internal_calls_size() const;
  public:
  void clear_calls();
  ::previrt::proto::CallRewrite* mutable_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallRewrite >*
      mutable_calls();
  private:
  const ::previrt::proto::CallRewrite& _internal_calls(int index) const;
  ::previrt::proto::CallRewrite* _internal_add_calls();
  public:
  const ::previrt::proto::CallRewrite& calls(int index) const;
  ::previrt::proto::CallRewrite* add_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallRewrite >&
      calls() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.ComponentInterfaceTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallRewrite > calls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ActionTree_Case PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Case) */ {
 public:
  inline ActionTree_Case() : ActionTree_Case(nullptr) {}
  virtual ~ActionTree_Case();

  ActionTree_Case(const ActionTree_Case& from);
  ActionTree_Case(ActionTree_Case&& from) noexcept
    : ActionTree_Case() {
    *this = ::std::move(from);
  }

  inline ActionTree_Case& operator=(const ActionTree_Case& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionTree_Case& operator=(ActionTree_Case&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionTree_Case& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionTree_Case* internal_default_instance() {
    return reinterpret_cast<const ActionTree_Case*>(
               &_ActionTree_Case_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ActionTree_Case& a, ActionTree_Case& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionTree_Case* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionTree_Case* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionTree_Case* New() const final {
    return CreateMaybeMessage<ActionTree_Case>(nullptr);
  }

  ActionTree_Case* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionTree_Case>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionTree_Case& from);
  void MergeFrom(const ActionTree_Case& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionTree_Case* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ActionTree.Case";
  }
  protected:
  explicit ActionTree_Case(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 12,
    kThenFieldNumber = 18,
    kElseFieldNumber = 19,
    kVarFieldNumber = 11,
  };
  // required .previrt.proto.PrevirtType test = 12;
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::previrt::proto::PrevirtType& test() const;
  ::previrt::proto::PrevirtType* release_test();
  ::previrt::proto::PrevirtType* mutable_test();
  void set_allocated_test(::previrt::proto::PrevirtType* test);
  private:
  const ::previrt::proto::PrevirtType& _internal_test() const;
  ::previrt::proto::PrevirtType* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::previrt::proto::PrevirtType* test);
  ::previrt::proto::PrevirtType* unsafe_arena_release_test();

  // required .previrt.proto.ActionTree _then = 18;
  bool has__then() const;
  private:
  bool _internal_has__then() const;
  public:
  void clear__then();
  const ::previrt::proto::ActionTree& _then() const;
  ::previrt::proto::ActionTree* release__then();
  ::previrt::proto::ActionTree* mutable__then();
  void set_allocated__then(::previrt::proto::ActionTree* _then);
  private:
  const ::previrt::proto::ActionTree& _internal__then() const;
  ::previrt::proto::ActionTree* _internal_mutable__then();
  public:
  void unsafe_arena_set_allocated__then(
      ::previrt::proto::ActionTree* _then);
  ::previrt::proto::ActionTree* unsafe_arena_release__then();

  // required .previrt.proto.ActionTree _else = 19;
  bool has__else() const;
  private:
  bool _internal_has__else() const;
  public:
  void clear__else();
  const ::previrt::proto::ActionTree& _else() const;
  ::previrt::proto::ActionTree* release__else();
  ::previrt::proto::ActionTree* mutable__else();
  void set_allocated__else(::previrt::proto::ActionTree* _else);
  private:
  const ::previrt::proto::ActionTree& _internal__else() const;
  ::previrt::proto::ActionTree* _internal_mutable__else();
  public:
  void unsafe_arena_set_allocated__else(
      ::previrt::proto::ActionTree* _else);
  ::previrt::proto::ActionTree* unsafe_arena_release__else();

  // required int32 var = 11;
  bool has_var() const;
  private:
  bool _internal_has_var() const;
  public:
  void clear_var();
  ::PROTOBUF_NAMESPACE_ID::int32 var() const;
  void set_var(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var() const;
  void _internal_set_var(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Case)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::previrt::proto::PrevirtType* test_;
  ::previrt::proto::ActionTree* _then_;
  ::previrt::proto::ActionTree* _else_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ActionTree_Forward PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Forward) */ {
 public:
  inline ActionTree_Forward() : ActionTree_Forward(nullptr) {}
  virtual ~ActionTree_Forward();

  ActionTree_Forward(const ActionTree_Forward& from);
  ActionTree_Forward(ActionTree_Forward&& from) noexcept
    : ActionTree_Forward() {
    *this = ::std::move(from);
  }

  inline ActionTree_Forward& operator=(const ActionTree_Forward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionTree_Forward& operator=(ActionTree_Forward&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionTree_Forward& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionTree_Forward* internal_default_instance() {
    return reinterpret_cast<const ActionTree_Forward*>(
               &_ActionTree_Forward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ActionTree_Forward& a, ActionTree_Forward& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionTree_Forward* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionTree_Forward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionTree_Forward* New() const final {
    return CreateMaybeMessage<ActionTree_Forward>(nullptr);
  }

  ActionTree_Forward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionTree_Forward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionTree_Forward& from);
  void MergeFrom(const ActionTree_Forward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionTree_Forward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ActionTree.Forward";
  }
  protected:
  explicit ActionTree_Forward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Forward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ActionTree_Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Event) */ {
 public:
  inline ActionTree_Event() : ActionTree_Event(nullptr) {}
  virtual ~ActionTree_Event();

  ActionTree_Event(const ActionTree_Event& from);
  ActionTree_Event(ActionTree_Event&& from) noexcept
    : ActionTree_Event() {
    *this = ::std::move(from);
  }

  inline ActionTree_Event& operator=(const ActionTree_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionTree_Event& operator=(ActionTree_Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionTree_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionTree_Event* internal_default_instance() {
    return reinterpret_cast<const ActionTree_Event*>(
               &_ActionTree_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ActionTree_Event& a, ActionTree_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionTree_Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionTree_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionTree_Event* New() const final {
    return CreateMaybeMessage<ActionTree_Event>(nullptr);
  }

  ActionTree_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionTree_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionTree_Event& from);
  void MergeFrom(const ActionTree_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionTree_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ActionTree.Event";
  }
  protected:
  explicit ActionTree_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 33,
    kHandlerFieldNumber = 32,
    kThenFieldNumber = 39,
    kExitFieldNumber = 31,
  };
  // repeated int32 args = 33;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_args(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_args() const;
  void _internal_add_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_args();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 args(int index) const;
  void set_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_args(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_args();

  // optional bytes handler = 32;
  bool has_handler() const;
  private:
  bool _internal_has_handler() const;
  public:
  void clear_handler();
  const std::string& handler() const;
  void set_handler(const std::string& value);
  void set_handler(std::string&& value);
  void set_handler(const char* value);
  void set_handler(const void* value, size_t size);
  std::string* mutable_handler();
  std::string* release_handler();
  void set_allocated_handler(std::string* handler);
  private:
  const std::string& _internal_handler() const;
  void _internal_set_handler(const std::string& value);
  std::string* _internal_mutable_handler();
  public:

  // optional .previrt.proto.ActionTree then = 39;
  bool has_then() const;
  private:
  bool _internal_has_then() const;
  public:
  void clear_then();
  const ::previrt::proto::ActionTree& then() const;
  ::previrt::proto::ActionTree* release_then();
  ::previrt::proto::ActionTree* mutable_then();
  void set_allocated_then(::previrt::proto::ActionTree* then);
  private:
  const ::previrt::proto::ActionTree& _internal_then() const;
  ::previrt::proto::ActionTree* _internal_mutable_then();
  public:
  void unsafe_arena_set_allocated_then(
      ::previrt::proto::ActionTree* then);
  ::previrt::proto::ActionTree* unsafe_arena_release_then();

  // optional bool exit = 31 [default = false];
  bool has_exit() const;
  private:
  bool _internal_has_exit() const;
  public:
  void clear_exit();
  bool exit() const;
  void set_exit(bool value);
  private:
  bool _internal_exit() const;
  void _internal_set_exit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handler_;
  ::previrt::proto::ActionTree* then_;
  bool exit_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class ActionTree PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree) */ {
 public:
  inline ActionTree() : ActionTree(nullptr) {}
  virtual ~ActionTree();

  ActionTree(const ActionTree& from);
  ActionTree(ActionTree&& from) noexcept
    : ActionTree() {
    *this = ::std::move(from);
  }

  inline ActionTree& operator=(const ActionTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionTree& operator=(ActionTree&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionTree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionTree* internal_default_instance() {
    return reinterpret_cast<const ActionTree*>(
               &_ActionTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ActionTree& a, ActionTree& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionTree* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionTree* New() const final {
    return CreateMaybeMessage<ActionTree>(nullptr);
  }

  ActionTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionTree>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionTree& from);
  void MergeFrom(const ActionTree& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionTree* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.ActionTree";
  }
  protected:
  explicit ActionTree(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ActionTree_Case Case;
  typedef ActionTree_Forward Forward;
  typedef ActionTree_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kCaseFieldNumber = 10,
    kForwardFieldNumber = 20,
    kEventFieldNumber = 30,
    kTypeFieldNumber = 1,
  };
  // optional group Case = 10 { ... };
  bool has_case_() const;
  private:
  bool _internal_has_case_() const;
  public:
  void clear_case_();
  const ::previrt::proto::ActionTree_Case& case_() const;
  ::previrt::proto::ActionTree_Case* release_case_();
  ::previrt::proto::ActionTree_Case* mutable_case_();
  void set_allocated_case_(::previrt::proto::ActionTree_Case* case_);
  private:
  const ::previrt::proto::ActionTree_Case& _internal_case_() const;
  ::previrt::proto::ActionTree_Case* _internal_mutable_case_();
  public:
  void unsafe_arena_set_allocated_case_(
      ::previrt::proto::ActionTree_Case* case_);
  ::previrt::proto::ActionTree_Case* unsafe_arena_release_case_();

  // optional group Forward = 20 { ... };
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  const ::previrt::proto::ActionTree_Forward& forward() const;
  ::previrt::proto::ActionTree_Forward* release_forward();
  ::previrt::proto::ActionTree_Forward* mutable_forward();
  void set_allocated_forward(::previrt::proto::ActionTree_Forward* forward);
  private:
  const ::previrt::proto::ActionTree_Forward& _internal_forward() const;
  ::previrt::proto::ActionTree_Forward* _internal_mutable_forward();
  public:
  void unsafe_arena_set_allocated_forward(
      ::previrt::proto::ActionTree_Forward* forward);
  ::previrt::proto::ActionTree_Forward* unsafe_arena_release_forward();

  // optional group Event = 30 { ... };
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::previrt::proto::ActionTree_Event& event() const;
  ::previrt::proto::ActionTree_Event* release_event();
  ::previrt::proto::ActionTree_Event* mutable_event();
  void set_allocated_event(::previrt::proto::ActionTree_Event* event);
  private:
  const ::previrt::proto::ActionTree_Event& _internal_event() const;
  ::previrt::proto::ActionTree_Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::previrt::proto::ActionTree_Event* event);
  ::previrt::proto::ActionTree_Event* unsafe_arena_release_event();

  // required .previrt.proto.ActionType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::previrt::proto::ActionType type() const;
  void set_type(::previrt::proto::ActionType value);
  private:
  ::previrt::proto::ActionType _internal_type() const;
  void _internal_set_type(::previrt::proto::ActionType value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::previrt::proto::ActionTree_Case* case__;
  ::previrt::proto::ActionTree_Forward* forward_;
  ::previrt::proto::ActionTree_Event* event_;
  int type_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class EnforceInterface_Functions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.EnforceInterface.Functions) */ {
 public:
  inline EnforceInterface_Functions() : EnforceInterface_Functions(nullptr) {}
  virtual ~EnforceInterface_Functions();

  EnforceInterface_Functions(const EnforceInterface_Functions& from);
  EnforceInterface_Functions(EnforceInterface_Functions&& from) noexcept
    : EnforceInterface_Functions() {
    *this = ::std::move(from);
  }

  inline EnforceInterface_Functions& operator=(const EnforceInterface_Functions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnforceInterface_Functions& operator=(EnforceInterface_Functions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnforceInterface_Functions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnforceInterface_Functions* internal_default_instance() {
    return reinterpret_cast<const EnforceInterface_Functions*>(
               &_EnforceInterface_Functions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EnforceInterface_Functions& a, EnforceInterface_Functions& b) {
    a.Swap(&b);
  }
  inline void Swap(EnforceInterface_Functions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnforceInterface_Functions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnforceInterface_Functions* New() const final {
    return CreateMaybeMessage<EnforceInterface_Functions>(nullptr);
  }

  EnforceInterface_Functions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnforceInterface_Functions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnforceInterface_Functions& from);
  void MergeFrom(const EnforceInterface_Functions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnforceInterface_Functions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.EnforceInterface.Functions";
  }
  protected:
  explicit EnforceInterface_Functions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kActionsFieldNumber = 3,
  };
  // required bytes name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .previrt.proto.ActionTree actions = 3;
  bool has_actions() const;
  private:
  bool _internal_has_actions() const;
  public:
  void clear_actions();
  const ::previrt::proto::ActionTree& actions() const;
  ::previrt::proto::ActionTree* release_actions();
  ::previrt::proto::ActionTree* mutable_actions();
  void set_allocated_actions(::previrt::proto::ActionTree* actions);
  private:
  const ::previrt::proto::ActionTree& _internal_actions() const;
  ::previrt::proto::ActionTree* _internal_mutable_actions();
  public:
  void unsafe_arena_set_allocated_actions(
      ::previrt::proto::ActionTree* actions);
  ::previrt::proto::ActionTree* unsafe_arena_release_actions();

  // @@protoc_insertion_point(class_scope:previrt.proto.EnforceInterface.Functions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::previrt::proto::ActionTree* actions_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class EnforceInterface PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.EnforceInterface) */ {
 public:
  inline EnforceInterface() : EnforceInterface(nullptr) {}
  virtual ~EnforceInterface();

  EnforceInterface(const EnforceInterface& from);
  EnforceInterface(EnforceInterface&& from) noexcept
    : EnforceInterface() {
    *this = ::std::move(from);
  }

  inline EnforceInterface& operator=(const EnforceInterface& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnforceInterface& operator=(EnforceInterface&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnforceInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnforceInterface* internal_default_instance() {
    return reinterpret_cast<const EnforceInterface*>(
               &_EnforceInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EnforceInterface& a, EnforceInterface& b) {
    a.Swap(&b);
  }
  inline void Swap(EnforceInterface* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnforceInterface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnforceInterface* New() const final {
    return CreateMaybeMessage<EnforceInterface>(nullptr);
  }

  EnforceInterface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnforceInterface>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnforceInterface& from);
  void MergeFrom(const EnforceInterface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnforceInterface* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.EnforceInterface";
  }
  protected:
  explicit EnforceInterface(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnforceInterface_Functions Functions;

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsFieldNumber = 1,
  };
  // repeated group Functions = 1 { ... };
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  ::previrt::proto::EnforceInterface_Functions* mutable_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >*
      mutable_functions();
  private:
  const ::previrt::proto::EnforceInterface_Functions& _internal_functions(int index) const;
  ::previrt::proto::EnforceInterface_Functions* _internal_add_functions();
  public:
  const ::previrt::proto::EnforceInterface_Functions& functions(int index) const;
  ::previrt::proto::EnforceInterface_Functions* add_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >&
      functions() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.EnforceInterface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions > functions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class State PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.State) */ {
 public:
  inline State() : State(nullptr) {}
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 2,
    kFeaturesFieldNumber = 1,
    kMetaFieldNumber = 3,
    kCallerFieldNumber = 4,
    kCalleeFieldNumber = 5,
    kModuleFieldNumber = 6,
    kArgsFieldNumber = 7,
  };
  // repeated uint32 trace = 2;
  int trace_size() const;
  private:
  int _internal_trace_size() const;
  public:
  void clear_trace();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trace(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_trace() const;
  void _internal_add_trace(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_trace();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 trace(int index) const;
  void set_trace(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_trace(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_trace();

  // required string features = 1;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const std::string& features() const;
  void set_features(const std::string& value);
  void set_features(std::string&& value);
  void set_features(const char* value);
  void set_features(const char* value, size_t size);
  std::string* mutable_features();
  std::string* release_features();
  void set_allocated_features(std::string* features);
  private:
  const std::string& _internal_features() const;
  void _internal_set_features(const std::string& value);
  std::string* _internal_mutable_features();
  public:

  // optional string meta = 3;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const std::string& meta() const;
  void set_meta(const std::string& value);
  void set_meta(std::string&& value);
  void set_meta(const char* value);
  void set_meta(const char* value, size_t size);
  std::string* mutable_meta();
  std::string* release_meta();
  void set_allocated_meta(std::string* meta);
  private:
  const std::string& _internal_meta() const;
  void _internal_set_meta(const std::string& value);
  std::string* _internal_mutable_meta();
  public:

  // optional string caller = 4;
  bool has_caller() const;
  private:
  bool _internal_has_caller() const;
  public:
  void clear_caller();
  const std::string& caller() const;
  void set_caller(const std::string& value);
  void set_caller(std::string&& value);
  void set_caller(const char* value);
  void set_caller(const char* value, size_t size);
  std::string* mutable_caller();
  std::string* release_caller();
  void set_allocated_caller(std::string* caller);
  private:
  const std::string& _internal_caller() const;
  void _internal_set_caller(const std::string& value);
  std::string* _internal_mutable_caller();
  public:

  // optional string callee = 5;
  bool has_callee() const;
  private:
  bool _internal_has_callee() const;
  public:
  void clear_callee();
  const std::string& callee() const;
  void set_callee(const std::string& value);
  void set_callee(std::string&& value);
  void set_callee(const char* value);
  void set_callee(const char* value, size_t size);
  std::string* mutable_callee();
  std::string* release_callee();
  void set_allocated_callee(std::string* callee);
  private:
  const std::string& _internal_callee() const;
  void _internal_set_callee(const std::string& value);
  std::string* _internal_mutable_callee();
  public:

  // optional string module = 6;
  bool has_module() const;
  private:
  bool _internal_has_module() const;
  public:
  void clear_module();
  const std::string& module() const;
  void set_module(const std::string& value);
  void set_module(std::string&& value);
  void set_module(const char* value);
  void set_module(const char* value, size_t size);
  std::string* mutable_module();
  std::string* release_module();
  void set_allocated_module(std::string* module);
  private:
  const std::string& _internal_module() const;
  void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // optional string args = 7;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > trace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// -------------------------------------------------------------------

class Prediction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:previrt.proto.Prediction) */ {
 public:
  inline Prediction() : Prediction(nullptr) {}
  virtual ~Prediction();

  Prediction(const Prediction& from);
  Prediction(Prediction&& from) noexcept
    : Prediction() {
    *this = ::std::move(from);
  }

  inline Prediction& operator=(const Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prediction& operator=(Prediction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prediction* internal_default_instance() {
    return reinterpret_cast<const Prediction*>(
               &_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Prediction& a, Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(Prediction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prediction* New() const final {
    return CreateMaybeMessage<Prediction>(nullptr);
  }

  Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prediction& from);
  void MergeFrom(const Prediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "previrt.proto.Prediction";
  }
  protected:
  explicit Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Previrt_2eproto);
    return ::descriptor_table_Previrt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateEncodedFieldNumber = 4,
    kQYesFieldNumber = 1,
    kQNoFieldNumber = 2,
    kPredFieldNumber = 3,
  };
  // optional string state_encoded = 4;
  bool has_state_encoded() const;
  private:
  bool _internal_has_state_encoded() const;
  public:
  void clear_state_encoded();
  const std::string& state_encoded() const;
  void set_state_encoded(const std::string& value);
  void set_state_encoded(std::string&& value);
  void set_state_encoded(const char* value);
  void set_state_encoded(const char* value, size_t size);
  std::string* mutable_state_encoded();
  std::string* release_state_encoded();
  void set_allocated_state_encoded(std::string* state_encoded);
  private:
  const std::string& _internal_state_encoded() const;
  void _internal_set_state_encoded(const std::string& value);
  std::string* _internal_mutable_state_encoded();
  public:

  // required float q_yes = 1;
  bool has_q_yes() const;
  private:
  bool _internal_has_q_yes() const;
  public:
  void clear_q_yes();
  float q_yes() const;
  void set_q_yes(float value);
  private:
  float _internal_q_yes() const;
  void _internal_set_q_yes(float value);
  public:

  // required float q_no = 2;
  bool has_q_no() const;
  private:
  bool _internal_has_q_no() const;
  public:
  void clear_q_no();
  float q_no() const;
  void set_q_no(float value);
  private:
  float _internal_q_no() const;
  void _internal_set_q_no(float value);
  public:

  // required bool pred = 3;
  bool has_pred() const;
  private:
  bool _internal_has_pred() const;
  public:
  void clear_pred();
  bool pred() const;
  void set_pred(bool value);
  private:
  bool _internal_pred() const;
  void _internal_set_pred(bool value);
  public:

  // @@protoc_insertion_point(class_scope:previrt.proto.Prediction)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_encoded_;
  float q_yes_;
  float q_no_;
  bool pred_;
  friend struct ::TableStruct_Previrt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrevirtType_Int

// required uint32 bits = 2;
inline bool PrevirtType_Int::_internal_has_bits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevirtType_Int::has_bits() const {
  return _internal_has_bits();
}
inline void PrevirtType_Int::clear_bits() {
  bits_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrevirtType_Int::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PrevirtType_Int::bits() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Int.bits)
  return _internal_bits();
}
inline void PrevirtType_Int::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  bits_ = value;
}
inline void PrevirtType_Int::set_bits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Int.bits)
}

// optional string value = 3;
inline bool PrevirtType_Int::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrevirtType_Int::has_value() const {
  return _internal_has_value();
}
inline void PrevirtType_Int::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrevirtType_Int::value() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Int.value)
  return _internal_value();
}
inline void PrevirtType_Int::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Int.value)
}
inline std::string* PrevirtType_Int::mutable_value() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Int.value)
  return _internal_mutable_value();
}
inline const std::string& PrevirtType_Int::_internal_value() const {
  return value_.Get();
}
inline void PrevirtType_Int::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrevirtType_Int::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.PrevirtType.Int.value)
}
inline void PrevirtType_Int::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Int.value)
}
inline void PrevirtType_Int::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Int.value)
}
inline std::string* PrevirtType_Int::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrevirtType_Int::release_value() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Int.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrevirtType_Int::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Int.value)
}

// -------------------------------------------------------------------

// PrevirtType_Vec

// repeated .previrt.proto.PrevirtType elems = 21;
inline int PrevirtType_Vec::_internal_elems_size() const {
  return elems_.size();
}
inline int PrevirtType_Vec::elems_size() const {
  return _internal_elems_size();
}
inline void PrevirtType_Vec::clear_elems() {
  elems_.Clear();
}
inline ::previrt::proto::PrevirtType* PrevirtType_Vec::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Vec.elems)
  return elems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
PrevirtType_Vec::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.PrevirtType.Vec.elems)
  return &elems_;
}
inline const ::previrt::proto::PrevirtType& PrevirtType_Vec::_internal_elems(int index) const {
  return elems_.Get(index);
}
inline const ::previrt::proto::PrevirtType& PrevirtType_Vec::elems(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Vec.elems)
  return _internal_elems(index);
}
inline ::previrt::proto::PrevirtType* PrevirtType_Vec::_internal_add_elems() {
  return elems_.Add();
}
inline ::previrt::proto::PrevirtType* PrevirtType_Vec::add_elems() {
  // @@protoc_insertion_point(field_add:previrt.proto.PrevirtType.Vec.elems)
  return _internal_add_elems();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
PrevirtType_Vec::elems() const {
  // @@protoc_insertion_point(field_list:previrt.proto.PrevirtType.Vec.elems)
  return elems_;
}

// -------------------------------------------------------------------

// PrevirtType_Str

// optional bytes data = 31;
inline bool PrevirtType_Str::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrevirtType_Str::has_data() const {
  return _internal_has_data();
}
inline void PrevirtType_Str::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrevirtType_Str::data() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Str.data)
  return _internal_data();
}
inline void PrevirtType_Str::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Str.data)
}
inline std::string* PrevirtType_Str::mutable_data() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Str.data)
  return _internal_mutable_data();
}
inline const std::string& PrevirtType_Str::_internal_data() const {
  return data_.Get();
}
inline void PrevirtType_Str::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrevirtType_Str::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.PrevirtType.Str.data)
}
inline void PrevirtType_Str::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Str.data)
}
inline void PrevirtType_Str::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Str.data)
}
inline std::string* PrevirtType_Str::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrevirtType_Str::release_data() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Str.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrevirtType_Str::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Str.data)
}

// optional bool cstr = 32 [default = true];
inline bool PrevirtType_Str::_internal_has_cstr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevirtType_Str::has_cstr() const {
  return _internal_has_cstr();
}
inline void PrevirtType_Str::clear_cstr() {
  cstr_ = true;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PrevirtType_Str::_internal_cstr() const {
  return cstr_;
}
inline bool PrevirtType_Str::cstr() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Str.cstr)
  return _internal_cstr();
}
inline void PrevirtType_Str::_internal_set_cstr(bool value) {
  _has_bits_[0] |= 0x00000002u;
  cstr_ = value;
}
inline void PrevirtType_Str::set_cstr(bool value) {
  _internal_set_cstr(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Str.cstr)
}

// -------------------------------------------------------------------

// PrevirtType_Float

// required .previrt.proto.FloatSemantics sem = 41;
inline bool PrevirtType_Float::_internal_has_sem() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevirtType_Float::has_sem() const {
  return _internal_has_sem();
}
inline void PrevirtType_Float::clear_sem() {
  sem_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::previrt::proto::FloatSemantics PrevirtType_Float::_internal_sem() const {
  return static_cast< ::previrt::proto::FloatSemantics >(sem_);
}
inline ::previrt::proto::FloatSemantics PrevirtType_Float::sem() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Float.sem)
  return _internal_sem();
}
inline void PrevirtType_Float::_internal_set_sem(::previrt::proto::FloatSemantics value) {
  assert(::previrt::proto::FloatSemantics_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  sem_ = value;
}
inline void PrevirtType_Float::set_sem(::previrt::proto::FloatSemantics value) {
  _internal_set_sem(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Float.sem)
}

// optional string data = 42;
inline bool PrevirtType_Float::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrevirtType_Float::has_data() const {
  return _internal_has_data();
}
inline void PrevirtType_Float::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrevirtType_Float::data() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Float.data)
  return _internal_data();
}
inline void PrevirtType_Float::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Float.data)
}
inline std::string* PrevirtType_Float::mutable_data() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Float.data)
  return _internal_mutable_data();
}
inline const std::string& PrevirtType_Float::_internal_data() const {
  return data_.Get();
}
inline void PrevirtType_Float::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrevirtType_Float::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.PrevirtType.Float.data)
}
inline void PrevirtType_Float::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Float.data)
}
inline void PrevirtType_Float::set_data(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Float.data)
}
inline std::string* PrevirtType_Float::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrevirtType_Float::release_data() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Float.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrevirtType_Float::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Float.data)
}

// -------------------------------------------------------------------

// PrevirtType_Global

// required bytes name = 51;
inline bool PrevirtType_Global::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrevirtType_Global::has_name() const {
  return _internal_has_name();
}
inline void PrevirtType_Global::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrevirtType_Global::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Global.name)
  return _internal_name();
}
inline void PrevirtType_Global::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Global.name)
}
inline std::string* PrevirtType_Global::mutable_name() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Global.name)
  return _internal_mutable_name();
}
inline const std::string& PrevirtType_Global::_internal_name() const {
  return name_.Get();
}
inline void PrevirtType_Global::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrevirtType_Global::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.PrevirtType.Global.name)
}
inline void PrevirtType_Global::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Global.name)
}
inline void PrevirtType_Global::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Global.name)
}
inline std::string* PrevirtType_Global::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrevirtType_Global::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Global.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrevirtType_Global::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Global.name)
}

// optional bool is_const = 52 [default = false];
inline bool PrevirtType_Global::_internal_has_is_const() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrevirtType_Global::has_is_const() const {
  return _internal_has_is_const();
}
inline void PrevirtType_Global::clear_is_const() {
  is_const_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool PrevirtType_Global::_internal_is_const() const {
  return is_const_;
}
inline bool PrevirtType_Global::is_const() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Global.is_const)
  return _internal_is_const();
}
inline void PrevirtType_Global::_internal_set_is_const(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_const_ = value;
}
inline void PrevirtType_Global::set_is_const(bool value) {
  _internal_set_is_const(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Global.is_const)
}

// -------------------------------------------------------------------

// PrevirtType

// required .previrt.proto.Type type = 1;
inline bool PrevirtType::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PrevirtType::has_type() const {
  return _internal_has_type();
}
inline void PrevirtType::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::previrt::proto::Type PrevirtType::_internal_type() const {
  return static_cast< ::previrt::proto::Type >(type_);
}
inline ::previrt::proto::Type PrevirtType::type() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.type)
  return _internal_type();
}
inline void PrevirtType::_internal_set_type(::previrt::proto::Type value) {
  assert(::previrt::proto::Type_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void PrevirtType::set_type(::previrt::proto::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.type)
}

// optional group Int = 10 { ... };
inline bool PrevirtType::_internal_has_int_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || int__ != nullptr);
  return value;
}
inline bool PrevirtType::has_int_() const {
  return _internal_has_int_();
}
inline void PrevirtType::clear_int_() {
  if (int__ != nullptr) int__->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::previrt::proto::PrevirtType_Int& PrevirtType::_internal_int_() const {
  const ::previrt::proto::PrevirtType_Int* p = int__;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType_Int*>(
      &::previrt::proto::_PrevirtType_Int_default_instance_);
}
inline const ::previrt::proto::PrevirtType_Int& PrevirtType::int_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.int)
  return _internal_int_();
}
inline void PrevirtType::unsafe_arena_set_allocated_int_(
    ::previrt::proto::PrevirtType_Int* int_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(int__);
  }
  int__ = int_;
  if (int_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.PrevirtType.int)
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::release_int_() {
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::PrevirtType_Int* temp = int__;
  int__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::unsafe_arena_release_int_() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.int)
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::PrevirtType_Int* temp = int__;
  int__ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::_internal_mutable_int_() {
  _has_bits_[0] |= 0x00000001u;
  if (int__ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType_Int>(GetArena());
    int__ = p;
  }
  return int__;
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::mutable_int_() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.int)
  return _internal_mutable_int_();
}
inline void PrevirtType::set_allocated_int_(::previrt::proto::PrevirtType_Int* int_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete int__;
  }
  if (int_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(int_);
    if (message_arena != submessage_arena) {
      int_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  int__ = int_;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.int)
}

// optional group Vec = 20 { ... };
inline bool PrevirtType::_internal_has_vec() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vec_ != nullptr);
  return value;
}
inline bool PrevirtType::has_vec() const {
  return _internal_has_vec();
}
inline void PrevirtType::clear_vec() {
  if (vec_ != nullptr) vec_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::PrevirtType_Vec& PrevirtType::_internal_vec() const {
  const ::previrt::proto::PrevirtType_Vec* p = vec_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType_Vec*>(
      &::previrt::proto::_PrevirtType_Vec_default_instance_);
}
inline const ::previrt::proto::PrevirtType_Vec& PrevirtType::vec() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.vec)
  return _internal_vec();
}
inline void PrevirtType::unsafe_arena_set_allocated_vec(
    ::previrt::proto::PrevirtType_Vec* vec) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_);
  }
  vec_ = vec;
  if (vec) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.PrevirtType.vec)
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::release_vec() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::PrevirtType_Vec* temp = vec_;
  vec_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::unsafe_arena_release_vec() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.vec)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::PrevirtType_Vec* temp = vec_;
  vec_ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::_internal_mutable_vec() {
  _has_bits_[0] |= 0x00000002u;
  if (vec_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType_Vec>(GetArena());
    vec_ = p;
  }
  return vec_;
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::mutable_vec() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.vec)
  return _internal_mutable_vec();
}
inline void PrevirtType::set_allocated_vec(::previrt::proto::PrevirtType_Vec* vec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vec_;
  }
  if (vec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vec);
    if (message_arena != submessage_arena) {
      vec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vec_ = vec;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.vec)
}

// optional group Str = 30 { ... };
inline bool PrevirtType::_internal_has_str() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || str_ != nullptr);
  return value;
}
inline bool PrevirtType::has_str() const {
  return _internal_has_str();
}
inline void PrevirtType::clear_str() {
  if (str_ != nullptr) str_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::previrt::proto::PrevirtType_Str& PrevirtType::_internal_str() const {
  const ::previrt::proto::PrevirtType_Str* p = str_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType_Str*>(
      &::previrt::proto::_PrevirtType_Str_default_instance_);
}
inline const ::previrt::proto::PrevirtType_Str& PrevirtType::str() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.str)
  return _internal_str();
}
inline void PrevirtType::unsafe_arena_set_allocated_str(
    ::previrt::proto::PrevirtType_Str* str) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(str_);
  }
  str_ = str;
  if (str) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.PrevirtType.str)
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::release_str() {
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::PrevirtType_Str* temp = str_;
  str_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.str)
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::PrevirtType_Str* temp = str_;
  str_ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::_internal_mutable_str() {
  _has_bits_[0] |= 0x00000004u;
  if (str_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType_Str>(GetArena());
    str_ = p;
  }
  return str_;
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::mutable_str() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.str)
  return _internal_mutable_str();
}
inline void PrevirtType::set_allocated_str(::previrt::proto::PrevirtType_Str* str) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete str_;
  }
  if (str) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(str);
    if (message_arena != submessage_arena) {
      str = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, str, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  str_ = str;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.str)
}

// optional group Float = 40 { ... };
inline bool PrevirtType::_internal_has_float_() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || float__ != nullptr);
  return value;
}
inline bool PrevirtType::has_float_() const {
  return _internal_has_float_();
}
inline void PrevirtType::clear_float_() {
  if (float__ != nullptr) float__->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::previrt::proto::PrevirtType_Float& PrevirtType::_internal_float_() const {
  const ::previrt::proto::PrevirtType_Float* p = float__;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType_Float*>(
      &::previrt::proto::_PrevirtType_Float_default_instance_);
}
inline const ::previrt::proto::PrevirtType_Float& PrevirtType::float_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.float)
  return _internal_float_();
}
inline void PrevirtType::unsafe_arena_set_allocated_float_(
    ::previrt::proto::PrevirtType_Float* float_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(float__);
  }
  float__ = float_;
  if (float_) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.PrevirtType.float)
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::release_float_() {
  _has_bits_[0] &= ~0x00000008u;
  ::previrt::proto::PrevirtType_Float* temp = float__;
  float__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::unsafe_arena_release_float_() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.float)
  _has_bits_[0] &= ~0x00000008u;
  ::previrt::proto::PrevirtType_Float* temp = float__;
  float__ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::_internal_mutable_float_() {
  _has_bits_[0] |= 0x00000008u;
  if (float__ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType_Float>(GetArena());
    float__ = p;
  }
  return float__;
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::mutable_float_() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.float)
  return _internal_mutable_float_();
}
inline void PrevirtType::set_allocated_float_(::previrt::proto::PrevirtType_Float* float_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete float__;
  }
  if (float_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(float_);
    if (message_arena != submessage_arena) {
      float_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  float__ = float_;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.float)
}

// optional group Global = 50 { ... };
inline bool PrevirtType::_internal_has_global() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || global_ != nullptr);
  return value;
}
inline bool PrevirtType::has_global() const {
  return _internal_has_global();
}
inline void PrevirtType::clear_global() {
  if (global_ != nullptr) global_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::previrt::proto::PrevirtType_Global& PrevirtType::_internal_global() const {
  const ::previrt::proto::PrevirtType_Global* p = global_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType_Global*>(
      &::previrt::proto::_PrevirtType_Global_default_instance_);
}
inline const ::previrt::proto::PrevirtType_Global& PrevirtType::global() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.global)
  return _internal_global();
}
inline void PrevirtType::unsafe_arena_set_allocated_global(
    ::previrt::proto::PrevirtType_Global* global) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_);
  }
  global_ = global;
  if (global) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.PrevirtType.global)
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::release_global() {
  _has_bits_[0] &= ~0x00000010u;
  ::previrt::proto::PrevirtType_Global* temp = global_;
  global_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::unsafe_arena_release_global() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.global)
  _has_bits_[0] &= ~0x00000010u;
  ::previrt::proto::PrevirtType_Global* temp = global_;
  global_ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::_internal_mutable_global() {
  _has_bits_[0] |= 0x00000010u;
  if (global_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType_Global>(GetArena());
    global_ = p;
  }
  return global_;
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::mutable_global() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.global)
  return _internal_mutable_global();
}
inline void PrevirtType::set_allocated_global(::previrt::proto::PrevirtType_Global* global) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete global_;
  }
  if (global) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(global);
    if (message_arena != submessage_arena) {
      global = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  global_ = global;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.global)
}

// -------------------------------------------------------------------

// CallInfo

// required bytes name = 1;
inline bool CallInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallInfo::has_name() const {
  return _internal_has_name();
}
inline void CallInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallInfo::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.name)
  return _internal_name();
}
inline void CallInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallInfo.name)
}
inline std::string* CallInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CallInfo::_internal_name() const {
  return name_.Get();
}
inline void CallInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CallInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.CallInfo.name)
}
inline void CallInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.CallInfo.name)
}
inline void CallInfo::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.CallInfo.name)
}
inline std::string* CallInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CallInfo::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CallInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallInfo.name)
}

// optional uint32 count = 2 [default = 1];
inline bool CallInfo::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CallInfo::has_count() const {
  return _internal_has_count();
}
inline void CallInfo::clear_count() {
  count_ = 1u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CallInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CallInfo::count() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.count)
  return _internal_count();
}
inline void CallInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CallInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallInfo.count)
}

// repeated .previrt.proto.PrevirtType args = 3;
inline int CallInfo::_internal_args_size() const {
  return args_.size();
}
inline int CallInfo::args_size() const {
  return _internal_args_size();
}
inline void CallInfo::clear_args() {
  args_.Clear();
}
inline ::previrt::proto::PrevirtType* CallInfo::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallInfo.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
CallInfo::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.CallInfo.args)
  return &args_;
}
inline const ::previrt::proto::PrevirtType& CallInfo::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::previrt::proto::PrevirtType& CallInfo::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.args)
  return _internal_args(index);
}
inline ::previrt::proto::PrevirtType* CallInfo::_internal_add_args() {
  return args_.Add();
}
inline ::previrt::proto::PrevirtType* CallInfo::add_args() {
  // @@protoc_insertion_point(field_add:previrt.proto.CallInfo.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
CallInfo::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.CallInfo.args)
  return args_;
}

// -------------------------------------------------------------------

// CallRewrite

// required .previrt.proto.CallInfo call = 1;
inline bool CallRewrite::_internal_has_call() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || call_ != nullptr);
  return value;
}
inline bool CallRewrite::has_call() const {
  return _internal_has_call();
}
inline void CallRewrite::clear_call() {
  if (call_ != nullptr) call_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::CallInfo& CallRewrite::_internal_call() const {
  const ::previrt::proto::CallInfo* p = call_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::CallInfo*>(
      &::previrt::proto::_CallInfo_default_instance_);
}
inline const ::previrt::proto::CallInfo& CallRewrite::call() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.call)
  return _internal_call();
}
inline void CallRewrite::unsafe_arena_set_allocated_call(
    ::previrt::proto::CallInfo* call) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_);
  }
  call_ = call;
  if (call) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.CallRewrite.call)
}
inline ::previrt::proto::CallInfo* CallRewrite::release_call() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::CallInfo* temp = call_;
  call_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::CallInfo* CallRewrite::unsafe_arena_release_call() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallRewrite.call)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::CallInfo* temp = call_;
  call_ = nullptr;
  return temp;
}
inline ::previrt::proto::CallInfo* CallRewrite::_internal_mutable_call() {
  _has_bits_[0] |= 0x00000002u;
  if (call_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::CallInfo>(GetArena());
    call_ = p;
  }
  return call_;
}
inline ::previrt::proto::CallInfo* CallRewrite::mutable_call() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallRewrite.call)
  return _internal_mutable_call();
}
inline void CallRewrite::set_allocated_call(::previrt::proto::CallInfo* call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete call_;
  }
  if (call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(call);
    if (message_arena != submessage_arena) {
      call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  call_ = call;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallRewrite.call)
}

// required bytes new_function = 2;
inline bool CallRewrite::_internal_has_new_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CallRewrite::has_new_function() const {
  return _internal_has_new_function();
}
inline void CallRewrite::clear_new_function() {
  new_function_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallRewrite::new_function() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.new_function)
  return _internal_new_function();
}
inline void CallRewrite::set_new_function(const std::string& value) {
  _internal_set_new_function(value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallRewrite.new_function)
}
inline std::string* CallRewrite::mutable_new_function() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallRewrite.new_function)
  return _internal_mutable_new_function();
}
inline const std::string& CallRewrite::_internal_new_function() const {
  return new_function_.Get();
}
inline void CallRewrite::_internal_set_new_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  new_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CallRewrite::set_new_function(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  new_function_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.CallRewrite.new_function)
}
inline void CallRewrite::set_new_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  new_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.CallRewrite.new_function)
}
inline void CallRewrite::set_new_function(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  new_function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.CallRewrite.new_function)
}
inline std::string* CallRewrite::_internal_mutable_new_function() {
  _has_bits_[0] |= 0x00000001u;
  return new_function_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CallRewrite::release_new_function() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallRewrite.new_function)
  if (!_internal_has_new_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return new_function_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CallRewrite::set_allocated_new_function(std::string* new_function) {
  if (new_function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  new_function_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_function,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallRewrite.new_function)
}

// repeated int32 args = 3 [packed = true];
inline int CallRewrite::_internal_args_size() const {
  return args_.size();
}
inline int CallRewrite::args_size() const {
  return _internal_args_size();
}
inline void CallRewrite::clear_args() {
  args_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallRewrite::_internal_args(int index) const {
  return args_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallRewrite::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.args)
  return _internal_args(index);
}
inline void CallRewrite::set_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallRewrite.args)
}
inline void CallRewrite::_internal_add_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  args_.Add(value);
}
inline void CallRewrite::add_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_args(value);
  // @@protoc_insertion_point(field_add:previrt.proto.CallRewrite.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallRewrite::_internal_args() const {
  return args_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallRewrite::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.CallRewrite.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallRewrite::_internal_mutable_args() {
  return &args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallRewrite::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.CallRewrite.args)
  return _internal_mutable_args();
}

// -------------------------------------------------------------------

// ComponentInterface

// repeated .previrt.proto.CallInfo calls = 1;
inline int ComponentInterface::_internal_calls_size() const {
  return calls_.size();
}
inline int ComponentInterface::calls_size() const {
  return _internal_calls_size();
}
inline void ComponentInterface::clear_calls() {
  calls_.Clear();
}
inline ::previrt::proto::CallInfo* ComponentInterface::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.calls)
  return calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >*
ComponentInterface::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.calls)
  return &calls_;
}
inline const ::previrt::proto::CallInfo& ComponentInterface::_internal_calls(int index) const {
  return calls_.Get(index);
}
inline const ::previrt::proto::CallInfo& ComponentInterface::calls(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.calls)
  return _internal_calls(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::_internal_add_calls() {
  return calls_.Add();
}
inline ::previrt::proto::CallInfo* ComponentInterface::add_calls() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.calls)
  return _internal_add_calls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >&
ComponentInterface::calls() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.calls)
  return calls_;
}

// repeated .previrt.proto.CallInfo definitions = 2;
inline int ComponentInterface::_internal_definitions_size() const {
  return definitions_.size();
}
inline int ComponentInterface::definitions_size() const {
  return _internal_definitions_size();
}
inline void ComponentInterface::clear_definitions() {
  definitions_.Clear();
}
inline ::previrt::proto::CallInfo* ComponentInterface::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.definitions)
  return definitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >*
ComponentInterface::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.definitions)
  return &definitions_;
}
inline const ::previrt::proto::CallInfo& ComponentInterface::_internal_definitions(int index) const {
  return definitions_.Get(index);
}
inline const ::previrt::proto::CallInfo& ComponentInterface::definitions(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.definitions)
  return _internal_definitions(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::_internal_add_definitions() {
  return definitions_.Add();
}
inline ::previrt::proto::CallInfo* ComponentInterface::add_definitions() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.definitions)
  return _internal_add_definitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallInfo >&
ComponentInterface::definitions() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.definitions)
  return definitions_;
}

// repeated .previrt.proto.PrevirtType globals = 3;
inline int ComponentInterface::_internal_globals_size() const {
  return globals_.size();
}
inline int ComponentInterface::globals_size() const {
  return _internal_globals_size();
}
inline void ComponentInterface::clear_globals() {
  globals_.Clear();
}
inline ::previrt::proto::PrevirtType* ComponentInterface::mutable_globals(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.globals)
  return globals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >*
ComponentInterface::mutable_globals() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.globals)
  return &globals_;
}
inline const ::previrt::proto::PrevirtType& ComponentInterface::_internal_globals(int index) const {
  return globals_.Get(index);
}
inline const ::previrt::proto::PrevirtType& ComponentInterface::globals(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.globals)
  return _internal_globals(index);
}
inline ::previrt::proto::PrevirtType* ComponentInterface::_internal_add_globals() {
  return globals_.Add();
}
inline ::previrt::proto::PrevirtType* ComponentInterface::add_globals() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.globals)
  return _internal_add_globals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::PrevirtType >&
ComponentInterface::globals() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.globals)
  return globals_;
}

// repeated bytes references = 4;
inline int ComponentInterface::_internal_references_size() const {
  return references_.size();
}
inline int ComponentInterface::references_size() const {
  return _internal_references_size();
}
inline void ComponentInterface::clear_references() {
  references_.Clear();
}
inline std::string* ComponentInterface::add_references() {
  // @@protoc_insertion_point(field_add_mutable:previrt.proto.ComponentInterface.references)
  return _internal_add_references();
}
inline const std::string& ComponentInterface::_internal_references(int index) const {
  return references_.Get(index);
}
inline const std::string& ComponentInterface::references(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.references)
  return _internal_references(index);
}
inline std::string* ComponentInterface::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.references)
  return references_.Mutable(index);
}
inline void ComponentInterface::set_references(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:previrt.proto.ComponentInterface.references)
  references_.Mutable(index)->assign(value);
}
inline void ComponentInterface::set_references(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:previrt.proto.ComponentInterface.references)
  references_.Mutable(index)->assign(std::move(value));
}
inline void ComponentInterface::set_references(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::set_references(int index, const void* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.ComponentInterface.references)
}
inline std::string* ComponentInterface::_internal_add_references() {
  return references_.Add();
}
inline void ComponentInterface::add_references(const std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::add_references(std::string&& value) {
  references_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::add_references(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::add_references(const void* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:previrt.proto.ComponentInterface.references)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComponentInterface::references() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.references)
  return references_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComponentInterface::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.references)
  return &references_;
}

// -------------------------------------------------------------------

// ComponentInterfaceTransform

// repeated .previrt.proto.CallRewrite calls = 1;
inline int ComponentInterfaceTransform::_internal_calls_size() const {
  return calls_.size();
}
inline int ComponentInterfaceTransform::calls_size() const {
  return _internal_calls_size();
}
inline void ComponentInterfaceTransform::clear_calls() {
  calls_.Clear();
}
inline ::previrt::proto::CallRewrite* ComponentInterfaceTransform::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallRewrite >*
ComponentInterfaceTransform::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterfaceTransform.calls)
  return &calls_;
}
inline const ::previrt::proto::CallRewrite& ComponentInterfaceTransform::_internal_calls(int index) const {
  return calls_.Get(index);
}
inline const ::previrt::proto::CallRewrite& ComponentInterfaceTransform::calls(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterfaceTransform.calls)
  return _internal_calls(index);
}
inline ::previrt::proto::CallRewrite* ComponentInterfaceTransform::_internal_add_calls() {
  return calls_.Add();
}
inline ::previrt::proto::CallRewrite* ComponentInterfaceTransform::add_calls() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterfaceTransform.calls)
  return _internal_add_calls();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::CallRewrite >&
ComponentInterfaceTransform::calls() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_;
}

// -------------------------------------------------------------------

// ActionTree_Case

// required int32 var = 11;
inline bool ActionTree_Case::_internal_has_var() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ActionTree_Case::has_var() const {
  return _internal_has_var();
}
inline void ActionTree_Case::clear_var() {
  var_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionTree_Case::_internal_var() const {
  return var_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionTree_Case::var() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case.var)
  return _internal_var();
}
inline void ActionTree_Case::_internal_set_var(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_ = value;
}
inline void ActionTree_Case::set_var(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var(value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Case.var)
}

// required .previrt.proto.PrevirtType test = 12;
inline bool ActionTree_Case::_internal_has_test() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || test_ != nullptr);
  return value;
}
inline bool ActionTree_Case::has_test() const {
  return _internal_has_test();
}
inline void ActionTree_Case::clear_test() {
  if (test_ != nullptr) test_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::previrt::proto::PrevirtType& ActionTree_Case::_internal_test() const {
  const ::previrt::proto::PrevirtType* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::PrevirtType*>(
      &::previrt::proto::_PrevirtType_default_instance_);
}
inline const ::previrt::proto::PrevirtType& ActionTree_Case::test() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case.test)
  return _internal_test();
}
inline void ActionTree_Case::unsafe_arena_set_allocated_test(
    ::previrt::proto::PrevirtType* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.Case.test)
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::release_test() {
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::PrevirtType* temp = test_;
  test_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case.test)
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::PrevirtType* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::_internal_mutable_test() {
  _has_bits_[0] |= 0x00000001u;
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::PrevirtType>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::mutable_test() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case.test)
  return _internal_mutable_test();
}
inline void ActionTree_Case::set_allocated_test(::previrt::proto::PrevirtType* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case.test)
}

// required .previrt.proto.ActionTree _then = 18;
inline bool ActionTree_Case::_internal_has__then() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _then_ != nullptr);
  return value;
}
inline bool ActionTree_Case::has__then() const {
  return _internal_has__then();
}
inline void ActionTree_Case::clear__then() {
  if (_then_ != nullptr) _then_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_internal__then() const {
  const ::previrt::proto::ActionTree* p = _then_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree*>(
      &::previrt::proto::_ActionTree_default_instance_);
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_then() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case._then)
  return _internal__then();
}
inline void ActionTree_Case::unsafe_arena_set_allocated__then(
    ::previrt::proto::ActionTree* _then) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_then_);
  }
  _then_ = _then;
  if (_then) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.Case._then)
}
inline ::previrt::proto::ActionTree* ActionTree_Case::release__then() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = _then_;
  _then_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::unsafe_arena_release__then() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case._then)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = _then_;
  _then_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::_internal_mutable__then() {
  _has_bits_[0] |= 0x00000002u;
  if (_then_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree>(GetArena());
    _then_ = p;
  }
  return _then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::mutable__then() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case._then)
  return _internal_mutable__then();
}
inline void ActionTree_Case::set_allocated__then(::previrt::proto::ActionTree* _then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete _then_;
  }
  if (_then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(_then);
    if (message_arena != submessage_arena) {
      _then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _then, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  _then_ = _then;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case._then)
}

// required .previrt.proto.ActionTree _else = 19;
inline bool ActionTree_Case::_internal_has__else() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _else_ != nullptr);
  return value;
}
inline bool ActionTree_Case::has__else() const {
  return _internal_has__else();
}
inline void ActionTree_Case::clear__else() {
  if (_else_ != nullptr) _else_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_internal__else() const {
  const ::previrt::proto::ActionTree* p = _else_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree*>(
      &::previrt::proto::_ActionTree_default_instance_);
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_else() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case._else)
  return _internal__else();
}
inline void ActionTree_Case::unsafe_arena_set_allocated__else(
    ::previrt::proto::ActionTree* _else) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_else_);
  }
  _else_ = _else;
  if (_else) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.Case._else)
}
inline ::previrt::proto::ActionTree* ActionTree_Case::release__else() {
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::ActionTree* temp = _else_;
  _else_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::unsafe_arena_release__else() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case._else)
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::ActionTree* temp = _else_;
  _else_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::_internal_mutable__else() {
  _has_bits_[0] |= 0x00000004u;
  if (_else_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree>(GetArena());
    _else_ = p;
  }
  return _else_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::mutable__else() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case._else)
  return _internal_mutable__else();
}
inline void ActionTree_Case::set_allocated__else(::previrt::proto::ActionTree* _else) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete _else_;
  }
  if (_else) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(_else);
    if (message_arena != submessage_arena) {
      _else = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, _else, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  _else_ = _else;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case._else)
}

// -------------------------------------------------------------------

// ActionTree_Forward

// -------------------------------------------------------------------

// ActionTree_Event

// optional bool exit = 31 [default = false];
inline bool ActionTree_Event::_internal_has_exit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ActionTree_Event::has_exit() const {
  return _internal_has_exit();
}
inline void ActionTree_Event::clear_exit() {
  exit_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ActionTree_Event::_internal_exit() const {
  return exit_;
}
inline bool ActionTree_Event::exit() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.exit)
  return _internal_exit();
}
inline void ActionTree_Event::_internal_set_exit(bool value) {
  _has_bits_[0] |= 0x00000004u;
  exit_ = value;
}
inline void ActionTree_Event::set_exit(bool value) {
  _internal_set_exit(value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.exit)
}

// optional bytes handler = 32;
inline bool ActionTree_Event::_internal_has_handler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActionTree_Event::has_handler() const {
  return _internal_has_handler();
}
inline void ActionTree_Event::clear_handler() {
  handler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActionTree_Event::handler() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.handler)
  return _internal_handler();
}
inline void ActionTree_Event::set_handler(const std::string& value) {
  _internal_set_handler(value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.handler)
}
inline std::string* ActionTree_Event::mutable_handler() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Event.handler)
  return _internal_mutable_handler();
}
inline const std::string& ActionTree_Event::_internal_handler() const {
  return handler_.Get();
}
inline void ActionTree_Event::_internal_set_handler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActionTree_Event::set_handler(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  handler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.ActionTree.Event.handler)
}
inline void ActionTree_Event::set_handler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.ActionTree.Event.handler)
}
inline void ActionTree_Event::set_handler(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  handler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.ActionTree.Event.handler)
}
inline std::string* ActionTree_Event::_internal_mutable_handler() {
  _has_bits_[0] |= 0x00000001u;
  return handler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActionTree_Event::release_handler() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Event.handler)
  if (!_internal_has_handler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return handler_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActionTree_Event::set_allocated_handler(std::string* handler) {
  if (handler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  handler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Event.handler)
}

// repeated int32 args = 33;
inline int ActionTree_Event::_internal_args_size() const {
  return args_.size();
}
inline int ActionTree_Event::args_size() const {
  return _internal_args_size();
}
inline void ActionTree_Event::clear_args() {
  args_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionTree_Event::_internal_args(int index) const {
  return args_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionTree_Event::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.args)
  return _internal_args(index);
}
inline void ActionTree_Event::set_args(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.args)
}
inline void ActionTree_Event::_internal_add_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  args_.Add(value);
}
inline void ActionTree_Event::add_args(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_args(value);
  // @@protoc_insertion_point(field_add:previrt.proto.ActionTree.Event.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ActionTree_Event::_internal_args() const {
  return args_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ActionTree_Event::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ActionTree.Event.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ActionTree_Event::_internal_mutable_args() {
  return &args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ActionTree_Event::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ActionTree.Event.args)
  return _internal_mutable_args();
}

// optional .previrt.proto.ActionTree then = 39;
inline bool ActionTree_Event::_internal_has_then() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || then_ != nullptr);
  return value;
}
inline bool ActionTree_Event::has_then() const {
  return _internal_has_then();
}
inline void ActionTree_Event::clear_then() {
  if (then_ != nullptr) then_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::ActionTree& ActionTree_Event::_internal_then() const {
  const ::previrt::proto::ActionTree* p = then_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree*>(
      &::previrt::proto::_ActionTree_default_instance_);
}
inline const ::previrt::proto::ActionTree& ActionTree_Event::then() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.then)
  return _internal_then();
}
inline void ActionTree_Event::unsafe_arena_set_allocated_then(
    ::previrt::proto::ActionTree* then) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(then_);
  }
  then_ = then;
  if (then) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.Event.then)
}
inline ::previrt::proto::ActionTree* ActionTree_Event::release_then() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = then_;
  then_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Event::unsafe_arena_release_then() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Event.then)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = then_;
  then_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree* ActionTree_Event::_internal_mutable_then() {
  _has_bits_[0] |= 0x00000002u;
  if (then_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree>(GetArena());
    then_ = p;
  }
  return then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Event::mutable_then() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Event.then)
  return _internal_mutable_then();
}
inline void ActionTree_Event::set_allocated_then(::previrt::proto::ActionTree* then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete then_;
  }
  if (then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(then);
    if (message_arena != submessage_arena) {
      then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  then_ = then;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Event.then)
}

// -------------------------------------------------------------------

// ActionTree

// required .previrt.proto.ActionType type = 1;
inline bool ActionTree::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ActionTree::has_type() const {
  return _internal_has_type();
}
inline void ActionTree::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::previrt::proto::ActionType ActionTree::_internal_type() const {
  return static_cast< ::previrt::proto::ActionType >(type_);
}
inline ::previrt::proto::ActionType ActionTree::type() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.type)
  return _internal_type();
}
inline void ActionTree::_internal_set_type(::previrt::proto::ActionType value) {
  assert(::previrt::proto::ActionType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ActionTree::set_type(::previrt::proto::ActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.type)
}

// optional group Case = 10 { ... };
inline bool ActionTree::_internal_has_case_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || case__ != nullptr);
  return value;
}
inline bool ActionTree::has_case_() const {
  return _internal_has_case_();
}
inline void ActionTree::clear_case_() {
  if (case__ != nullptr) case__->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::previrt::proto::ActionTree_Case& ActionTree::_internal_case_() const {
  const ::previrt::proto::ActionTree_Case* p = case__;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree_Case*>(
      &::previrt::proto::_ActionTree_Case_default_instance_);
}
inline const ::previrt::proto::ActionTree_Case& ActionTree::case_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.case)
  return _internal_case_();
}
inline void ActionTree::unsafe_arena_set_allocated_case_(
    ::previrt::proto::ActionTree_Case* case_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(case__);
  }
  case__ = case_;
  if (case_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.case)
}
inline ::previrt::proto::ActionTree_Case* ActionTree::release_case_() {
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::ActionTree_Case* temp = case__;
  case__ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree_Case* ActionTree::unsafe_arena_release_case_() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.case)
  _has_bits_[0] &= ~0x00000001u;
  ::previrt::proto::ActionTree_Case* temp = case__;
  case__ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree_Case* ActionTree::_internal_mutable_case_() {
  _has_bits_[0] |= 0x00000001u;
  if (case__ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree_Case>(GetArena());
    case__ = p;
  }
  return case__;
}
inline ::previrt::proto::ActionTree_Case* ActionTree::mutable_case_() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.case)
  return _internal_mutable_case_();
}
inline void ActionTree::set_allocated_case_(::previrt::proto::ActionTree_Case* case_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete case__;
  }
  if (case_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(case_);
    if (message_arena != submessage_arena) {
      case_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, case_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  case__ = case_;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.case)
}

// optional group Forward = 20 { ... };
inline bool ActionTree::_internal_has_forward() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || forward_ != nullptr);
  return value;
}
inline bool ActionTree::has_forward() const {
  return _internal_has_forward();
}
inline void ActionTree::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::ActionTree_Forward& ActionTree::_internal_forward() const {
  const ::previrt::proto::ActionTree_Forward* p = forward_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree_Forward*>(
      &::previrt::proto::_ActionTree_Forward_default_instance_);
}
inline const ::previrt::proto::ActionTree_Forward& ActionTree::forward() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.forward)
  return _internal_forward();
}
inline void ActionTree::unsafe_arena_set_allocated_forward(
    ::previrt::proto::ActionTree_Forward* forward) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forward_);
  }
  forward_ = forward;
  if (forward) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.forward)
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::release_forward() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree_Forward* temp = forward_;
  forward_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::unsafe_arena_release_forward() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.forward)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree_Forward* temp = forward_;
  forward_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::_internal_mutable_forward() {
  _has_bits_[0] |= 0x00000002u;
  if (forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree_Forward>(GetArena());
    forward_ = p;
  }
  return forward_;
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::mutable_forward() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.forward)
  return _internal_mutable_forward();
}
inline void ActionTree::set_allocated_forward(::previrt::proto::ActionTree_Forward* forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete forward_;
  }
  if (forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(forward);
    if (message_arena != submessage_arena) {
      forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  forward_ = forward;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.forward)
}

// optional group Event = 30 { ... };
inline bool ActionTree::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || event_ != nullptr);
  return value;
}
inline bool ActionTree::has_event() const {
  return _internal_has_event();
}
inline void ActionTree::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::previrt::proto::ActionTree_Event& ActionTree::_internal_event() const {
  const ::previrt::proto::ActionTree_Event* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree_Event*>(
      &::previrt::proto::_ActionTree_Event_default_instance_);
}
inline const ::previrt::proto::ActionTree_Event& ActionTree::event() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.event)
  return _internal_event();
}
inline void ActionTree::unsafe_arena_set_allocated_event(
    ::previrt::proto::ActionTree_Event* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.ActionTree.event)
}
inline ::previrt::proto::ActionTree_Event* ActionTree::release_event() {
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::ActionTree_Event* temp = event_;
  event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree_Event* ActionTree::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.event)
  _has_bits_[0] &= ~0x00000004u;
  ::previrt::proto::ActionTree_Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree_Event* ActionTree::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000004u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree_Event>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::previrt::proto::ActionTree_Event* ActionTree::mutable_event() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.event)
  return _internal_mutable_event();
}
inline void ActionTree::set_allocated_event(::previrt::proto::ActionTree_Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.event)
}

// -------------------------------------------------------------------

// EnforceInterface_Functions

// required bytes name = 2;
inline bool EnforceInterface_Functions::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnforceInterface_Functions::has_name() const {
  return _internal_has_name();
}
inline void EnforceInterface_Functions::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnforceInterface_Functions::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.Functions.name)
  return _internal_name();
}
inline void EnforceInterface_Functions::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:previrt.proto.EnforceInterface.Functions.name)
}
inline std::string* EnforceInterface_Functions::mutable_name() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.Functions.name)
  return _internal_mutable_name();
}
inline const std::string& EnforceInterface_Functions::_internal_name() const {
  return name_.Get();
}
inline void EnforceInterface_Functions::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EnforceInterface_Functions::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.EnforceInterface.Functions.name)
}
inline void EnforceInterface_Functions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.EnforceInterface.Functions.name)
}
inline void EnforceInterface_Functions::set_name(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.EnforceInterface.Functions.name)
}
inline std::string* EnforceInterface_Functions::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EnforceInterface_Functions::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.EnforceInterface.Functions.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EnforceInterface_Functions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.EnforceInterface.Functions.name)
}

// required .previrt.proto.ActionTree actions = 3;
inline bool EnforceInterface_Functions::_internal_has_actions() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || actions_ != nullptr);
  return value;
}
inline bool EnforceInterface_Functions::has_actions() const {
  return _internal_has_actions();
}
inline void EnforceInterface_Functions::clear_actions() {
  if (actions_ != nullptr) actions_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::previrt::proto::ActionTree& EnforceInterface_Functions::_internal_actions() const {
  const ::previrt::proto::ActionTree* p = actions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::previrt::proto::ActionTree*>(
      &::previrt::proto::_ActionTree_default_instance_);
}
inline const ::previrt::proto::ActionTree& EnforceInterface_Functions::actions() const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.Functions.actions)
  return _internal_actions();
}
inline void EnforceInterface_Functions::unsafe_arena_set_allocated_actions(
    ::previrt::proto::ActionTree* actions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actions_);
  }
  actions_ = actions;
  if (actions) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:previrt.proto.EnforceInterface.Functions.actions)
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::release_actions() {
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = actions_;
  actions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::unsafe_arena_release_actions() {
  // @@protoc_insertion_point(field_release:previrt.proto.EnforceInterface.Functions.actions)
  _has_bits_[0] &= ~0x00000002u;
  ::previrt::proto::ActionTree* temp = actions_;
  actions_ = nullptr;
  return temp;
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::_internal_mutable_actions() {
  _has_bits_[0] |= 0x00000002u;
  if (actions_ == nullptr) {
    auto* p = CreateMaybeMessage<::previrt::proto::ActionTree>(GetArena());
    actions_ = p;
  }
  return actions_;
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::mutable_actions() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.Functions.actions)
  return _internal_mutable_actions();
}
inline void EnforceInterface_Functions::set_allocated_actions(::previrt::proto::ActionTree* actions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete actions_;
  }
  if (actions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(actions);
    if (message_arena != submessage_arena) {
      actions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  actions_ = actions;
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.EnforceInterface.Functions.actions)
}

// -------------------------------------------------------------------

// EnforceInterface

// repeated group Functions = 1 { ... };
inline int EnforceInterface::_internal_functions_size() const {
  return functions_.size();
}
inline int EnforceInterface::functions_size() const {
  return _internal_functions_size();
}
inline void EnforceInterface::clear_functions() {
  functions_.Clear();
}
inline ::previrt::proto::EnforceInterface_Functions* EnforceInterface::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.functions)
  return functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >*
EnforceInterface::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.EnforceInterface.functions)
  return &functions_;
}
inline const ::previrt::proto::EnforceInterface_Functions& EnforceInterface::_internal_functions(int index) const {
  return functions_.Get(index);
}
inline const ::previrt::proto::EnforceInterface_Functions& EnforceInterface::functions(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.functions)
  return _internal_functions(index);
}
inline ::previrt::proto::EnforceInterface_Functions* EnforceInterface::_internal_add_functions() {
  return functions_.Add();
}
inline ::previrt::proto::EnforceInterface_Functions* EnforceInterface::add_functions() {
  // @@protoc_insertion_point(field_add:previrt.proto.EnforceInterface.functions)
  return _internal_add_functions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >&
EnforceInterface::functions() const {
  // @@protoc_insertion_point(field_list:previrt.proto.EnforceInterface.functions)
  return functions_;
}

// -------------------------------------------------------------------

// State

// required string features = 1;
inline bool State::_internal_has_features() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool State::has_features() const {
  return _internal_has_features();
}
inline void State::clear_features() {
  features_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& State::features() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.features)
  return _internal_features();
}
inline void State::set_features(const std::string& value) {
  _internal_set_features(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.features)
}
inline std::string* State::mutable_features() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.features)
  return _internal_mutable_features();
}
inline const std::string& State::_internal_features() const {
  return features_.Get();
}
inline void State::_internal_set_features(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  features_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_features(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  features_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.features)
}
inline void State::set_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  features_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.features)
}
inline void State::set_features(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  features_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.features)
}
inline std::string* State::_internal_mutable_features() {
  _has_bits_[0] |= 0x00000001u;
  return features_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_features() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.features)
  if (!_internal_has_features()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return features_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_features(std::string* features) {
  if (features != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  features_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), features,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.features)
}

// repeated uint32 trace = 2;
inline int State::_internal_trace_size() const {
  return trace_.size();
}
inline int State::trace_size() const {
  return _internal_trace_size();
}
inline void State::clear_trace() {
  trace_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::_internal_trace(int index) const {
  return trace_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 State::trace(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.trace)
  return _internal_trace(index);
}
inline void State::set_trace(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  trace_.Set(index, value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.trace)
}
inline void State::_internal_add_trace(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  trace_.Add(value);
}
inline void State::add_trace(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_trace(value);
  // @@protoc_insertion_point(field_add:previrt.proto.State.trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
State::_internal_trace() const {
  return trace_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
State::trace() const {
  // @@protoc_insertion_point(field_list:previrt.proto.State.trace)
  return _internal_trace();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
State::_internal_mutable_trace() {
  return &trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
State::mutable_trace() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.State.trace)
  return _internal_mutable_trace();
}

// optional string meta = 3;
inline bool State::_internal_has_meta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool State::has_meta() const {
  return _internal_has_meta();
}
inline void State::clear_meta() {
  meta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& State::meta() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.meta)
  return _internal_meta();
}
inline void State::set_meta(const std::string& value) {
  _internal_set_meta(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.meta)
}
inline std::string* State::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.meta)
  return _internal_mutable_meta();
}
inline const std::string& State::_internal_meta() const {
  return meta_.Get();
}
inline void State::_internal_set_meta(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  meta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_meta(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  meta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.meta)
}
inline void State::set_meta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  meta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.meta)
}
inline void State::set_meta(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  meta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.meta)
}
inline std::string* State::_internal_mutable_meta() {
  _has_bits_[0] |= 0x00000002u;
  return meta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_meta() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.meta)
  if (!_internal_has_meta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return meta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_meta(std::string* meta) {
  if (meta != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  meta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.meta)
}

// optional string caller = 4;
inline bool State::_internal_has_caller() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool State::has_caller() const {
  return _internal_has_caller();
}
inline void State::clear_caller() {
  caller_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& State::caller() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.caller)
  return _internal_caller();
}
inline void State::set_caller(const std::string& value) {
  _internal_set_caller(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.caller)
}
inline std::string* State::mutable_caller() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.caller)
  return _internal_mutable_caller();
}
inline const std::string& State::_internal_caller() const {
  return caller_.Get();
}
inline void State::_internal_set_caller(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_caller(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  caller_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.caller)
}
inline void State::set_caller(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.caller)
}
inline void State::set_caller(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  caller_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.caller)
}
inline std::string* State::_internal_mutable_caller() {
  _has_bits_[0] |= 0x00000004u;
  return caller_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_caller() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.caller)
  if (!_internal_has_caller()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return caller_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_caller(std::string* caller) {
  if (caller != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  caller_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caller,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.caller)
}

// optional string callee = 5;
inline bool State::_internal_has_callee() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool State::has_callee() const {
  return _internal_has_callee();
}
inline void State::clear_callee() {
  callee_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& State::callee() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.callee)
  return _internal_callee();
}
inline void State::set_callee(const std::string& value) {
  _internal_set_callee(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.callee)
}
inline std::string* State::mutable_callee() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.callee)
  return _internal_mutable_callee();
}
inline const std::string& State::_internal_callee() const {
  return callee_.Get();
}
inline void State::_internal_set_callee(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  callee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_callee(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  callee_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.callee)
}
inline void State::set_callee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  callee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.callee)
}
inline void State::set_callee(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  callee_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.callee)
}
inline std::string* State::_internal_mutable_callee() {
  _has_bits_[0] |= 0x00000008u;
  return callee_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_callee() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.callee)
  if (!_internal_has_callee()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return callee_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_callee(std::string* callee) {
  if (callee != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  callee_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callee,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.callee)
}

// optional string module = 6;
inline bool State::_internal_has_module() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool State::has_module() const {
  return _internal_has_module();
}
inline void State::clear_module() {
  module_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& State::module() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.module)
  return _internal_module();
}
inline void State::set_module(const std::string& value) {
  _internal_set_module(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.module)
}
inline std::string* State::mutable_module() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.module)
  return _internal_mutable_module();
}
inline const std::string& State::_internal_module() const {
  return module_.Get();
}
inline void State::_internal_set_module(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_module(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  module_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.module)
}
inline void State::set_module(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.module)
}
inline void State::set_module(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.module)
}
inline std::string* State::_internal_mutable_module() {
  _has_bits_[0] |= 0x00000010u;
  return module_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_module() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.module)
  if (!_internal_has_module()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return module_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.module)
}

// optional string args = 7;
inline bool State::_internal_has_args() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool State::has_args() const {
  return _internal_has_args();
}
inline void State::clear_args() {
  args_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& State::args() const {
  // @@protoc_insertion_point(field_get:previrt.proto.State.args)
  return _internal_args();
}
inline void State::set_args(const std::string& value) {
  _internal_set_args(value);
  // @@protoc_insertion_point(field_set:previrt.proto.State.args)
}
inline std::string* State::mutable_args() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.State.args)
  return _internal_mutable_args();
}
inline const std::string& State::_internal_args() const {
  return args_.Get();
}
inline void State::_internal_set_args(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void State::set_args(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  args_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.State.args)
}
inline void State::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.State.args)
}
inline void State::set_args(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.State.args)
}
inline std::string* State::_internal_mutable_args() {
  _has_bits_[0] |= 0x00000020u;
  return args_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* State::release_args() {
  // @@protoc_insertion_point(field_release:previrt.proto.State.args)
  if (!_internal_has_args()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return args_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void State::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.State.args)
}

// -------------------------------------------------------------------

// Prediction

// required float q_yes = 1;
inline bool Prediction::_internal_has_q_yes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prediction::has_q_yes() const {
  return _internal_has_q_yes();
}
inline void Prediction::clear_q_yes() {
  q_yes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Prediction::_internal_q_yes() const {
  return q_yes_;
}
inline float Prediction::q_yes() const {
  // @@protoc_insertion_point(field_get:previrt.proto.Prediction.q_yes)
  return _internal_q_yes();
}
inline void Prediction::_internal_set_q_yes(float value) {
  _has_bits_[0] |= 0x00000002u;
  q_yes_ = value;
}
inline void Prediction::set_q_yes(float value) {
  _internal_set_q_yes(value);
  // @@protoc_insertion_point(field_set:previrt.proto.Prediction.q_yes)
}

// required float q_no = 2;
inline bool Prediction::_internal_has_q_no() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Prediction::has_q_no() const {
  return _internal_has_q_no();
}
inline void Prediction::clear_q_no() {
  q_no_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Prediction::_internal_q_no() const {
  return q_no_;
}
inline float Prediction::q_no() const {
  // @@protoc_insertion_point(field_get:previrt.proto.Prediction.q_no)
  return _internal_q_no();
}
inline void Prediction::_internal_set_q_no(float value) {
  _has_bits_[0] |= 0x00000004u;
  q_no_ = value;
}
inline void Prediction::set_q_no(float value) {
  _internal_set_q_no(value);
  // @@protoc_insertion_point(field_set:previrt.proto.Prediction.q_no)
}

// required bool pred = 3;
inline bool Prediction::_internal_has_pred() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Prediction::has_pred() const {
  return _internal_has_pred();
}
inline void Prediction::clear_pred() {
  pred_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Prediction::_internal_pred() const {
  return pred_;
}
inline bool Prediction::pred() const {
  // @@protoc_insertion_point(field_get:previrt.proto.Prediction.pred)
  return _internal_pred();
}
inline void Prediction::_internal_set_pred(bool value) {
  _has_bits_[0] |= 0x00000008u;
  pred_ = value;
}
inline void Prediction::set_pred(bool value) {
  _internal_set_pred(value);
  // @@protoc_insertion_point(field_set:previrt.proto.Prediction.pred)
}

// optional string state_encoded = 4;
inline bool Prediction::_internal_has_state_encoded() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prediction::has_state_encoded() const {
  return _internal_has_state_encoded();
}
inline void Prediction::clear_state_encoded() {
  state_encoded_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Prediction::state_encoded() const {
  // @@protoc_insertion_point(field_get:previrt.proto.Prediction.state_encoded)
  return _internal_state_encoded();
}
inline void Prediction::set_state_encoded(const std::string& value) {
  _internal_set_state_encoded(value);
  // @@protoc_insertion_point(field_set:previrt.proto.Prediction.state_encoded)
}
inline std::string* Prediction::mutable_state_encoded() {
  // @@protoc_insertion_point(field_mutable:previrt.proto.Prediction.state_encoded)
  return _internal_mutable_state_encoded();
}
inline const std::string& Prediction::_internal_state_encoded() const {
  return state_encoded_.Get();
}
inline void Prediction::_internal_set_state_encoded(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Prediction::set_state_encoded(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  state_encoded_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:previrt.proto.Prediction.state_encoded)
}
inline void Prediction::set_state_encoded(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  state_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:previrt.proto.Prediction.state_encoded)
}
inline void Prediction::set_state_encoded(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  state_encoded_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.Prediction.state_encoded)
}
inline std::string* Prediction::_internal_mutable_state_encoded() {
  _has_bits_[0] |= 0x00000001u;
  return state_encoded_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Prediction::release_state_encoded() {
  // @@protoc_insertion_point(field_release:previrt.proto.Prediction.state_encoded)
  if (!_internal_has_state_encoded()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_encoded_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prediction::set_allocated_state_encoded(std::string* state_encoded) {
  if (state_encoded != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_encoded_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_encoded,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.Prediction.state_encoded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace previrt

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::previrt::proto::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::Type>() {
  return ::previrt::proto::Type_descriptor();
}
template <> struct is_proto_enum< ::previrt::proto::FloatSemantics> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::FloatSemantics>() {
  return ::previrt::proto::FloatSemantics_descriptor();
}
template <> struct is_proto_enum< ::previrt::proto::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::ActionType>() {
  return ::previrt::proto::ActionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Previrt_2eproto
