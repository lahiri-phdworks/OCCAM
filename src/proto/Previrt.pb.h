// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Previrt.proto

#ifndef PROTOBUF_Previrt_2eproto__INCLUDED
#define PROTOBUF_Previrt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace previrt {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Previrt_2eproto();
void protobuf_AssignDesc_Previrt_2eproto();
void protobuf_ShutdownFile_Previrt_2eproto();

class ActionTree;
class ActionTree_Case;
class ActionTree_Event;
class ActionTree_Forward;
class CallInfo;
class CallRewrite;
class ComponentInterface;
class ComponentInterfaceTransform;
class EnforceInterface;
class EnforceInterface_Functions;
class PrevirtType;
class PrevirtType_Float;
class PrevirtType_Global;
class PrevirtType_Int;
class PrevirtType_Str;
class PrevirtType_Vec;

enum Type {
  U = 0,
  I = 1,
  F = 2,
  S = 3,
  V = 4,
  N = 5,
  G = 6
};
bool Type_IsValid(int value);
const Type Type_MIN = U;
const Type Type_MAX = G;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum FloatSemantics {
  IEEEhalf = 1,
  IEEEsingle = 2,
  IEEEdouble = 3,
  IEEEquad = 4,
  x87DoubleExtended = 5,
  Bogus = 6,
  PPCDoubleDouble = 7
};
bool FloatSemantics_IsValid(int value);
const FloatSemantics FloatSemantics_MIN = IEEEhalf;
const FloatSemantics FloatSemantics_MAX = PPCDoubleDouble;
const int FloatSemantics_ARRAYSIZE = FloatSemantics_MAX + 1;

const ::google::protobuf::EnumDescriptor* FloatSemantics_descriptor();
inline const ::std::string& FloatSemantics_Name(FloatSemantics value) {
  return ::google::protobuf::internal::NameOfEnum(
    FloatSemantics_descriptor(), value);
}
inline bool FloatSemantics_Parse(
    const ::std::string& name, FloatSemantics* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FloatSemantics>(
    FloatSemantics_descriptor(), name, value);
}
enum ActionType {
  CASE = 1,
  FORWARD = 2,
  EVENT = 3,
  FAIL = 4
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = CASE;
const ActionType ActionType_MAX = FAIL;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
// ===================================================================

class PrevirtType_Int : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Int) */ {
 public:
  PrevirtType_Int();
  virtual ~PrevirtType_Int();

  PrevirtType_Int(const PrevirtType_Int& from);

  inline PrevirtType_Int& operator=(const PrevirtType_Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType_Int& default_instance();

  void Swap(PrevirtType_Int* other);

  // implements Message ----------------------------------------------

  inline PrevirtType_Int* New() const { return New(NULL); }

  PrevirtType_Int* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType_Int& from);
  void MergeFrom(const PrevirtType_Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType_Int* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 bits = 2;
  bool has_bits() const;
  void clear_bits();
  static const int kBitsFieldNumber = 2;
  ::google::protobuf::uint32 bits() const;
  void set_bits(::google::protobuf::uint32 value);

  // optional string value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Int)
 private:
  inline void set_has_bits();
  inline void clear_has_bits();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint32 bits_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType_Int* default_instance_;
};
// -------------------------------------------------------------------

class PrevirtType_Vec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Vec) */ {
 public:
  PrevirtType_Vec();
  virtual ~PrevirtType_Vec();

  PrevirtType_Vec(const PrevirtType_Vec& from);

  inline PrevirtType_Vec& operator=(const PrevirtType_Vec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType_Vec& default_instance();

  void Swap(PrevirtType_Vec* other);

  // implements Message ----------------------------------------------

  inline PrevirtType_Vec* New() const { return New(NULL); }

  PrevirtType_Vec* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType_Vec& from);
  void MergeFrom(const PrevirtType_Vec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType_Vec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .previrt.proto.PrevirtType elems = 21;
  int elems_size() const;
  void clear_elems();
  static const int kElemsFieldNumber = 21;
  const ::previrt::proto::PrevirtType& elems(int index) const;
  ::previrt::proto::PrevirtType* mutable_elems(int index);
  ::previrt::proto::PrevirtType* add_elems();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_elems();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      elems() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Vec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType > elems_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType_Vec* default_instance_;
};
// -------------------------------------------------------------------

class PrevirtType_Str : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Str) */ {
 public:
  PrevirtType_Str();
  virtual ~PrevirtType_Str();

  PrevirtType_Str(const PrevirtType_Str& from);

  inline PrevirtType_Str& operator=(const PrevirtType_Str& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType_Str& default_instance();

  void Swap(PrevirtType_Str* other);

  // implements Message ----------------------------------------------

  inline PrevirtType_Str* New() const { return New(NULL); }

  PrevirtType_Str* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType_Str& from);
  void MergeFrom(const PrevirtType_Str& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType_Str* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 31;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 31;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bool cstr = 32 [default = true];
  bool has_cstr() const;
  void clear_cstr();
  static const int kCstrFieldNumber = 32;
  bool cstr() const;
  void set_cstr(bool value);

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Str)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_cstr();
  inline void clear_has_cstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  bool cstr_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType_Str* default_instance_;
};
// -------------------------------------------------------------------

class PrevirtType_Float : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Float) */ {
 public:
  PrevirtType_Float();
  virtual ~PrevirtType_Float();

  PrevirtType_Float(const PrevirtType_Float& from);

  inline PrevirtType_Float& operator=(const PrevirtType_Float& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType_Float& default_instance();

  void Swap(PrevirtType_Float* other);

  // implements Message ----------------------------------------------

  inline PrevirtType_Float* New() const { return New(NULL); }

  PrevirtType_Float* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType_Float& from);
  void MergeFrom(const PrevirtType_Float& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType_Float* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .previrt.proto.FloatSemantics sem = 41;
  bool has_sem() const;
  void clear_sem();
  static const int kSemFieldNumber = 41;
  ::previrt::proto::FloatSemantics sem() const;
  void set_sem(::previrt::proto::FloatSemantics value);

  // optional string data = 42;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 42;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Float)
 private:
  inline void set_has_sem();
  inline void clear_has_sem();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int sem_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType_Float* default_instance_;
};
// -------------------------------------------------------------------

class PrevirtType_Global : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType.Global) */ {
 public:
  PrevirtType_Global();
  virtual ~PrevirtType_Global();

  PrevirtType_Global(const PrevirtType_Global& from);

  inline PrevirtType_Global& operator=(const PrevirtType_Global& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType_Global& default_instance();

  void Swap(PrevirtType_Global* other);

  // implements Message ----------------------------------------------

  inline PrevirtType_Global* New() const { return New(NULL); }

  PrevirtType_Global* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType_Global& from);
  void MergeFrom(const PrevirtType_Global& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType_Global* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 51;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 51;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool is_const = 52 [default = false];
  bool has_is_const() const;
  void clear_is_const();
  static const int kIsConstFieldNumber = 52;
  bool is_const() const;
  void set_is_const(bool value);

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType.Global)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_const();
  inline void clear_has_is_const();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool is_const_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType_Global* default_instance_;
};
// -------------------------------------------------------------------

class PrevirtType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.PrevirtType) */ {
 public:
  PrevirtType();
  virtual ~PrevirtType();

  PrevirtType(const PrevirtType& from);

  inline PrevirtType& operator=(const PrevirtType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrevirtType& default_instance();

  void Swap(PrevirtType* other);

  // implements Message ----------------------------------------------

  inline PrevirtType* New() const { return New(NULL); }

  PrevirtType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrevirtType& from);
  void MergeFrom(const PrevirtType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrevirtType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PrevirtType_Int Int;
  typedef PrevirtType_Vec Vec;
  typedef PrevirtType_Str Str;
  typedef PrevirtType_Float Float;
  typedef PrevirtType_Global Global;

  // accessors -------------------------------------------------------

  // required .previrt.proto.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::previrt::proto::Type type() const;
  void set_type(::previrt::proto::Type value);

  // optional group Int = 10 { ... };
  bool has_int_() const;
  void clear_int_();
  static const int kIntFieldNumber = 10;
  const ::previrt::proto::PrevirtType_Int& int_() const;
  ::previrt::proto::PrevirtType_Int* mutable_int_();
  ::previrt::proto::PrevirtType_Int* release_int_();
  void set_allocated_int_(::previrt::proto::PrevirtType_Int* int_);

  // optional group Vec = 20 { ... };
  bool has_vec() const;
  void clear_vec();
  static const int kVecFieldNumber = 20;
  const ::previrt::proto::PrevirtType_Vec& vec() const;
  ::previrt::proto::PrevirtType_Vec* mutable_vec();
  ::previrt::proto::PrevirtType_Vec* release_vec();
  void set_allocated_vec(::previrt::proto::PrevirtType_Vec* vec);

  // optional group Str = 30 { ... };
  bool has_str() const;
  void clear_str();
  static const int kStrFieldNumber = 30;
  const ::previrt::proto::PrevirtType_Str& str() const;
  ::previrt::proto::PrevirtType_Str* mutable_str();
  ::previrt::proto::PrevirtType_Str* release_str();
  void set_allocated_str(::previrt::proto::PrevirtType_Str* str);

  // optional group Float = 40 { ... };
  bool has_float_() const;
  void clear_float_();
  static const int kFloatFieldNumber = 40;
  const ::previrt::proto::PrevirtType_Float& float_() const;
  ::previrt::proto::PrevirtType_Float* mutable_float_();
  ::previrt::proto::PrevirtType_Float* release_float_();
  void set_allocated_float_(::previrt::proto::PrevirtType_Float* float_);

  // optional group Global = 50 { ... };
  bool has_global() const;
  void clear_global();
  static const int kGlobalFieldNumber = 50;
  const ::previrt::proto::PrevirtType_Global& global() const;
  ::previrt::proto::PrevirtType_Global* mutable_global();
  ::previrt::proto::PrevirtType_Global* release_global();
  void set_allocated_global(::previrt::proto::PrevirtType_Global* global);

  // @@protoc_insertion_point(class_scope:previrt.proto.PrevirtType)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_int_();
  inline void clear_has_int_();
  inline void set_has_vec();
  inline void clear_has_vec();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_float_();
  inline void clear_has_float_();
  inline void set_has_global();
  inline void clear_has_global();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::previrt::proto::PrevirtType_Int* int__;
  ::previrt::proto::PrevirtType_Vec* vec_;
  ::previrt::proto::PrevirtType_Str* str_;
  ::previrt::proto::PrevirtType_Float* float__;
  ::previrt::proto::PrevirtType_Global* global_;
  int type_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static PrevirtType* default_instance_;
};
// -------------------------------------------------------------------

class CallInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.CallInfo) */ {
 public:
  CallInfo();
  virtual ~CallInfo();

  CallInfo(const CallInfo& from);

  inline CallInfo& operator=(const CallInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallInfo& default_instance();

  void Swap(CallInfo* other);

  // implements Message ----------------------------------------------

  inline CallInfo* New() const { return New(NULL); }

  CallInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallInfo& from);
  void MergeFrom(const CallInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 count = 2 [default = 1];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // repeated .previrt.proto.PrevirtType args = 3;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::previrt::proto::PrevirtType& args(int index) const;
  ::previrt::proto::PrevirtType* mutable_args(int index);
  ::previrt::proto::PrevirtType* add_args();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_args();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      args() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.CallInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType > args_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static CallInfo* default_instance_;
};
// -------------------------------------------------------------------

class CallRewrite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.CallRewrite) */ {
 public:
  CallRewrite();
  virtual ~CallRewrite();

  CallRewrite(const CallRewrite& from);

  inline CallRewrite& operator=(const CallRewrite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallRewrite& default_instance();

  void Swap(CallRewrite* other);

  // implements Message ----------------------------------------------

  inline CallRewrite* New() const { return New(NULL); }

  CallRewrite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallRewrite& from);
  void MergeFrom(const CallRewrite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallRewrite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .previrt.proto.CallInfo call = 1;
  bool has_call() const;
  void clear_call();
  static const int kCallFieldNumber = 1;
  const ::previrt::proto::CallInfo& call() const;
  ::previrt::proto::CallInfo* mutable_call();
  ::previrt::proto::CallInfo* release_call();
  void set_allocated_call(::previrt::proto::CallInfo* call);

  // required bytes new_function = 2;
  bool has_new_function() const;
  void clear_new_function();
  static const int kNewFunctionFieldNumber = 2;
  const ::std::string& new_function() const;
  void set_new_function(const ::std::string& value);
  void set_new_function(const char* value);
  void set_new_function(const void* value, size_t size);
  ::std::string* mutable_new_function();
  ::std::string* release_new_function();
  void set_allocated_new_function(::std::string* new_function);

  // repeated int32 args = 3 [packed = true];
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  ::google::protobuf::int32 args(int index) const;
  void set_args(int index, ::google::protobuf::int32 value);
  void add_args(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      args() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:previrt.proto.CallRewrite)
 private:
  inline void set_has_call();
  inline void clear_has_call();
  inline void set_has_new_function();
  inline void clear_has_new_function();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::previrt::proto::CallInfo* call_;
  ::google::protobuf::internal::ArenaStringPtr new_function_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > args_;
  mutable int _args_cached_byte_size_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static CallRewrite* default_instance_;
};
// -------------------------------------------------------------------

class ComponentInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ComponentInterface) */ {
 public:
  ComponentInterface();
  virtual ~ComponentInterface();

  ComponentInterface(const ComponentInterface& from);

  inline ComponentInterface& operator=(const ComponentInterface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentInterface& default_instance();

  void Swap(ComponentInterface* other);

  // implements Message ----------------------------------------------

  inline ComponentInterface* New() const { return New(NULL); }

  ComponentInterface* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentInterface& from);
  void MergeFrom(const ComponentInterface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComponentInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .previrt.proto.CallInfo calls = 1;
  int calls_size() const;
  void clear_calls();
  static const int kCallsFieldNumber = 1;
  const ::previrt::proto::CallInfo& calls(int index) const;
  ::previrt::proto::CallInfo* mutable_calls(int index);
  ::previrt::proto::CallInfo* add_calls();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >*
      mutable_calls();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >&
      calls() const;

  // repeated .previrt.proto.CallInfo definitions = 2;
  int definitions_size() const;
  void clear_definitions();
  static const int kDefinitionsFieldNumber = 2;
  const ::previrt::proto::CallInfo& definitions(int index) const;
  ::previrt::proto::CallInfo* mutable_definitions(int index);
  ::previrt::proto::CallInfo* add_definitions();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >*
      mutable_definitions();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >&
      definitions() const;

  // repeated .previrt.proto.PrevirtType globals = 3;
  int globals_size() const;
  void clear_globals();
  static const int kGlobalsFieldNumber = 3;
  const ::previrt::proto::PrevirtType& globals(int index) const;
  ::previrt::proto::PrevirtType* mutable_globals(int index);
  ::previrt::proto::PrevirtType* add_globals();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
      mutable_globals();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
      globals() const;

  // repeated bytes references = 4;
  int references_size() const;
  void clear_references();
  static const int kReferencesFieldNumber = 4;
  const ::std::string& references(int index) const;
  ::std::string* mutable_references(int index);
  void set_references(int index, const ::std::string& value);
  void set_references(int index, const char* value);
  void set_references(int index, const void* value, size_t size);
  ::std::string* add_references();
  void add_references(const ::std::string& value);
  void add_references(const char* value);
  void add_references(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& references() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_references();

  // @@protoc_insertion_point(class_scope:previrt.proto.ComponentInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo > calls_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo > definitions_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType > globals_;
  ::google::protobuf::RepeatedPtrField< ::std::string> references_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ComponentInterface* default_instance_;
};
// -------------------------------------------------------------------

class ComponentInterfaceTransform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ComponentInterfaceTransform) */ {
 public:
  ComponentInterfaceTransform();
  virtual ~ComponentInterfaceTransform();

  ComponentInterfaceTransform(const ComponentInterfaceTransform& from);

  inline ComponentInterfaceTransform& operator=(const ComponentInterfaceTransform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComponentInterfaceTransform& default_instance();

  void Swap(ComponentInterfaceTransform* other);

  // implements Message ----------------------------------------------

  inline ComponentInterfaceTransform* New() const { return New(NULL); }

  ComponentInterfaceTransform* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComponentInterfaceTransform& from);
  void MergeFrom(const ComponentInterfaceTransform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ComponentInterfaceTransform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .previrt.proto.CallRewrite calls = 1;
  int calls_size() const;
  void clear_calls();
  static const int kCallsFieldNumber = 1;
  const ::previrt::proto::CallRewrite& calls(int index) const;
  ::previrt::proto::CallRewrite* mutable_calls(int index);
  ::previrt::proto::CallRewrite* add_calls();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallRewrite >*
      mutable_calls();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallRewrite >&
      calls() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.ComponentInterfaceTransform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallRewrite > calls_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ComponentInterfaceTransform* default_instance_;
};
// -------------------------------------------------------------------

class ActionTree_Case : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Case) */ {
 public:
  ActionTree_Case();
  virtual ~ActionTree_Case();

  ActionTree_Case(const ActionTree_Case& from);

  inline ActionTree_Case& operator=(const ActionTree_Case& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTree_Case& default_instance();

  void Swap(ActionTree_Case* other);

  // implements Message ----------------------------------------------

  inline ActionTree_Case* New() const { return New(NULL); }

  ActionTree_Case* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTree_Case& from);
  void MergeFrom(const ActionTree_Case& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionTree_Case* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 var = 11;
  bool has_var() const;
  void clear_var();
  static const int kVarFieldNumber = 11;
  ::google::protobuf::int32 var() const;
  void set_var(::google::protobuf::int32 value);

  // required .previrt.proto.PrevirtType test = 12;
  bool has_test() const;
  void clear_test();
  static const int kTestFieldNumber = 12;
  const ::previrt::proto::PrevirtType& test() const;
  ::previrt::proto::PrevirtType* mutable_test();
  ::previrt::proto::PrevirtType* release_test();
  void set_allocated_test(::previrt::proto::PrevirtType* test);

  // required .previrt.proto.ActionTree _then = 18;
  bool has__then() const;
  void clear__then();
  static const int kThenFieldNumber = 18;
  const ::previrt::proto::ActionTree& _then() const;
  ::previrt::proto::ActionTree* mutable__then();
  ::previrt::proto::ActionTree* release__then();
  void set_allocated__then(::previrt::proto::ActionTree* _then);

  // required .previrt.proto.ActionTree _else = 19;
  bool has__else() const;
  void clear__else();
  static const int kElseFieldNumber = 19;
  const ::previrt::proto::ActionTree& _else() const;
  ::previrt::proto::ActionTree* mutable__else();
  ::previrt::proto::ActionTree* release__else();
  void set_allocated__else(::previrt::proto::ActionTree* _else);

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Case)
 private:
  inline void set_has_var();
  inline void clear_has_var();
  inline void set_has_test();
  inline void clear_has_test();
  inline void set_has__then();
  inline void clear_has__then();
  inline void set_has__else();
  inline void clear_has__else();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::previrt::proto::PrevirtType* test_;
  ::previrt::proto::ActionTree* _then_;
  ::previrt::proto::ActionTree* _else_;
  ::google::protobuf::int32 var_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ActionTree_Case* default_instance_;
};
// -------------------------------------------------------------------

class ActionTree_Forward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Forward) */ {
 public:
  ActionTree_Forward();
  virtual ~ActionTree_Forward();

  ActionTree_Forward(const ActionTree_Forward& from);

  inline ActionTree_Forward& operator=(const ActionTree_Forward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTree_Forward& default_instance();

  void Swap(ActionTree_Forward* other);

  // implements Message ----------------------------------------------

  inline ActionTree_Forward* New() const { return New(NULL); }

  ActionTree_Forward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTree_Forward& from);
  void MergeFrom(const ActionTree_Forward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionTree_Forward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Forward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ActionTree_Forward* default_instance_;
};
// -------------------------------------------------------------------

class ActionTree_Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree.Event) */ {
 public:
  ActionTree_Event();
  virtual ~ActionTree_Event();

  ActionTree_Event(const ActionTree_Event& from);

  inline ActionTree_Event& operator=(const ActionTree_Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTree_Event& default_instance();

  void Swap(ActionTree_Event* other);

  // implements Message ----------------------------------------------

  inline ActionTree_Event* New() const { return New(NULL); }

  ActionTree_Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTree_Event& from);
  void MergeFrom(const ActionTree_Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionTree_Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool exit = 31 [default = false];
  bool has_exit() const;
  void clear_exit();
  static const int kExitFieldNumber = 31;
  bool exit() const;
  void set_exit(bool value);

  // optional bytes handler = 32;
  bool has_handler() const;
  void clear_handler();
  static const int kHandlerFieldNumber = 32;
  const ::std::string& handler() const;
  void set_handler(const ::std::string& value);
  void set_handler(const char* value);
  void set_handler(const void* value, size_t size);
  ::std::string* mutable_handler();
  ::std::string* release_handler();
  void set_allocated_handler(::std::string* handler);

  // repeated int32 args = 33;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 33;
  ::google::protobuf::int32 args(int index) const;
  void set_args(int index, ::google::protobuf::int32 value);
  void add_args(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      args() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_args();

  // optional .previrt.proto.ActionTree then = 39;
  bool has_then() const;
  void clear_then();
  static const int kThenFieldNumber = 39;
  const ::previrt::proto::ActionTree& then() const;
  ::previrt::proto::ActionTree* mutable_then();
  ::previrt::proto::ActionTree* release_then();
  void set_allocated_then(::previrt::proto::ActionTree* then);

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree.Event)
 private:
  inline void set_has_exit();
  inline void clear_has_exit();
  inline void set_has_handler();
  inline void clear_has_handler();
  inline void set_has_then();
  inline void clear_has_then();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr handler_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > args_;
  ::previrt::proto::ActionTree* then_;
  bool exit_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ActionTree_Event* default_instance_;
};
// -------------------------------------------------------------------

class ActionTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.ActionTree) */ {
 public:
  ActionTree();
  virtual ~ActionTree();

  ActionTree(const ActionTree& from);

  inline ActionTree& operator=(const ActionTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionTree& default_instance();

  void Swap(ActionTree* other);

  // implements Message ----------------------------------------------

  inline ActionTree* New() const { return New(NULL); }

  ActionTree* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionTree& from);
  void MergeFrom(const ActionTree& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActionTree_Case Case;
  typedef ActionTree_Forward Forward;
  typedef ActionTree_Event Event;

  // accessors -------------------------------------------------------

  // required .previrt.proto.ActionType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::previrt::proto::ActionType type() const;
  void set_type(::previrt::proto::ActionType value);

  // optional group Case = 10 { ... };
  bool has_case_() const;
  void clear_case_();
  static const int kCaseFieldNumber = 10;
  const ::previrt::proto::ActionTree_Case& case_() const;
  ::previrt::proto::ActionTree_Case* mutable_case_();
  ::previrt::proto::ActionTree_Case* release_case_();
  void set_allocated_case_(::previrt::proto::ActionTree_Case* case_);

  // optional group Forward = 20 { ... };
  bool has_forward() const;
  void clear_forward();
  static const int kForwardFieldNumber = 20;
  const ::previrt::proto::ActionTree_Forward& forward() const;
  ::previrt::proto::ActionTree_Forward* mutable_forward();
  ::previrt::proto::ActionTree_Forward* release_forward();
  void set_allocated_forward(::previrt::proto::ActionTree_Forward* forward);

  // optional group Event = 30 { ... };
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 30;
  const ::previrt::proto::ActionTree_Event& event() const;
  ::previrt::proto::ActionTree_Event* mutable_event();
  ::previrt::proto::ActionTree_Event* release_event();
  void set_allocated_event(::previrt::proto::ActionTree_Event* event);

  // @@protoc_insertion_point(class_scope:previrt.proto.ActionTree)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_case_();
  inline void clear_has_case_();
  inline void set_has_forward();
  inline void clear_has_forward();
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::previrt::proto::ActionTree_Case* case__;
  ::previrt::proto::ActionTree_Forward* forward_;
  ::previrt::proto::ActionTree_Event* event_;
  int type_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static ActionTree* default_instance_;
};
// -------------------------------------------------------------------

class EnforceInterface_Functions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.EnforceInterface.Functions) */ {
 public:
  EnforceInterface_Functions();
  virtual ~EnforceInterface_Functions();

  EnforceInterface_Functions(const EnforceInterface_Functions& from);

  inline EnforceInterface_Functions& operator=(const EnforceInterface_Functions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnforceInterface_Functions& default_instance();

  void Swap(EnforceInterface_Functions* other);

  // implements Message ----------------------------------------------

  inline EnforceInterface_Functions* New() const { return New(NULL); }

  EnforceInterface_Functions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnforceInterface_Functions& from);
  void MergeFrom(const EnforceInterface_Functions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnforceInterface_Functions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .previrt.proto.ActionTree actions = 3;
  bool has_actions() const;
  void clear_actions();
  static const int kActionsFieldNumber = 3;
  const ::previrt::proto::ActionTree& actions() const;
  ::previrt::proto::ActionTree* mutable_actions();
  ::previrt::proto::ActionTree* release_actions();
  void set_allocated_actions(::previrt::proto::ActionTree* actions);

  // @@protoc_insertion_point(class_scope:previrt.proto.EnforceInterface.Functions)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_actions();
  inline void clear_has_actions();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::previrt::proto::ActionTree* actions_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static EnforceInterface_Functions* default_instance_;
};
// -------------------------------------------------------------------

class EnforceInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:previrt.proto.EnforceInterface) */ {
 public:
  EnforceInterface();
  virtual ~EnforceInterface();

  EnforceInterface(const EnforceInterface& from);

  inline EnforceInterface& operator=(const EnforceInterface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnforceInterface& default_instance();

  void Swap(EnforceInterface* other);

  // implements Message ----------------------------------------------

  inline EnforceInterface* New() const { return New(NULL); }

  EnforceInterface* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnforceInterface& from);
  void MergeFrom(const EnforceInterface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnforceInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EnforceInterface_Functions Functions;

  // accessors -------------------------------------------------------

  // repeated group Functions = 1 { ... };
  int functions_size() const;
  void clear_functions();
  static const int kFunctionsFieldNumber = 1;
  const ::previrt::proto::EnforceInterface_Functions& functions(int index) const;
  ::previrt::proto::EnforceInterface_Functions* mutable_functions(int index);
  ::previrt::proto::EnforceInterface_Functions* add_functions();
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >*
      mutable_functions();
  const ::google::protobuf::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >&
      functions() const;

  // @@protoc_insertion_point(class_scope:previrt.proto.EnforceInterface)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions > functions_;
  friend void  protobuf_AddDesc_Previrt_2eproto();
  friend void protobuf_AssignDesc_Previrt_2eproto();
  friend void protobuf_ShutdownFile_Previrt_2eproto();

  void InitAsDefaultInstance();
  static EnforceInterface* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PrevirtType_Int

// required uint32 bits = 2;
inline bool PrevirtType_Int::has_bits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevirtType_Int::set_has_bits() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevirtType_Int::clear_has_bits() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevirtType_Int::clear_bits() {
  bits_ = 0u;
  clear_has_bits();
}
inline ::google::protobuf::uint32 PrevirtType_Int::bits() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Int.bits)
  return bits_;
}
inline void PrevirtType_Int::set_bits(::google::protobuf::uint32 value) {
  set_has_bits();
  bits_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Int.bits)
}

// optional string value = 3;
inline bool PrevirtType_Int::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevirtType_Int::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevirtType_Int::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevirtType_Int::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& PrevirtType_Int::value() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Int.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Int::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Int.value)
}
inline void PrevirtType_Int::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Int.value)
}
inline void PrevirtType_Int::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Int.value)
}
inline ::std::string* PrevirtType_Int::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Int.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrevirtType_Int::release_value() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Int.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Int::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Int.value)
}

// -------------------------------------------------------------------

// PrevirtType_Vec

// repeated .previrt.proto.PrevirtType elems = 21;
inline int PrevirtType_Vec::elems_size() const {
  return elems_.size();
}
inline void PrevirtType_Vec::clear_elems() {
  elems_.Clear();
}
inline const ::previrt::proto::PrevirtType& PrevirtType_Vec::elems(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Vec.elems)
  return elems_.Get(index);
}
inline ::previrt::proto::PrevirtType* PrevirtType_Vec::mutable_elems(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Vec.elems)
  return elems_.Mutable(index);
}
inline ::previrt::proto::PrevirtType* PrevirtType_Vec::add_elems() {
  // @@protoc_insertion_point(field_add:previrt.proto.PrevirtType.Vec.elems)
  return elems_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
PrevirtType_Vec::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.PrevirtType.Vec.elems)
  return &elems_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
PrevirtType_Vec::elems() const {
  // @@protoc_insertion_point(field_list:previrt.proto.PrevirtType.Vec.elems)
  return elems_;
}

// -------------------------------------------------------------------

// PrevirtType_Str

// optional bytes data = 31;
inline bool PrevirtType_Str::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevirtType_Str::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevirtType_Str::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevirtType_Str::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& PrevirtType_Str::data() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Str.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Str::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Str.data)
}
inline void PrevirtType_Str::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Str.data)
}
inline void PrevirtType_Str::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Str.data)
}
inline ::std::string* PrevirtType_Str::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Str.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrevirtType_Str::release_data() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Str.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Str::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Str.data)
}

// optional bool cstr = 32 [default = true];
inline bool PrevirtType_Str::has_cstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevirtType_Str::set_has_cstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevirtType_Str::clear_has_cstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevirtType_Str::clear_cstr() {
  cstr_ = true;
  clear_has_cstr();
}
inline bool PrevirtType_Str::cstr() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Str.cstr)
  return cstr_;
}
inline void PrevirtType_Str::set_cstr(bool value) {
  set_has_cstr();
  cstr_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Str.cstr)
}

// -------------------------------------------------------------------

// PrevirtType_Float

// required .previrt.proto.FloatSemantics sem = 41;
inline bool PrevirtType_Float::has_sem() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevirtType_Float::set_has_sem() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevirtType_Float::clear_has_sem() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevirtType_Float::clear_sem() {
  sem_ = 1;
  clear_has_sem();
}
inline ::previrt::proto::FloatSemantics PrevirtType_Float::sem() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Float.sem)
  return static_cast< ::previrt::proto::FloatSemantics >(sem_);
}
inline void PrevirtType_Float::set_sem(::previrt::proto::FloatSemantics value) {
  assert(::previrt::proto::FloatSemantics_IsValid(value));
  set_has_sem();
  sem_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Float.sem)
}

// optional string data = 42;
inline bool PrevirtType_Float::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevirtType_Float::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevirtType_Float::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevirtType_Float::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& PrevirtType_Float::data() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Float.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Float::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Float.data)
}
inline void PrevirtType_Float::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Float.data)
}
inline void PrevirtType_Float::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Float.data)
}
inline ::std::string* PrevirtType_Float::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Float.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrevirtType_Float::release_data() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Float.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Float::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Float.data)
}

// -------------------------------------------------------------------

// PrevirtType_Global

// required bytes name = 51;
inline bool PrevirtType_Global::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevirtType_Global::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevirtType_Global::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevirtType_Global::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& PrevirtType_Global::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Global.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Global::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Global.name)
}
inline void PrevirtType_Global::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.PrevirtType.Global.name)
}
inline void PrevirtType_Global::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.PrevirtType.Global.name)
}
inline ::std::string* PrevirtType_Global::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.Global.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrevirtType_Global::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.Global.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrevirtType_Global::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.Global.name)
}

// optional bool is_const = 52 [default = false];
inline bool PrevirtType_Global::has_is_const() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevirtType_Global::set_has_is_const() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevirtType_Global::clear_has_is_const() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevirtType_Global::clear_is_const() {
  is_const_ = false;
  clear_has_is_const();
}
inline bool PrevirtType_Global::is_const() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.Global.is_const)
  return is_const_;
}
inline void PrevirtType_Global::set_is_const(bool value) {
  set_has_is_const();
  is_const_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.Global.is_const)
}

// -------------------------------------------------------------------

// PrevirtType

// required .previrt.proto.Type type = 1;
inline bool PrevirtType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrevirtType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrevirtType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrevirtType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::previrt::proto::Type PrevirtType::type() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.type)
  return static_cast< ::previrt::proto::Type >(type_);
}
inline void PrevirtType::set_type(::previrt::proto::Type value) {
  assert(::previrt::proto::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.PrevirtType.type)
}

// optional group Int = 10 { ... };
inline bool PrevirtType::has_int_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrevirtType::set_has_int_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrevirtType::clear_has_int_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrevirtType::clear_int_() {
  if (int__ != NULL) int__->::previrt::proto::PrevirtType_Int::Clear();
  clear_has_int_();
}
inline const ::previrt::proto::PrevirtType_Int& PrevirtType::int_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.int)
  return int__ != NULL ? *int__ : *default_instance_->int__;
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::mutable_int_() {
  set_has_int_();
  if (int__ == NULL) {
    int__ = new ::previrt::proto::PrevirtType_Int;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.int)
  return int__;
}
inline ::previrt::proto::PrevirtType_Int* PrevirtType::release_int_() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.int)
  clear_has_int_();
  ::previrt::proto::PrevirtType_Int* temp = int__;
  int__ = NULL;
  return temp;
}
inline void PrevirtType::set_allocated_int_(::previrt::proto::PrevirtType_Int* int_) {
  delete int__;
  int__ = int_;
  if (int_) {
    set_has_int_();
  } else {
    clear_has_int_();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.int)
}

// optional group Vec = 20 { ... };
inline bool PrevirtType::has_vec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrevirtType::set_has_vec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrevirtType::clear_has_vec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrevirtType::clear_vec() {
  if (vec_ != NULL) vec_->::previrt::proto::PrevirtType_Vec::Clear();
  clear_has_vec();
}
inline const ::previrt::proto::PrevirtType_Vec& PrevirtType::vec() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.vec)
  return vec_ != NULL ? *vec_ : *default_instance_->vec_;
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::mutable_vec() {
  set_has_vec();
  if (vec_ == NULL) {
    vec_ = new ::previrt::proto::PrevirtType_Vec;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.vec)
  return vec_;
}
inline ::previrt::proto::PrevirtType_Vec* PrevirtType::release_vec() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.vec)
  clear_has_vec();
  ::previrt::proto::PrevirtType_Vec* temp = vec_;
  vec_ = NULL;
  return temp;
}
inline void PrevirtType::set_allocated_vec(::previrt::proto::PrevirtType_Vec* vec) {
  delete vec_;
  vec_ = vec;
  if (vec) {
    set_has_vec();
  } else {
    clear_has_vec();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.vec)
}

// optional group Str = 30 { ... };
inline bool PrevirtType::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrevirtType::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrevirtType::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrevirtType::clear_str() {
  if (str_ != NULL) str_->::previrt::proto::PrevirtType_Str::Clear();
  clear_has_str();
}
inline const ::previrt::proto::PrevirtType_Str& PrevirtType::str() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.str)
  return str_ != NULL ? *str_ : *default_instance_->str_;
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::mutable_str() {
  set_has_str();
  if (str_ == NULL) {
    str_ = new ::previrt::proto::PrevirtType_Str;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.str)
  return str_;
}
inline ::previrt::proto::PrevirtType_Str* PrevirtType::release_str() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.str)
  clear_has_str();
  ::previrt::proto::PrevirtType_Str* temp = str_;
  str_ = NULL;
  return temp;
}
inline void PrevirtType::set_allocated_str(::previrt::proto::PrevirtType_Str* str) {
  delete str_;
  str_ = str;
  if (str) {
    set_has_str();
  } else {
    clear_has_str();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.str)
}

// optional group Float = 40 { ... };
inline bool PrevirtType::has_float_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrevirtType::set_has_float_() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrevirtType::clear_has_float_() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrevirtType::clear_float_() {
  if (float__ != NULL) float__->::previrt::proto::PrevirtType_Float::Clear();
  clear_has_float_();
}
inline const ::previrt::proto::PrevirtType_Float& PrevirtType::float_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.float)
  return float__ != NULL ? *float__ : *default_instance_->float__;
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::mutable_float_() {
  set_has_float_();
  if (float__ == NULL) {
    float__ = new ::previrt::proto::PrevirtType_Float;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.float)
  return float__;
}
inline ::previrt::proto::PrevirtType_Float* PrevirtType::release_float_() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.float)
  clear_has_float_();
  ::previrt::proto::PrevirtType_Float* temp = float__;
  float__ = NULL;
  return temp;
}
inline void PrevirtType::set_allocated_float_(::previrt::proto::PrevirtType_Float* float_) {
  delete float__;
  float__ = float_;
  if (float_) {
    set_has_float_();
  } else {
    clear_has_float_();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.float)
}

// optional group Global = 50 { ... };
inline bool PrevirtType::has_global() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrevirtType::set_has_global() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrevirtType::clear_has_global() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrevirtType::clear_global() {
  if (global_ != NULL) global_->::previrt::proto::PrevirtType_Global::Clear();
  clear_has_global();
}
inline const ::previrt::proto::PrevirtType_Global& PrevirtType::global() const {
  // @@protoc_insertion_point(field_get:previrt.proto.PrevirtType.global)
  return global_ != NULL ? *global_ : *default_instance_->global_;
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::mutable_global() {
  set_has_global();
  if (global_ == NULL) {
    global_ = new ::previrt::proto::PrevirtType_Global;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.PrevirtType.global)
  return global_;
}
inline ::previrt::proto::PrevirtType_Global* PrevirtType::release_global() {
  // @@protoc_insertion_point(field_release:previrt.proto.PrevirtType.global)
  clear_has_global();
  ::previrt::proto::PrevirtType_Global* temp = global_;
  global_ = NULL;
  return temp;
}
inline void PrevirtType::set_allocated_global(::previrt::proto::PrevirtType_Global* global) {
  delete global_;
  global_ = global;
  if (global) {
    set_has_global();
  } else {
    clear_has_global();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.PrevirtType.global)
}

// -------------------------------------------------------------------

// CallInfo

// required bytes name = 1;
inline bool CallInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CallInfo::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallInfo.name)
}
inline void CallInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.CallInfo.name)
}
inline void CallInfo::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.CallInfo.name)
}
inline ::std::string* CallInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallInfo::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallInfo.name)
}

// optional uint32 count = 2 [default = 1];
inline bool CallInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallInfo::clear_count() {
  count_ = 1u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CallInfo::count() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.count)
  return count_;
}
inline void CallInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.CallInfo.count)
}

// repeated .previrt.proto.PrevirtType args = 3;
inline int CallInfo::args_size() const {
  return args_.size();
}
inline void CallInfo::clear_args() {
  args_.Clear();
}
inline const ::previrt::proto::PrevirtType& CallInfo::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallInfo.args)
  return args_.Get(index);
}
inline ::previrt::proto::PrevirtType* CallInfo::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallInfo.args)
  return args_.Mutable(index);
}
inline ::previrt::proto::PrevirtType* CallInfo::add_args() {
  // @@protoc_insertion_point(field_add:previrt.proto.CallInfo.args)
  return args_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
CallInfo::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.CallInfo.args)
  return &args_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
CallInfo::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.CallInfo.args)
  return args_;
}

// -------------------------------------------------------------------

// CallRewrite

// required .previrt.proto.CallInfo call = 1;
inline bool CallRewrite::has_call() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallRewrite::set_has_call() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallRewrite::clear_has_call() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallRewrite::clear_call() {
  if (call_ != NULL) call_->::previrt::proto::CallInfo::Clear();
  clear_has_call();
}
inline const ::previrt::proto::CallInfo& CallRewrite::call() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.call)
  return call_ != NULL ? *call_ : *default_instance_->call_;
}
inline ::previrt::proto::CallInfo* CallRewrite::mutable_call() {
  set_has_call();
  if (call_ == NULL) {
    call_ = new ::previrt::proto::CallInfo;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallRewrite.call)
  return call_;
}
inline ::previrt::proto::CallInfo* CallRewrite::release_call() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallRewrite.call)
  clear_has_call();
  ::previrt::proto::CallInfo* temp = call_;
  call_ = NULL;
  return temp;
}
inline void CallRewrite::set_allocated_call(::previrt::proto::CallInfo* call) {
  delete call_;
  call_ = call;
  if (call) {
    set_has_call();
  } else {
    clear_has_call();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallRewrite.call)
}

// required bytes new_function = 2;
inline bool CallRewrite::has_new_function() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallRewrite::set_has_new_function() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallRewrite::clear_has_new_function() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallRewrite::clear_new_function() {
  new_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_function();
}
inline const ::std::string& CallRewrite::new_function() const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.new_function)
  return new_function_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRewrite::set_new_function(const ::std::string& value) {
  set_has_new_function();
  new_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallRewrite.new_function)
}
inline void CallRewrite::set_new_function(const char* value) {
  set_has_new_function();
  new_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.CallRewrite.new_function)
}
inline void CallRewrite::set_new_function(const void* value, size_t size) {
  set_has_new_function();
  new_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.CallRewrite.new_function)
}
inline ::std::string* CallRewrite::mutable_new_function() {
  set_has_new_function();
  // @@protoc_insertion_point(field_mutable:previrt.proto.CallRewrite.new_function)
  return new_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CallRewrite::release_new_function() {
  // @@protoc_insertion_point(field_release:previrt.proto.CallRewrite.new_function)
  clear_has_new_function();
  return new_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CallRewrite::set_allocated_new_function(::std::string* new_function) {
  if (new_function != NULL) {
    set_has_new_function();
  } else {
    clear_has_new_function();
  }
  new_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_function);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.CallRewrite.new_function)
}

// repeated int32 args = 3 [packed = true];
inline int CallRewrite::args_size() const {
  return args_.size();
}
inline void CallRewrite::clear_args() {
  args_.Clear();
}
inline ::google::protobuf::int32 CallRewrite::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.CallRewrite.args)
  return args_.Get(index);
}
inline void CallRewrite::set_args(int index, ::google::protobuf::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:previrt.proto.CallRewrite.args)
}
inline void CallRewrite::add_args(::google::protobuf::int32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:previrt.proto.CallRewrite.args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CallRewrite::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.CallRewrite.args)
  return args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CallRewrite::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.CallRewrite.args)
  return &args_;
}

// -------------------------------------------------------------------

// ComponentInterface

// repeated .previrt.proto.CallInfo calls = 1;
inline int ComponentInterface::calls_size() const {
  return calls_.size();
}
inline void ComponentInterface::clear_calls() {
  calls_.Clear();
}
inline const ::previrt::proto::CallInfo& ComponentInterface::calls(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.calls)
  return calls_.Get(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.calls)
  return calls_.Mutable(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::add_calls() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.calls)
  return calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >*
ComponentInterface::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.calls)
  return &calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >&
ComponentInterface::calls() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.calls)
  return calls_;
}

// repeated .previrt.proto.CallInfo definitions = 2;
inline int ComponentInterface::definitions_size() const {
  return definitions_.size();
}
inline void ComponentInterface::clear_definitions() {
  definitions_.Clear();
}
inline const ::previrt::proto::CallInfo& ComponentInterface::definitions(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.definitions)
  return definitions_.Get(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::mutable_definitions(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.definitions)
  return definitions_.Mutable(index);
}
inline ::previrt::proto::CallInfo* ComponentInterface::add_definitions() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.definitions)
  return definitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >*
ComponentInterface::mutable_definitions() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.definitions)
  return &definitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallInfo >&
ComponentInterface::definitions() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.definitions)
  return definitions_;
}

// repeated .previrt.proto.PrevirtType globals = 3;
inline int ComponentInterface::globals_size() const {
  return globals_.size();
}
inline void ComponentInterface::clear_globals() {
  globals_.Clear();
}
inline const ::previrt::proto::PrevirtType& ComponentInterface::globals(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.globals)
  return globals_.Get(index);
}
inline ::previrt::proto::PrevirtType* ComponentInterface::mutable_globals(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.globals)
  return globals_.Mutable(index);
}
inline ::previrt::proto::PrevirtType* ComponentInterface::add_globals() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.globals)
  return globals_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >*
ComponentInterface::mutable_globals() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.globals)
  return &globals_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::PrevirtType >&
ComponentInterface::globals() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.globals)
  return globals_;
}

// repeated bytes references = 4;
inline int ComponentInterface::references_size() const {
  return references_.size();
}
inline void ComponentInterface::clear_references() {
  references_.Clear();
}
inline const ::std::string& ComponentInterface::references(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterface.references)
  return references_.Get(index);
}
inline ::std::string* ComponentInterface::mutable_references(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterface.references)
  return references_.Mutable(index);
}
inline void ComponentInterface::set_references(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:previrt.proto.ComponentInterface.references)
  references_.Mutable(index)->assign(value);
}
inline void ComponentInterface::set_references(int index, const char* value) {
  references_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::set_references(int index, const void* value, size_t size) {
  references_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.ComponentInterface.references)
}
inline ::std::string* ComponentInterface::add_references() {
  // @@protoc_insertion_point(field_add_mutable:previrt.proto.ComponentInterface.references)
  return references_.Add();
}
inline void ComponentInterface::add_references(const ::std::string& value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::add_references(const char* value) {
  references_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:previrt.proto.ComponentInterface.references)
}
inline void ComponentInterface::add_references(const void* value, size_t size) {
  references_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:previrt.proto.ComponentInterface.references)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ComponentInterface::references() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterface.references)
  return references_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ComponentInterface::mutable_references() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterface.references)
  return &references_;
}

// -------------------------------------------------------------------

// ComponentInterfaceTransform

// repeated .previrt.proto.CallRewrite calls = 1;
inline int ComponentInterfaceTransform::calls_size() const {
  return calls_.size();
}
inline void ComponentInterfaceTransform::clear_calls() {
  calls_.Clear();
}
inline const ::previrt::proto::CallRewrite& ComponentInterfaceTransform::calls(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_.Get(index);
}
inline ::previrt::proto::CallRewrite* ComponentInterfaceTransform::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_.Mutable(index);
}
inline ::previrt::proto::CallRewrite* ComponentInterfaceTransform::add_calls() {
  // @@protoc_insertion_point(field_add:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallRewrite >*
ComponentInterfaceTransform::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ComponentInterfaceTransform.calls)
  return &calls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::CallRewrite >&
ComponentInterfaceTransform::calls() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ComponentInterfaceTransform.calls)
  return calls_;
}

// -------------------------------------------------------------------

// ActionTree_Case

// required int32 var = 11;
inline bool ActionTree_Case::has_var() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionTree_Case::set_has_var() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionTree_Case::clear_has_var() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionTree_Case::clear_var() {
  var_ = 0;
  clear_has_var();
}
inline ::google::protobuf::int32 ActionTree_Case::var() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case.var)
  return var_;
}
inline void ActionTree_Case::set_var(::google::protobuf::int32 value) {
  set_has_var();
  var_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Case.var)
}

// required .previrt.proto.PrevirtType test = 12;
inline bool ActionTree_Case::has_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionTree_Case::set_has_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionTree_Case::clear_has_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionTree_Case::clear_test() {
  if (test_ != NULL) test_->::previrt::proto::PrevirtType::Clear();
  clear_has_test();
}
inline const ::previrt::proto::PrevirtType& ActionTree_Case::test() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case.test)
  return test_ != NULL ? *test_ : *default_instance_->test_;
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::mutable_test() {
  set_has_test();
  if (test_ == NULL) {
    test_ = new ::previrt::proto::PrevirtType;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case.test)
  return test_;
}
inline ::previrt::proto::PrevirtType* ActionTree_Case::release_test() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case.test)
  clear_has_test();
  ::previrt::proto::PrevirtType* temp = test_;
  test_ = NULL;
  return temp;
}
inline void ActionTree_Case::set_allocated_test(::previrt::proto::PrevirtType* test) {
  delete test_;
  test_ = test;
  if (test) {
    set_has_test();
  } else {
    clear_has_test();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case.test)
}

// required .previrt.proto.ActionTree _then = 18;
inline bool ActionTree_Case::has__then() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionTree_Case::set_has__then() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionTree_Case::clear_has__then() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionTree_Case::clear__then() {
  if (_then_ != NULL) _then_->::previrt::proto::ActionTree::Clear();
  clear_has__then();
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_then() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case._then)
  return _then_ != NULL ? *_then_ : *default_instance_->_then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::mutable__then() {
  set_has__then();
  if (_then_ == NULL) {
    _then_ = new ::previrt::proto::ActionTree;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case._then)
  return _then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::release__then() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case._then)
  clear_has__then();
  ::previrt::proto::ActionTree* temp = _then_;
  _then_ = NULL;
  return temp;
}
inline void ActionTree_Case::set_allocated__then(::previrt::proto::ActionTree* _then) {
  delete _then_;
  _then_ = _then;
  if (_then) {
    set_has__then();
  } else {
    clear_has__then();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case._then)
}

// required .previrt.proto.ActionTree _else = 19;
inline bool ActionTree_Case::has__else() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionTree_Case::set_has__else() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionTree_Case::clear_has__else() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionTree_Case::clear__else() {
  if (_else_ != NULL) _else_->::previrt::proto::ActionTree::Clear();
  clear_has__else();
}
inline const ::previrt::proto::ActionTree& ActionTree_Case::_else() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Case._else)
  return _else_ != NULL ? *_else_ : *default_instance_->_else_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::mutable__else() {
  set_has__else();
  if (_else_ == NULL) {
    _else_ = new ::previrt::proto::ActionTree;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Case._else)
  return _else_;
}
inline ::previrt::proto::ActionTree* ActionTree_Case::release__else() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Case._else)
  clear_has__else();
  ::previrt::proto::ActionTree* temp = _else_;
  _else_ = NULL;
  return temp;
}
inline void ActionTree_Case::set_allocated__else(::previrt::proto::ActionTree* _else) {
  delete _else_;
  _else_ = _else;
  if (_else) {
    set_has__else();
  } else {
    clear_has__else();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Case._else)
}

// -------------------------------------------------------------------

// ActionTree_Forward

// -------------------------------------------------------------------

// ActionTree_Event

// optional bool exit = 31 [default = false];
inline bool ActionTree_Event::has_exit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionTree_Event::set_has_exit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionTree_Event::clear_has_exit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionTree_Event::clear_exit() {
  exit_ = false;
  clear_has_exit();
}
inline bool ActionTree_Event::exit() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.exit)
  return exit_;
}
inline void ActionTree_Event::set_exit(bool value) {
  set_has_exit();
  exit_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.exit)
}

// optional bytes handler = 32;
inline bool ActionTree_Event::has_handler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionTree_Event::set_has_handler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionTree_Event::clear_has_handler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionTree_Event::clear_handler() {
  handler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_handler();
}
inline const ::std::string& ActionTree_Event::handler() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.handler)
  return handler_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionTree_Event::set_handler(const ::std::string& value) {
  set_has_handler();
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.handler)
}
inline void ActionTree_Event::set_handler(const char* value) {
  set_has_handler();
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.ActionTree.Event.handler)
}
inline void ActionTree_Event::set_handler(const void* value, size_t size) {
  set_has_handler();
  handler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.ActionTree.Event.handler)
}
inline ::std::string* ActionTree_Event::mutable_handler() {
  set_has_handler();
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Event.handler)
  return handler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionTree_Event::release_handler() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Event.handler)
  clear_has_handler();
  return handler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionTree_Event::set_allocated_handler(::std::string* handler) {
  if (handler != NULL) {
    set_has_handler();
  } else {
    clear_has_handler();
  }
  handler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handler);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Event.handler)
}

// repeated int32 args = 33;
inline int ActionTree_Event::args_size() const {
  return args_.size();
}
inline void ActionTree_Event::clear_args() {
  args_.Clear();
}
inline ::google::protobuf::int32 ActionTree_Event::args(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.args)
  return args_.Get(index);
}
inline void ActionTree_Event::set_args(int index, ::google::protobuf::int32 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.Event.args)
}
inline void ActionTree_Event::add_args(::google::protobuf::int32 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:previrt.proto.ActionTree.Event.args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ActionTree_Event::args() const {
  // @@protoc_insertion_point(field_list:previrt.proto.ActionTree.Event.args)
  return args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ActionTree_Event::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.ActionTree.Event.args)
  return &args_;
}

// optional .previrt.proto.ActionTree then = 39;
inline bool ActionTree_Event::has_then() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionTree_Event::set_has_then() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionTree_Event::clear_has_then() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionTree_Event::clear_then() {
  if (then_ != NULL) then_->::previrt::proto::ActionTree::Clear();
  clear_has_then();
}
inline const ::previrt::proto::ActionTree& ActionTree_Event::then() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.Event.then)
  return then_ != NULL ? *then_ : *default_instance_->then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Event::mutable_then() {
  set_has_then();
  if (then_ == NULL) {
    then_ = new ::previrt::proto::ActionTree;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.Event.then)
  return then_;
}
inline ::previrt::proto::ActionTree* ActionTree_Event::release_then() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.Event.then)
  clear_has_then();
  ::previrt::proto::ActionTree* temp = then_;
  then_ = NULL;
  return temp;
}
inline void ActionTree_Event::set_allocated_then(::previrt::proto::ActionTree* then) {
  delete then_;
  then_ = then;
  if (then) {
    set_has_then();
  } else {
    clear_has_then();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.Event.then)
}

// -------------------------------------------------------------------

// ActionTree

// required .previrt.proto.ActionType type = 1;
inline bool ActionTree::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionTree::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionTree::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionTree::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::previrt::proto::ActionType ActionTree::type() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.type)
  return static_cast< ::previrt::proto::ActionType >(type_);
}
inline void ActionTree::set_type(::previrt::proto::ActionType value) {
  assert(::previrt::proto::ActionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:previrt.proto.ActionTree.type)
}

// optional group Case = 10 { ... };
inline bool ActionTree::has_case_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionTree::set_has_case_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionTree::clear_has_case_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionTree::clear_case_() {
  if (case__ != NULL) case__->::previrt::proto::ActionTree_Case::Clear();
  clear_has_case_();
}
inline const ::previrt::proto::ActionTree_Case& ActionTree::case_() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.case)
  return case__ != NULL ? *case__ : *default_instance_->case__;
}
inline ::previrt::proto::ActionTree_Case* ActionTree::mutable_case_() {
  set_has_case_();
  if (case__ == NULL) {
    case__ = new ::previrt::proto::ActionTree_Case;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.case)
  return case__;
}
inline ::previrt::proto::ActionTree_Case* ActionTree::release_case_() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.case)
  clear_has_case_();
  ::previrt::proto::ActionTree_Case* temp = case__;
  case__ = NULL;
  return temp;
}
inline void ActionTree::set_allocated_case_(::previrt::proto::ActionTree_Case* case_) {
  delete case__;
  case__ = case_;
  if (case_) {
    set_has_case_();
  } else {
    clear_has_case_();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.case)
}

// optional group Forward = 20 { ... };
inline bool ActionTree::has_forward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionTree::set_has_forward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionTree::clear_has_forward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionTree::clear_forward() {
  if (forward_ != NULL) forward_->::previrt::proto::ActionTree_Forward::Clear();
  clear_has_forward();
}
inline const ::previrt::proto::ActionTree_Forward& ActionTree::forward() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.forward)
  return forward_ != NULL ? *forward_ : *default_instance_->forward_;
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::previrt::proto::ActionTree_Forward;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.forward)
  return forward_;
}
inline ::previrt::proto::ActionTree_Forward* ActionTree::release_forward() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.forward)
  clear_has_forward();
  ::previrt::proto::ActionTree_Forward* temp = forward_;
  forward_ = NULL;
  return temp;
}
inline void ActionTree::set_allocated_forward(::previrt::proto::ActionTree_Forward* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.forward)
}

// optional group Event = 30 { ... };
inline bool ActionTree::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActionTree::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActionTree::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActionTree::clear_event() {
  if (event_ != NULL) event_->::previrt::proto::ActionTree_Event::Clear();
  clear_has_event();
}
inline const ::previrt::proto::ActionTree_Event& ActionTree::event() const {
  // @@protoc_insertion_point(field_get:previrt.proto.ActionTree.event)
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
inline ::previrt::proto::ActionTree_Event* ActionTree::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::previrt::proto::ActionTree_Event;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.ActionTree.event)
  return event_;
}
inline ::previrt::proto::ActionTree_Event* ActionTree::release_event() {
  // @@protoc_insertion_point(field_release:previrt.proto.ActionTree.event)
  clear_has_event();
  ::previrt::proto::ActionTree_Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline void ActionTree::set_allocated_event(::previrt::proto::ActionTree_Event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.ActionTree.event)
}

// -------------------------------------------------------------------

// EnforceInterface_Functions

// required bytes name = 2;
inline bool EnforceInterface_Functions::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnforceInterface_Functions::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnforceInterface_Functions::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnforceInterface_Functions::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& EnforceInterface_Functions::name() const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.Functions.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnforceInterface_Functions::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:previrt.proto.EnforceInterface.Functions.name)
}
inline void EnforceInterface_Functions::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:previrt.proto.EnforceInterface.Functions.name)
}
inline void EnforceInterface_Functions::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:previrt.proto.EnforceInterface.Functions.name)
}
inline ::std::string* EnforceInterface_Functions::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.Functions.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnforceInterface_Functions::release_name() {
  // @@protoc_insertion_point(field_release:previrt.proto.EnforceInterface.Functions.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnforceInterface_Functions::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.EnforceInterface.Functions.name)
}

// required .previrt.proto.ActionTree actions = 3;
inline bool EnforceInterface_Functions::has_actions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnforceInterface_Functions::set_has_actions() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnforceInterface_Functions::clear_has_actions() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnforceInterface_Functions::clear_actions() {
  if (actions_ != NULL) actions_->::previrt::proto::ActionTree::Clear();
  clear_has_actions();
}
inline const ::previrt::proto::ActionTree& EnforceInterface_Functions::actions() const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.Functions.actions)
  return actions_ != NULL ? *actions_ : *default_instance_->actions_;
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::mutable_actions() {
  set_has_actions();
  if (actions_ == NULL) {
    actions_ = new ::previrt::proto::ActionTree;
  }
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.Functions.actions)
  return actions_;
}
inline ::previrt::proto::ActionTree* EnforceInterface_Functions::release_actions() {
  // @@protoc_insertion_point(field_release:previrt.proto.EnforceInterface.Functions.actions)
  clear_has_actions();
  ::previrt::proto::ActionTree* temp = actions_;
  actions_ = NULL;
  return temp;
}
inline void EnforceInterface_Functions::set_allocated_actions(::previrt::proto::ActionTree* actions) {
  delete actions_;
  actions_ = actions;
  if (actions) {
    set_has_actions();
  } else {
    clear_has_actions();
  }
  // @@protoc_insertion_point(field_set_allocated:previrt.proto.EnforceInterface.Functions.actions)
}

// -------------------------------------------------------------------

// EnforceInterface

// repeated group Functions = 1 { ... };
inline int EnforceInterface::functions_size() const {
  return functions_.size();
}
inline void EnforceInterface::clear_functions() {
  functions_.Clear();
}
inline const ::previrt::proto::EnforceInterface_Functions& EnforceInterface::functions(int index) const {
  // @@protoc_insertion_point(field_get:previrt.proto.EnforceInterface.functions)
  return functions_.Get(index);
}
inline ::previrt::proto::EnforceInterface_Functions* EnforceInterface::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:previrt.proto.EnforceInterface.functions)
  return functions_.Mutable(index);
}
inline ::previrt::proto::EnforceInterface_Functions* EnforceInterface::add_functions() {
  // @@protoc_insertion_point(field_add:previrt.proto.EnforceInterface.functions)
  return functions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >*
EnforceInterface::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:previrt.proto.EnforceInterface.functions)
  return &functions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::previrt::proto::EnforceInterface_Functions >&
EnforceInterface::functions() const {
  // @@protoc_insertion_point(field_list:previrt.proto.EnforceInterface.functions)
  return functions_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace previrt

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::previrt::proto::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::Type>() {
  return ::previrt::proto::Type_descriptor();
}
template <> struct is_proto_enum< ::previrt::proto::FloatSemantics> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::FloatSemantics>() {
  return ::previrt::proto::FloatSemantics_descriptor();
}
template <> struct is_proto_enum< ::previrt::proto::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::previrt::proto::ActionType>() {
  return ::previrt::proto::ActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Previrt_2eproto__INCLUDED
